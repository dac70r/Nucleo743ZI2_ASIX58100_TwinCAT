
Nucleo743Zi2_Asix58100.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b4c8  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000678  0800b760  0800b760  0000c760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bdd8  0800bdd8  0000cdd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bde0  0800bde0  0000cde0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800bde4  0800bde4  0000cde4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000040c  24000000  0800bde8  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000004dc  24000410  0800c1f4  0000d410  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  240008ec  0800c1f4  0000d8ec  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d40c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016d8a  00000000  00000000  0000d43a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000039de  00000000  00000000  000241c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001308  00000000  00000000  00027ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000ecd  00000000  00000000  00028eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003bed2  00000000  00000000  00029d7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001cb09  00000000  00000000  00065c4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001689ae  00000000  00000000  00082758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001eb106  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000509c  00000000  00000000  001eb14c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000093  00000000  00000000  001f01e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000410 	.word	0x24000410
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800b748 	.word	0x0800b748

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000414 	.word	0x24000414
 80002d4:	0800b748 	.word	0x0800b748

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <APPL_AckErrorInd>:
 \brief    The function is called when an error state was acknowledged by the master

*////////////////////////////////////////////////////////////////////////////////////////

void    APPL_AckErrorInd(UINT16 stateTrans)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	4603      	mov	r3, r0
 80002f0:	80fb      	strh	r3, [r7, #6]

}
 80002f2:	bf00      	nop
 80002f4:	370c      	adds	r7, #12
 80002f6:	46bd      	mov	sp, r7
 80002f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fc:	4770      	bx	lr

080002fe <APPL_StartMailboxHandler>:
            until a value unequal NOERROR_INWORK is returned

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 APPL_StartMailboxHandler(void)
{
 80002fe:	b480      	push	{r7}
 8000300:	af00      	add	r7, sp, #0
    return ALSTATUSCODE_NOERROR;
 8000302:	2300      	movs	r3, #0
}
 8000304:	4618      	mov	r0, r3
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr

0800030e <APPL_StopMailboxHandler>:
             the state transition.

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 APPL_StopMailboxHandler(void)
{
 800030e:	b480      	push	{r7}
 8000310:	af00      	add	r7, sp, #0
    return ALSTATUSCODE_NOERROR;
 8000312:	2300      	movs	r3, #0
}
 8000314:	4618      	mov	r0, r3
 8000316:	46bd      	mov	sp, r7
 8000318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031c:	4770      	bx	lr

0800031e <APPL_StartInputHandler>:
           the state transition immediately, in that case the application need to be complete 
           the transition by calling ECAT_StateChange.
*////////////////////////////////////////////////////////////////////////////////////////

UINT16 APPL_StartInputHandler(UINT16 *pIntMask)
{
 800031e:	b480      	push	{r7}
 8000320:	b083      	sub	sp, #12
 8000322:	af00      	add	r7, sp, #0
 8000324:	6078      	str	r0, [r7, #4]
    return ALSTATUSCODE_NOERROR;
 8000326:	2300      	movs	r3, #0
}
 8000328:	4618      	mov	r0, r3
 800032a:	370c      	adds	r7, #12
 800032c:	46bd      	mov	sp, r7
 800032e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000332:	4770      	bx	lr

08000334 <APPL_StopInputHandler>:
             the state transition.

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 APPL_StopInputHandler(void)
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
    return ALSTATUSCODE_NOERROR;
 8000338:	2300      	movs	r3, #0
}
 800033a:	4618      	mov	r0, r3
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr

08000344 <APPL_StartOutputHandler>:
           the state transition immediately, in that case the application need to be complete 
           the transition by calling ECAT_StateChange.
*////////////////////////////////////////////////////////////////////////////////////////

UINT16 APPL_StartOutputHandler(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
    return ALSTATUSCODE_NOERROR;
 8000348:	2300      	movs	r3, #0
}
 800034a:	4618      	mov	r0, r3
 800034c:	46bd      	mov	sp, r7
 800034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000352:	4770      	bx	lr

08000354 <APPL_StopOutputHandler>:
             the state transition.

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 APPL_StopOutputHandler(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
    return ALSTATUSCODE_NOERROR;
 8000358:	2300      	movs	r3, #0
}
 800035a:	4618      	mov	r0, r3
 800035c:	46bd      	mov	sp, r7
 800035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000362:	4770      	bx	lr

08000364 <APPL_GenerateMapping>:

\brief    This function calculates the process data sizes from the actual SM-PDO-Assign
            and PDO mapping
*////////////////////////////////////////////////////////////////////////////////////////
UINT16 APPL_GenerateMapping(UINT16 *pInputSize,UINT16 *pOutputSize)
{
 8000364:	b590      	push	{r4, r7, lr}
 8000366:	b089      	sub	sp, #36	@ 0x24
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
 800036c:	6039      	str	r1, [r7, #0]
    UINT16 result = ALSTATUSCODE_NOERROR;
 800036e:	2300      	movs	r3, #0
 8000370:	83fb      	strh	r3, [r7, #30]
    UINT16 InputSize = 0;
 8000372:	2300      	movs	r3, #0
 8000374:	83bb      	strh	r3, [r7, #28]
    UINT16 OutputSize = 0;
 8000376:	2300      	movs	r3, #0
 8000378:	837b      	strh	r3, [r7, #26]

#if COE_SUPPORTED
    UINT16 PDOAssignEntryCnt = 0;
 800037a:	2300      	movs	r3, #0
 800037c:	833b      	strh	r3, [r7, #24]
    OBJCONST TOBJECT OBJMEM * pPDO = NULL;
 800037e:	2300      	movs	r3, #0
 8000380:	613b      	str	r3, [r7, #16]
    UINT16 PDOSubindex0 = 0;
 8000382:	2300      	movs	r3, #0
 8000384:	81fb      	strh	r3, [r7, #14]
    UINT32 *pPDOEntry = NULL;
 8000386:	2300      	movs	r3, #0
 8000388:	60bb      	str	r3, [r7, #8]
    UINT16 PDOEntryCnt = 0;
 800038a:	2300      	movs	r3, #0
 800038c:	82fb      	strh	r3, [r7, #22]
   
#if MAX_PD_OUTPUT_SIZE > 0
    /*Scan object 0x1C12 RXPDO assign*/
    for(PDOAssignEntryCnt = 0; PDOAssignEntryCnt < sRxPDOassign.u16SubIndex0; PDOAssignEntryCnt++)
 800038e:	2300      	movs	r3, #0
 8000390:	833b      	strh	r3, [r7, #24]
 8000392:	e03a      	b.n	800040a <APPL_GenerateMapping+0xa6>
    {
        pPDO = OBJ_GetObjectHandle(sRxPDOassign.aEntries[PDOAssignEntryCnt]);
 8000394:	8b3b      	ldrh	r3, [r7, #24]
 8000396:	4a4c      	ldr	r2, [pc, #304]	@ (80004c8 <APPL_GenerateMapping+0x164>)
 8000398:	005b      	lsls	r3, r3, #1
 800039a:	4413      	add	r3, r2
 800039c:	885b      	ldrh	r3, [r3, #2]
 800039e:	4618      	mov	r0, r3
 80003a0:	f003 ffbc 	bl	800431c <OBJ_GetObjectHandle>
 80003a4:	6138      	str	r0, [r7, #16]
        if(pPDO != NULL)
 80003a6:	693b      	ldr	r3, [r7, #16]
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d026      	beq.n	80003fa <APPL_GenerateMapping+0x96>
        {
            PDOSubindex0 = *((UINT16 *)pPDO->pVarPtr);
 80003ac:	693b      	ldr	r3, [r7, #16]
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	881b      	ldrh	r3, [r3, #0]
 80003b2:	81fb      	strh	r3, [r7, #14]
            for(PDOEntryCnt = 0; PDOEntryCnt < PDOSubindex0; PDOEntryCnt++)
 80003b4:	2300      	movs	r3, #0
 80003b6:	82fb      	strh	r3, [r7, #22]
 80003b8:	e01a      	b.n	80003f0 <APPL_GenerateMapping+0x8c>
            {
                pPDOEntry = (UINT32 *)(((UINT16 *)pPDO->pVarPtr) + (OBJ_GetEntryOffset((PDOEntryCnt+1),pPDO)>>4));    //goto PDO entry
 80003ba:	693b      	ldr	r3, [r7, #16]
 80003bc:	699c      	ldr	r4, [r3, #24]
 80003be:	8afb      	ldrh	r3, [r7, #22]
 80003c0:	b2db      	uxtb	r3, r3
 80003c2:	3301      	adds	r3, #1
 80003c4:	b2db      	uxtb	r3, r3
 80003c6:	6939      	ldr	r1, [r7, #16]
 80003c8:	4618      	mov	r0, r3
 80003ca:	f004 fa33 	bl	8004834 <OBJ_GetEntryOffset>
 80003ce:	4603      	mov	r3, r0
 80003d0:	091b      	lsrs	r3, r3, #4
 80003d2:	b29b      	uxth	r3, r3
 80003d4:	005b      	lsls	r3, r3, #1
 80003d6:	4423      	add	r3, r4
 80003d8:	60bb      	str	r3, [r7, #8]
                // we increment the expected output size depending on the mapped Entry
                OutputSize += (UINT16) ((*pPDOEntry) & 0xFF);
 80003da:	68bb      	ldr	r3, [r7, #8]
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	b29b      	uxth	r3, r3
 80003e0:	b2db      	uxtb	r3, r3
 80003e2:	b29a      	uxth	r2, r3
 80003e4:	8b7b      	ldrh	r3, [r7, #26]
 80003e6:	4413      	add	r3, r2
 80003e8:	837b      	strh	r3, [r7, #26]
            for(PDOEntryCnt = 0; PDOEntryCnt < PDOSubindex0; PDOEntryCnt++)
 80003ea:	8afb      	ldrh	r3, [r7, #22]
 80003ec:	3301      	adds	r3, #1
 80003ee:	82fb      	strh	r3, [r7, #22]
 80003f0:	8afa      	ldrh	r2, [r7, #22]
 80003f2:	89fb      	ldrh	r3, [r7, #14]
 80003f4:	429a      	cmp	r2, r3
 80003f6:	d3e0      	bcc.n	80003ba <APPL_GenerateMapping+0x56>
 80003f8:	e004      	b.n	8000404 <APPL_GenerateMapping+0xa0>
            }
        }
        else
        {
            /*assigned PDO was not found in object dictionary. return invalid mapping*/
            OutputSize = 0;
 80003fa:	2300      	movs	r3, #0
 80003fc:	837b      	strh	r3, [r7, #26]
            result = ALSTATUSCODE_INVALIDOUTPUTMAPPING;
 80003fe:	2325      	movs	r3, #37	@ 0x25
 8000400:	83fb      	strh	r3, [r7, #30]
            break;
 8000402:	e007      	b.n	8000414 <APPL_GenerateMapping+0xb0>
    for(PDOAssignEntryCnt = 0; PDOAssignEntryCnt < sRxPDOassign.u16SubIndex0; PDOAssignEntryCnt++)
 8000404:	8b3b      	ldrh	r3, [r7, #24]
 8000406:	3301      	adds	r3, #1
 8000408:	833b      	strh	r3, [r7, #24]
 800040a:	4b2f      	ldr	r3, [pc, #188]	@ (80004c8 <APPL_GenerateMapping+0x164>)
 800040c:	881b      	ldrh	r3, [r3, #0]
 800040e:	8b3a      	ldrh	r2, [r7, #24]
 8000410:	429a      	cmp	r2, r3
 8000412:	d3bf      	bcc.n	8000394 <APPL_GenerateMapping+0x30>
        }
    }

    OutputSize = (OutputSize + 7) >> 3;
 8000414:	8b7b      	ldrh	r3, [r7, #26]
 8000416:	3307      	adds	r3, #7
 8000418:	10db      	asrs	r3, r3, #3
 800041a:	837b      	strh	r3, [r7, #26]
#endif

#if MAX_PD_INPUT_SIZE > 0
    if(result == 0)
 800041c:	8bfb      	ldrh	r3, [r7, #30]
 800041e:	2b00      	cmp	r3, #0
 8000420:	d142      	bne.n	80004a8 <APPL_GenerateMapping+0x144>
    {
        /*Scan Object 0x1C13 TXPDO assign*/
        for(PDOAssignEntryCnt = 0; PDOAssignEntryCnt < sTxPDOassign.u16SubIndex0; PDOAssignEntryCnt++)
 8000422:	2300      	movs	r3, #0
 8000424:	833b      	strh	r3, [r7, #24]
 8000426:	e03a      	b.n	800049e <APPL_GenerateMapping+0x13a>
        {
            pPDO = OBJ_GetObjectHandle(sTxPDOassign.aEntries[PDOAssignEntryCnt]);
 8000428:	8b3b      	ldrh	r3, [r7, #24]
 800042a:	4a28      	ldr	r2, [pc, #160]	@ (80004cc <APPL_GenerateMapping+0x168>)
 800042c:	005b      	lsls	r3, r3, #1
 800042e:	4413      	add	r3, r2
 8000430:	885b      	ldrh	r3, [r3, #2]
 8000432:	4618      	mov	r0, r3
 8000434:	f003 ff72 	bl	800431c <OBJ_GetObjectHandle>
 8000438:	6138      	str	r0, [r7, #16]
            if(pPDO != NULL)
 800043a:	693b      	ldr	r3, [r7, #16]
 800043c:	2b00      	cmp	r3, #0
 800043e:	d026      	beq.n	800048e <APPL_GenerateMapping+0x12a>
            {
                PDOSubindex0 = *((UINT16 *)pPDO->pVarPtr);
 8000440:	693b      	ldr	r3, [r7, #16]
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	881b      	ldrh	r3, [r3, #0]
 8000446:	81fb      	strh	r3, [r7, #14]
                for(PDOEntryCnt = 0; PDOEntryCnt < PDOSubindex0; PDOEntryCnt++)
 8000448:	2300      	movs	r3, #0
 800044a:	82fb      	strh	r3, [r7, #22]
 800044c:	e01a      	b.n	8000484 <APPL_GenerateMapping+0x120>
                {
                    pPDOEntry = (UINT32 *)(((UINT16 *)pPDO->pVarPtr) + (OBJ_GetEntryOffset((PDOEntryCnt+1),pPDO)>>4));    //goto PDO entry
 800044e:	693b      	ldr	r3, [r7, #16]
 8000450:	699c      	ldr	r4, [r3, #24]
 8000452:	8afb      	ldrh	r3, [r7, #22]
 8000454:	b2db      	uxtb	r3, r3
 8000456:	3301      	adds	r3, #1
 8000458:	b2db      	uxtb	r3, r3
 800045a:	6939      	ldr	r1, [r7, #16]
 800045c:	4618      	mov	r0, r3
 800045e:	f004 f9e9 	bl	8004834 <OBJ_GetEntryOffset>
 8000462:	4603      	mov	r3, r0
 8000464:	091b      	lsrs	r3, r3, #4
 8000466:	b29b      	uxth	r3, r3
 8000468:	005b      	lsls	r3, r3, #1
 800046a:	4423      	add	r3, r4
 800046c:	60bb      	str	r3, [r7, #8]
                    // we increment the expected output size depending on the mapped Entry
                    InputSize += (UINT16) ((*pPDOEntry) & 0xFF);
 800046e:	68bb      	ldr	r3, [r7, #8]
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	b29b      	uxth	r3, r3
 8000474:	b2db      	uxtb	r3, r3
 8000476:	b29a      	uxth	r2, r3
 8000478:	8bbb      	ldrh	r3, [r7, #28]
 800047a:	4413      	add	r3, r2
 800047c:	83bb      	strh	r3, [r7, #28]
                for(PDOEntryCnt = 0; PDOEntryCnt < PDOSubindex0; PDOEntryCnt++)
 800047e:	8afb      	ldrh	r3, [r7, #22]
 8000480:	3301      	adds	r3, #1
 8000482:	82fb      	strh	r3, [r7, #22]
 8000484:	8afa      	ldrh	r2, [r7, #22]
 8000486:	89fb      	ldrh	r3, [r7, #14]
 8000488:	429a      	cmp	r2, r3
 800048a:	d3e0      	bcc.n	800044e <APPL_GenerateMapping+0xea>
 800048c:	e004      	b.n	8000498 <APPL_GenerateMapping+0x134>
                }
            }
            else
            {
                /*assigned PDO was not found in object dictionary. return invalid mapping*/
                InputSize = 0;
 800048e:	2300      	movs	r3, #0
 8000490:	83bb      	strh	r3, [r7, #28]
                result = ALSTATUSCODE_INVALIDINPUTMAPPING;
 8000492:	2324      	movs	r3, #36	@ 0x24
 8000494:	83fb      	strh	r3, [r7, #30]
                break;
 8000496:	e007      	b.n	80004a8 <APPL_GenerateMapping+0x144>
        for(PDOAssignEntryCnt = 0; PDOAssignEntryCnt < sTxPDOassign.u16SubIndex0; PDOAssignEntryCnt++)
 8000498:	8b3b      	ldrh	r3, [r7, #24]
 800049a:	3301      	adds	r3, #1
 800049c:	833b      	strh	r3, [r7, #24]
 800049e:	4b0b      	ldr	r3, [pc, #44]	@ (80004cc <APPL_GenerateMapping+0x168>)
 80004a0:	881b      	ldrh	r3, [r3, #0]
 80004a2:	8b3a      	ldrh	r2, [r7, #24]
 80004a4:	429a      	cmp	r2, r3
 80004a6:	d3bf      	bcc.n	8000428 <APPL_GenerateMapping+0xc4>
            }
        }
    }
    InputSize = (InputSize + 7) >> 3;
 80004a8:	8bbb      	ldrh	r3, [r7, #28]
 80004aa:	3307      	adds	r3, #7
 80004ac:	10db      	asrs	r3, r3, #3
 80004ae:	83bb      	strh	r3, [r7, #28]
#else
    #warning "Define 'InputSize' and 'OutputSize'."
#endif
#endif

    *pInputSize = InputSize;
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	8bba      	ldrh	r2, [r7, #28]
 80004b4:	801a      	strh	r2, [r3, #0]
    *pOutputSize = OutputSize;
 80004b6:	683b      	ldr	r3, [r7, #0]
 80004b8:	8b7a      	ldrh	r2, [r7, #26]
 80004ba:	801a      	strh	r2, [r3, #0]
    return result;
 80004bc:	8bfb      	ldrh	r3, [r7, #30]
}
 80004be:	4618      	mov	r0, r3
 80004c0:	3724      	adds	r7, #36	@ 0x24
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd90      	pop	{r4, r7, pc}
 80004c6:	bf00      	nop
 80004c8:	24000010 	.word	0x24000010
 80004cc:	24000014 	.word	0x24000014

080004d0 <APPL_InputMapping>:

\brief      This function will copies the inputs from the local memory to the ESC memory
            to the hardware
*////////////////////////////////////////////////////////////////////////////////////////
void APPL_InputMapping(UINT16* pData)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	UINT8 *pTmpData = (UINT8 *)pData;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	60fb      	str	r3, [r7, #12]
	for (UINT8 j = 0; j < sTxPDOassign.u16SubIndex0; j++) {
 80004dc:	2300      	movs	r3, #0
 80004de:	72fb      	strb	r3, [r7, #11]
 80004e0:	e012      	b.n	8000508 <APPL_InputMapping+0x38>
		switch (sTxPDOassign.aEntries[j]) {
 80004e2:	7afb      	ldrb	r3, [r7, #11]
 80004e4:	4a0f      	ldr	r2, [pc, #60]	@ (8000524 <APPL_InputMapping+0x54>)
 80004e6:	005b      	lsls	r3, r3, #1
 80004e8:	4413      	add	r3, r2
 80004ea:	885b      	ldrh	r3, [r3, #2]
 80004ec:	f5b3 5fd0 	cmp.w	r3, #6656	@ 0x1a00
 80004f0:	d107      	bne.n	8000502 <APPL_InputMapping+0x32>
			case 0x1A00:
				memcpy(pTmpData, &IN_GENERIC0x6000.IN_GEN_INT1,
 80004f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000528 <APPL_InputMapping+0x58>)
 80004f4:	885a      	ldrh	r2, [r3, #2]
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	801a      	strh	r2, [r3, #0]
					   sizeof(IN_GENERIC0x6000.IN_GEN_INT1));
				pTmpData += sizeof(IN_GENERIC0x6000.IN_GEN_INT1);
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	3302      	adds	r3, #2
 80004fe:	60fb      	str	r3, [r7, #12]
				break;
 8000500:	bf00      	nop
	for (UINT8 j = 0; j < sTxPDOassign.u16SubIndex0; j++) {
 8000502:	7afb      	ldrb	r3, [r7, #11]
 8000504:	3301      	adds	r3, #1
 8000506:	72fb      	strb	r3, [r7, #11]
 8000508:	7afb      	ldrb	r3, [r7, #11]
 800050a:	b29a      	uxth	r2, r3
 800050c:	4b05      	ldr	r3, [pc, #20]	@ (8000524 <APPL_InputMapping+0x54>)
 800050e:	881b      	ldrh	r3, [r3, #0]
 8000510:	429a      	cmp	r2, r3
 8000512:	d3e6      	bcc.n	80004e2 <APPL_InputMapping+0x12>
		}
	}
}
 8000514:	bf00      	nop
 8000516:	bf00      	nop
 8000518:	3714      	adds	r7, #20
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	24000014 	.word	0x24000014
 8000528:	24000018 	.word	0x24000018

0800052c <APPL_OutputMapping>:

\brief    This function will copies the outputs from the ESC memory to the local memory
            to the hardware
*////////////////////////////////////////////////////////////////////////////////////////
void APPL_OutputMapping(UINT16* pData)
{
 800052c:	b480      	push	{r7}
 800052e:	b085      	sub	sp, #20
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
	UINT8 *pTmpData = (UINT8 *)pData;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	60fb      	str	r3, [r7, #12]
	    for (UINT8 k = 0; k < sRxPDOassign.u16SubIndex0; k++) {
 8000538:	2300      	movs	r3, #0
 800053a:	72fb      	strb	r3, [r7, #11]
 800053c:	e012      	b.n	8000564 <APPL_OutputMapping+0x38>
	        switch (sRxPDOassign.aEntries[k]) {
 800053e:	7afb      	ldrb	r3, [r7, #11]
 8000540:	4a0f      	ldr	r2, [pc, #60]	@ (8000580 <APPL_OutputMapping+0x54>)
 8000542:	005b      	lsls	r3, r3, #1
 8000544:	4413      	add	r3, r2
 8000546:	885b      	ldrh	r3, [r3, #2]
 8000548:	f5b3 5fb0 	cmp.w	r3, #5632	@ 0x1600
 800054c:	d107      	bne.n	800055e <APPL_OutputMapping+0x32>
	            case 0x1600:
	                memcpy(pTmpData, &OUT_GENERIC0x7000.OUT_GEN_INT1,
 800054e:	4b0d      	ldr	r3, [pc, #52]	@ (8000584 <APPL_OutputMapping+0x58>)
 8000550:	885a      	ldrh	r2, [r3, #2]
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	801a      	strh	r2, [r3, #0]
	                       sizeof(OUT_GENERIC0x7000.OUT_GEN_INT1));
	                pTmpData += sizeof(OUT_GENERIC0x7000.OUT_GEN_INT1);
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	3302      	adds	r3, #2
 800055a:	60fb      	str	r3, [r7, #12]
	                break;
 800055c:	bf00      	nop
	    for (UINT8 k = 0; k < sRxPDOassign.u16SubIndex0; k++) {
 800055e:	7afb      	ldrb	r3, [r7, #11]
 8000560:	3301      	adds	r3, #1
 8000562:	72fb      	strb	r3, [r7, #11]
 8000564:	7afb      	ldrb	r3, [r7, #11]
 8000566:	b29a      	uxth	r2, r3
 8000568:	4b05      	ldr	r3, [pc, #20]	@ (8000580 <APPL_OutputMapping+0x54>)
 800056a:	881b      	ldrh	r3, [r3, #0]
 800056c:	429a      	cmp	r2, r3
 800056e:	d3e6      	bcc.n	800053e <APPL_OutputMapping+0x12>
	        }
	    }
}
 8000570:	bf00      	nop
 8000572:	bf00      	nop
 8000574:	3714      	adds	r7, #20
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	24000010 	.word	0x24000010
 8000584:	2400001c 	.word	0x2400001c

08000588 <APPL_Application>:
\brief    This function will called from the synchronisation ISR 
            or from the mainloop if no synchronisation is supported
*////////////////////////////////////////////////////////////////////////////////////////
void process_app(TOBJ6000 *IN_GENERIC);
void APPL_Application(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
	IN_GENERIC0x6000.IN_GEN_INT1 = 150;
 800058c:	4b03      	ldr	r3, [pc, #12]	@ (800059c <APPL_Application+0x14>)
 800058e:	2296      	movs	r2, #150	@ 0x96
 8000590:	805a      	strh	r2, [r3, #2]
}
 8000592:	bf00      	nop
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr
 800059c:	24000018 	.word	0x24000018

080005a0 <APPL_GetDeviceID>:
 \return    The Explicit Device ID of the EtherCAT slave

 \brief     Read the Explicit Device ID (from an external ID switch)
*////////////////////////////////////////////////////////////////////////////////////////
UINT16 APPL_GetDeviceID()
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
    return 0x5;
 80005a4:	2305      	movs	r3, #5
}
 80005a6:	4618      	mov	r0, r3
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr

080005b0 <main_initial>:
/**

 \brief    This is the main function

*////////////////////////////////////////////////////////////////////////////////////////
void main_initial(void) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
    /* initialize the Hardware and the EtherCAT Slave Controller */
    HW_Init();
 80005b4:	f000 f93a 	bl	800082c <HW_Init>
    MainInit();
 80005b8:	f001 f876 	bl	80016a8 <MainInit>

    bRunApplication = TRUE;
 80005bc:	4b06      	ldr	r3, [pc, #24]	@ (80005d8 <main_initial+0x28>)
 80005be:	2201      	movs	r2, #1
 80005c0:	701a      	strb	r2, [r3, #0]
    do {
        MainLoop();
 80005c2:	f001 f901 	bl	80017c8 <MainLoop>
    } while (bRunApplication == TRUE);
 80005c6:	4b04      	ldr	r3, [pc, #16]	@ (80005d8 <main_initial+0x28>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b01      	cmp	r3, #1
 80005cc:	d0f9      	beq.n	80005c2 <main_initial+0x12>

    HW_Release();
 80005ce:	f000 f997 	bl	8000900 <HW_Release>
}
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	24000460 	.word	0x24000460

080005dc <HW_SPI_TransmitReceive>:
 * @param Size
 * @param Timeout
 * @return int32_t
 */
static int32_t HW_SPI_TransmitReceive(uint8_t* pTxData, uint8_t* pRxData,
                                      uint16_t Size, uint32_t Timeout) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b088      	sub	sp, #32
 80005e0:	af02      	add	r7, sp, #8
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	60b9      	str	r1, [r7, #8]
 80005e6:	603b      	str	r3, [r7, #0]
 80005e8:	4613      	mov	r3, r2
 80005ea:	80fb      	strh	r3, [r7, #6]
#if SPI_ACTIVE_LOW == 1
    HAL_GPIO_WritePin(HW_SPI_ESC_CS_PORT, HW_SPI_ESC_CS_PIN, GPIO_PIN_RESET);
 80005ec:	2200      	movs	r2, #0
 80005ee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005f2:	480c      	ldr	r0, [pc, #48]	@ (8000624 <HW_SPI_TransmitReceive+0x48>)
 80005f4:	f007 fc34 	bl	8007e60 <HAL_GPIO_WritePin>
#else
    HAL_GPIO_WritePin(HW_SPI_ESC_CS_PORT, HW_SPI_ESC_CS_PIN, GPIO_PIN_SET);
#endif

    int32_t errorcode = HAL_SPI_TransmitReceive(&HW_SPI_ESC_INSTANCE_H, pTxData,
 80005f8:	88fa      	ldrh	r2, [r7, #6]
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	9300      	str	r3, [sp, #0]
 80005fe:	4613      	mov	r3, r2
 8000600:	68ba      	ldr	r2, [r7, #8]
 8000602:	68f9      	ldr	r1, [r7, #12]
 8000604:	4808      	ldr	r0, [pc, #32]	@ (8000628 <HW_SPI_TransmitReceive+0x4c>)
 8000606:	f00a f8b5 	bl	800a774 <HAL_SPI_TransmitReceive>
 800060a:	4603      	mov	r3, r0
 800060c:	617b      	str	r3, [r7, #20]
                                                pRxData, Size, Timeout);

#if SPI_ACTIVE_LOW == 1
    HAL_GPIO_WritePin(HW_SPI_ESC_CS_PORT, HW_SPI_ESC_CS_PIN, GPIO_PIN_SET);
 800060e:	2201      	movs	r2, #1
 8000610:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000614:	4803      	ldr	r0, [pc, #12]	@ (8000624 <HW_SPI_TransmitReceive+0x48>)
 8000616:	f007 fc23 	bl	8007e60 <HAL_GPIO_WritePin>
#else
    HAL_GPIO_WritePin(HW_SPI_ESC_CS_PORT, HW_SPI_ESC_CS_PIN, GPIO_PIN_RESET);
#endif

    return errorcode;
 800061a:	697b      	ldr	r3, [r7, #20]
}
 800061c:	4618      	mov	r0, r3
 800061e:	3718      	adds	r7, #24
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	58020800 	.word	0x58020800
 8000628:	2400067c 	.word	0x2400067c

0800062c <HW_SPI_Read>:
 *
 * @param pBuf
 * @param Addr
 * @param ByteLen
 */
static void HW_SPI_Read(uint8_t* pBuf, uint16_t Addr, uint16_t ByteLen) {
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	460b      	mov	r3, r1
 8000636:	807b      	strh	r3, [r7, #2]
 8000638:	4613      	mov	r3, r2
 800063a:	803b      	strh	r3, [r7, #0]
    uint16_t XferLen, AddrTmp, i;
    uint8_t *ptr, DataOffset = 0;
 800063c:	2300      	movs	r3, #0
 800063e:	74fb      	strb	r3, [r7, #19]

    while (ByteLen) {
 8000640:	e05f      	b.n	8000702 <HW_SPI_Read+0xd6>
        AddrTmp = Addr;
 8000642:	887b      	ldrh	r3, [r7, #2]
 8000644:	817b      	strh	r3, [r7, #10]

        /* Fragmented to specified data length per-section */
        if (ByteLen > HW_SPI_MAX_DATA_FRAGMENT_SIZE) {
 8000646:	883b      	ldrh	r3, [r7, #0]
 8000648:	2b08      	cmp	r3, #8
 800064a:	d902      	bls.n	8000652 <HW_SPI_Read+0x26>
            XferLen = HW_SPI_MAX_DATA_FRAGMENT_SIZE;
 800064c:	2308      	movs	r3, #8
 800064e:	82fb      	strh	r3, [r7, #22]
 8000650:	e001      	b.n	8000656 <HW_SPI_Read+0x2a>
        } else {
            XferLen = ByteLen;
 8000652:	883b      	ldrh	r3, [r7, #0]
 8000654:	82fb      	strh	r3, [r7, #22]
        }

        /* Set address, command */
        ptr = (uint8_t*)&AddrTmp;
 8000656:	f107 030a 	add.w	r3, r7, #10
 800065a:	60fb      	str	r3, [r7, #12]
        AddrTmp = AddrTmp << 3;
        spiTxBuf[0] = ptr[1];
        spiTxBuf[1] = ptr[0] | HW_SPI_ADDR_EXT_CMD;
        DataOffset = 3;
#else
        AddrTmp = AddrTmp << 3;
 800065c:	897b      	ldrh	r3, [r7, #10]
 800065e:	00db      	lsls	r3, r3, #3
 8000660:	b29b      	uxth	r3, r3
 8000662:	817b      	strh	r3, [r7, #10]
        spiTxBuf[0] = ptr[1];
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	785a      	ldrb	r2, [r3, #1]
 8000668:	4b2a      	ldr	r3, [pc, #168]	@ (8000714 <HW_SPI_Read+0xe8>)
 800066a:	701a      	strb	r2, [r3, #0]
        spiTxBuf[1] = ptr[0] | HW_SPI_READ_WITH_WAIT_CMD;
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	f043 0303 	orr.w	r3, r3, #3
 8000674:	b2da      	uxtb	r2, r3
 8000676:	4b27      	ldr	r3, [pc, #156]	@ (8000714 <HW_SPI_Read+0xe8>)
 8000678:	705a      	strb	r2, [r3, #1]
        DataOffset = 2;
 800067a:	2302      	movs	r3, #2
 800067c:	74fb      	strb	r3, [r7, #19]
#endif

        /* Set dummy byte */
        spiTxBuf[DataOffset] = 0xff;
 800067e:	7cfb      	ldrb	r3, [r7, #19]
 8000680:	4a24      	ldr	r2, [pc, #144]	@ (8000714 <HW_SPI_Read+0xe8>)
 8000682:	21ff      	movs	r1, #255	@ 0xff
 8000684:	54d1      	strb	r1, [r2, r3]

        /* Set read terminal byte */
        memset(&spiTxBuf[DataOffset + 1], 0, XferLen);
 8000686:	7cfb      	ldrb	r3, [r7, #19]
 8000688:	3301      	adds	r3, #1
 800068a:	4a22      	ldr	r2, [pc, #136]	@ (8000714 <HW_SPI_Read+0xe8>)
 800068c:	4413      	add	r3, r2
 800068e:	8afa      	ldrh	r2, [r7, #22]
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f00a ffbc 	bl	800b610 <memset>
        spiTxBuf[DataOffset + XferLen] = 0xff;
 8000698:	7cfa      	ldrb	r2, [r7, #19]
 800069a:	8afb      	ldrh	r3, [r7, #22]
 800069c:	4413      	add	r3, r2
 800069e:	4a1d      	ldr	r2, [pc, #116]	@ (8000714 <HW_SPI_Read+0xe8>)
 80006a0:	21ff      	movs	r1, #255	@ 0xff
 80006a2:	54d1      	strb	r1, [r2, r3]
        DataOffset++;
 80006a4:	7cfb      	ldrb	r3, [r7, #19]
 80006a6:	3301      	adds	r3, #1
 80006a8:	74fb      	strb	r3, [r7, #19]

        /* Start read */
        if (HW_SPI_TransmitReceive(spiTxBuf, spiRxBuf, DataOffset + XferLen,
 80006aa:	7cfb      	ldrb	r3, [r7, #19]
 80006ac:	b29a      	uxth	r2, r3
 80006ae:	8afb      	ldrh	r3, [r7, #22]
 80006b0:	4413      	add	r3, r2
 80006b2:	b29a      	uxth	r2, r3
 80006b4:	230a      	movs	r3, #10
 80006b6:	4918      	ldr	r1, [pc, #96]	@ (8000718 <HW_SPI_Read+0xec>)
 80006b8:	4816      	ldr	r0, [pc, #88]	@ (8000714 <HW_SPI_Read+0xe8>)
 80006ba:	f7ff ff8f 	bl	80005dc <HW_SPI_TransmitReceive>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d122      	bne.n	800070a <HW_SPI_Read+0xde>
                                   HW_SPI_XFER_TIMEOUT) != 0) {
            break;
        }

        /* Store received data */
        for (i = 0; i < XferLen; i++) {
 80006c4:	2300      	movs	r3, #0
 80006c6:	82bb      	strh	r3, [r7, #20]
 80006c8:	e00b      	b.n	80006e2 <HW_SPI_Read+0xb6>
            pBuf[i] = spiRxBuf[DataOffset + i];
 80006ca:	7cfa      	ldrb	r2, [r7, #19]
 80006cc:	8abb      	ldrh	r3, [r7, #20]
 80006ce:	441a      	add	r2, r3
 80006d0:	8abb      	ldrh	r3, [r7, #20]
 80006d2:	6879      	ldr	r1, [r7, #4]
 80006d4:	440b      	add	r3, r1
 80006d6:	4910      	ldr	r1, [pc, #64]	@ (8000718 <HW_SPI_Read+0xec>)
 80006d8:	5c8a      	ldrb	r2, [r1, r2]
 80006da:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < XferLen; i++) {
 80006dc:	8abb      	ldrh	r3, [r7, #20]
 80006de:	3301      	adds	r3, #1
 80006e0:	82bb      	strh	r3, [r7, #20]
 80006e2:	8aba      	ldrh	r2, [r7, #20]
 80006e4:	8afb      	ldrh	r3, [r7, #22]
 80006e6:	429a      	cmp	r2, r3
 80006e8:	d3ef      	bcc.n	80006ca <HW_SPI_Read+0x9e>
        }

        /* Next section */
        Addr += XferLen;
 80006ea:	887a      	ldrh	r2, [r7, #2]
 80006ec:	8afb      	ldrh	r3, [r7, #22]
 80006ee:	4413      	add	r3, r2
 80006f0:	807b      	strh	r3, [r7, #2]
        pBuf += XferLen;
 80006f2:	8afb      	ldrh	r3, [r7, #22]
 80006f4:	687a      	ldr	r2, [r7, #4]
 80006f6:	4413      	add	r3, r2
 80006f8:	607b      	str	r3, [r7, #4]
        ByteLen -= XferLen;
 80006fa:	883a      	ldrh	r2, [r7, #0]
 80006fc:	8afb      	ldrh	r3, [r7, #22]
 80006fe:	1ad3      	subs	r3, r2, r3
 8000700:	803b      	strh	r3, [r7, #0]
    while (ByteLen) {
 8000702:	883b      	ldrh	r3, [r7, #0]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d19c      	bne.n	8000642 <HW_SPI_Read+0x16>
    }
}
 8000708:	e000      	b.n	800070c <HW_SPI_Read+0xe0>
            break;
 800070a:	bf00      	nop
}
 800070c:	bf00      	nop
 800070e:	3718      	adds	r7, #24
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	24000430 	.word	0x24000430
 8000718:	2400043c 	.word	0x2400043c

0800071c <HW_SPI_Write>:
 *
 * @param pData
 * @param Addr
 * @param ByteLen
 */
static void HW_SPI_Write(uint8_t* pData, uint16_t Addr, uint16_t ByteLen) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	460b      	mov	r3, r1
 8000726:	807b      	strh	r3, [r7, #2]
 8000728:	4613      	mov	r3, r2
 800072a:	803b      	strh	r3, [r7, #0]
    uint16_t XferLen, AddrTmp;
    uint8_t *ptr, DataOffset;

    while (ByteLen) {
 800072c:	e048      	b.n	80007c0 <HW_SPI_Write+0xa4>
        AddrTmp = Addr;
 800072e:	887b      	ldrh	r3, [r7, #2]
 8000730:	81bb      	strh	r3, [r7, #12]

        /* Fragmented to specified data length per-section */
        if (ByteLen > HW_SPI_MAX_DATA_FRAGMENT_SIZE) {
 8000732:	883b      	ldrh	r3, [r7, #0]
 8000734:	2b08      	cmp	r3, #8
 8000736:	d902      	bls.n	800073e <HW_SPI_Write+0x22>
            XferLen = HW_SPI_MAX_DATA_FRAGMENT_SIZE;
 8000738:	2308      	movs	r3, #8
 800073a:	82fb      	strh	r3, [r7, #22]
 800073c:	e006      	b.n	800074c <HW_SPI_Write+0x30>
        } else {
            /* Avoid 3bytes access */
            XferLen = ((ByteLen == 3) ? 2 : ByteLen);
 800073e:	883b      	ldrh	r3, [r7, #0]
 8000740:	2b03      	cmp	r3, #3
 8000742:	d001      	beq.n	8000748 <HW_SPI_Write+0x2c>
 8000744:	883b      	ldrh	r3, [r7, #0]
 8000746:	e000      	b.n	800074a <HW_SPI_Write+0x2e>
 8000748:	2302      	movs	r3, #2
 800074a:	82fb      	strh	r3, [r7, #22]
        }

        /* Set address , command */
        ptr = (uint8_t*)&AddrTmp;
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	613b      	str	r3, [r7, #16]
        AddrTmp = AddrTmp << 3;
        spiTxBuf[0] = ptr[1];
        spiTxBuf[1] = ptr[0] | HW_SPI_ADDR_EXT_CMD;
        DataOffset = 3;
#else
        AddrTmp = AddrTmp << 3;
 8000752:	89bb      	ldrh	r3, [r7, #12]
 8000754:	00db      	lsls	r3, r3, #3
 8000756:	b29b      	uxth	r3, r3
 8000758:	81bb      	strh	r3, [r7, #12]
        spiTxBuf[0] = ptr[1];
 800075a:	693b      	ldr	r3, [r7, #16]
 800075c:	785a      	ldrb	r2, [r3, #1]
 800075e:	4b1d      	ldr	r3, [pc, #116]	@ (80007d4 <HW_SPI_Write+0xb8>)
 8000760:	701a      	strb	r2, [r3, #0]
        spiTxBuf[1] = ptr[0] | HW_SPI_WRITE_CMD;
 8000762:	693b      	ldr	r3, [r7, #16]
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	f043 0304 	orr.w	r3, r3, #4
 800076a:	b2da      	uxtb	r2, r3
 800076c:	4b19      	ldr	r3, [pc, #100]	@ (80007d4 <HW_SPI_Write+0xb8>)
 800076e:	705a      	strb	r2, [r3, #1]
        DataOffset = 2;
 8000770:	2302      	movs	r3, #2
 8000772:	73fb      	strb	r3, [r7, #15]
#endif

        /* Set transmit data bytes */
        memcpy(&(spiTxBuf[DataOffset]), pData, XferLen);
 8000774:	7bfb      	ldrb	r3, [r7, #15]
 8000776:	4a17      	ldr	r2, [pc, #92]	@ (80007d4 <HW_SPI_Write+0xb8>)
 8000778:	4413      	add	r3, r2
 800077a:	8afa      	ldrh	r2, [r7, #22]
 800077c:	6879      	ldr	r1, [r7, #4]
 800077e:	4618      	mov	r0, r3
 8000780:	f00a ff8a 	bl	800b698 <memcpy>
        DataOffset++;
 8000784:	7bfb      	ldrb	r3, [r7, #15]
 8000786:	3301      	adds	r3, #1
 8000788:	73fb      	strb	r3, [r7, #15]

        /* Start write */
        if (HW_SPI_TransmitReceive(spiTxBuf, spiRxBuf,
                                   (DataOffset - 1) + XferLen,
 800078a:	7bfb      	ldrb	r3, [r7, #15]
 800078c:	b29a      	uxth	r2, r3
 800078e:	8afb      	ldrh	r3, [r7, #22]
 8000790:	4413      	add	r3, r2
 8000792:	b29b      	uxth	r3, r3
        if (HW_SPI_TransmitReceive(spiTxBuf, spiRxBuf,
 8000794:	3b01      	subs	r3, #1
 8000796:	b29a      	uxth	r2, r3
 8000798:	230a      	movs	r3, #10
 800079a:	490f      	ldr	r1, [pc, #60]	@ (80007d8 <HW_SPI_Write+0xbc>)
 800079c:	480d      	ldr	r0, [pc, #52]	@ (80007d4 <HW_SPI_Write+0xb8>)
 800079e:	f7ff ff1d 	bl	80005dc <HW_SPI_TransmitReceive>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d10f      	bne.n	80007c8 <HW_SPI_Write+0xac>
                                   HW_SPI_XFER_TIMEOUT) != 0) {
            break;
        }

        Addr += XferLen;
 80007a8:	887a      	ldrh	r2, [r7, #2]
 80007aa:	8afb      	ldrh	r3, [r7, #22]
 80007ac:	4413      	add	r3, r2
 80007ae:	807b      	strh	r3, [r7, #2]
        pData += XferLen;
 80007b0:	8afb      	ldrh	r3, [r7, #22]
 80007b2:	687a      	ldr	r2, [r7, #4]
 80007b4:	4413      	add	r3, r2
 80007b6:	607b      	str	r3, [r7, #4]
        ByteLen -= XferLen;
 80007b8:	883a      	ldrh	r2, [r7, #0]
 80007ba:	8afb      	ldrh	r3, [r7, #22]
 80007bc:	1ad3      	subs	r3, r2, r3
 80007be:	803b      	strh	r3, [r7, #0]
    while (ByteLen) {
 80007c0:	883b      	ldrh	r3, [r7, #0]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d1b3      	bne.n	800072e <HW_SPI_Write+0x12>
    }
}
 80007c6:	e000      	b.n	80007ca <HW_SPI_Write+0xae>
            break;
 80007c8:	bf00      	nop
}
 80007ca:	bf00      	nop
 80007cc:	3718      	adds	r7, #24
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	24000430 	.word	0x24000430
 80007d8:	2400043c 	.word	0x2400043c

080007dc <GetInterruptRegister>:
 * @note   The first two bytes of an access to the EtherCAT ASIC always deliver
 * the AL_Event register (0x220). It will be saved in the global "EscALEvent"
 * @param  None
 * @retval None
 */
static void GetInterruptRegister(void) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	2301      	movs	r3, #1
 80007e4:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	f383 8810 	msr	PRIMASK, r3
}
 80007ec:	bf00      	nop
#if AL_EVENT_ENABLED
    DISABLE_AL_EVENT_INT;
#endif

    HW_EscRead((MEM_ADDR*)EscALEvent.Byte, ESC_AL_EVENT_OFFSET, 2);
 80007ee:	2202      	movs	r2, #2
 80007f0:	f44f 7108 	mov.w	r1, #544	@ 0x220
 80007f4:	4806      	ldr	r0, [pc, #24]	@ (8000810 <GetInterruptRegister+0x34>)
 80007f6:	f000 f89f 	bl	8000938 <HW_EscRead>
 80007fa:	2300      	movs	r3, #0
 80007fc:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	f383 8810 	msr	PRIMASK, r3
}
 8000804:	bf00      	nop

#if AL_EVENT_ENABLED
    ENABLE_AL_EVENT_INT;
#endif
}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	2400042c 	.word	0x2400042c

08000814 <ISR_GetInterruptRegister>:
 * @retval None
 */
#if !INTERRUPTS_SUPPORTED
#define ISR_GetInterruptRegister GetInterruptRegister
#else
static void ISR_GetInterruptRegister(void) {
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
    HW_EscReadIsr((MEM_ADDR*)EscALEvent.Byte, ESC_AL_EVENT_OFFSET, 2);
 8000818:	2202      	movs	r2, #2
 800081a:	f44f 7108 	mov.w	r1, #544	@ 0x220
 800081e:	4802      	ldr	r0, [pc, #8]	@ (8000828 <ISR_GetInterruptRegister+0x14>)
 8000820:	f000 f8a8 	bl	8000974 <HW_EscReadIsr>
}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	2400042c 	.word	0x2400042c

0800082c <HW_Init>:
 * @brief  This function intialize the Process Data Interface (PDI) and the host
 * controller.
 * @param  None
 * @retval 0 if initialization was successful
 */
uint8_t HW_Init(void) {
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
    uint16_t startTime;
    uint16_t currentTime;
    uint16_t elapsedTime;

    /* Enable time tick peripheral */
    HAL_TIM_Base_Start(&HW_TIMETICK_INSTANCE_H);
 8000832:	482e      	ldr	r0, [pc, #184]	@ (80008ec <HW_Init+0xc0>)
 8000834:	f00a fc18 	bl	800b068 <HAL_TIM_Base_Start>

    /* Wait ESC ready by checking EEPDONE pin goes high */
    startTime = HW_GetTimer();  // Get the starting time
 8000838:	4b2d      	ldr	r3, [pc, #180]	@ (80008f0 <HW_Init+0xc4>)
 800083a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	81bb      	strh	r3, [r7, #12]
    do {
        currentTime = HW_GetTimer();  // Get the current timer value
 8000840:	4b2b      	ldr	r3, [pc, #172]	@ (80008f0 <HW_Init+0xc4>)
 8000842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	817b      	strh	r3, [r7, #10]

        if (currentTime < startTime) {
 8000848:	897a      	ldrh	r2, [r7, #10]
 800084a:	89bb      	ldrh	r3, [r7, #12]
 800084c:	429a      	cmp	r2, r3
 800084e:	d206      	bcs.n	800085e <HW_Init+0x32>
            // Handle timer overflow
            elapsedTime = (HW_TIMETICK_MAX_VALUE - startTime) + currentTime;
 8000850:	897a      	ldrh	r2, [r7, #10]
 8000852:	89bb      	ldrh	r3, [r7, #12]
 8000854:	1ad3      	subs	r3, r2, r3
 8000856:	b29b      	uxth	r3, r3
 8000858:	3b01      	subs	r3, #1
 800085a:	81fb      	strh	r3, [r7, #14]
 800085c:	e003      	b.n	8000866 <HW_Init+0x3a>
        } else {
            elapsedTime = currentTime - startTime;
 800085e:	897a      	ldrh	r2, [r7, #10]
 8000860:	89bb      	ldrh	r3, [r7, #12]
 8000862:	1ad3      	subs	r3, r2, r3
 8000864:	81fb      	strh	r3, [r7, #14]
        }

        if (elapsedTime >= HW_EEPROM_RELOAD_TIMEOUT) {
 8000866:	89fb      	ldrh	r3, [r7, #14]
 8000868:	f242 720f 	movw	r2, #9999	@ 0x270f
 800086c:	4293      	cmp	r3, r2
 800086e:	d901      	bls.n	8000874 <HW_Init+0x48>
            return 1;  // Timeout occurred
 8000870:	2301      	movs	r3, #1
 8000872:	e037      	b.n	80008e4 <HW_Init+0xb8>
        }
    } while (HAL_GPIO_ReadPin(HW_EEPROM_PORT, HW_EEPROM_PIN) == GPIO_PIN_RESET);
 8000874:	2102      	movs	r1, #2
 8000876:	481f      	ldr	r0, [pc, #124]	@ (80008f4 <HW_Init+0xc8>)
 8000878:	f007 fada 	bl	8007e30 <HAL_GPIO_ReadPin>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d0de      	beq.n	8000840 <HW_Init+0x14>

    do {
        intMask = 0x93;
 8000882:	2393      	movs	r3, #147	@ 0x93
 8000884:	603b      	str	r3, [r7, #0]
        HW_EscWriteDWord(intMask, ESC_AL_EVENTMASK_OFFSET);
 8000886:	463b      	mov	r3, r7
 8000888:	2204      	movs	r2, #4
 800088a:	f44f 7101 	mov.w	r1, #516	@ 0x204
 800088e:	4618      	mov	r0, r3
 8000890:	f000 f882 	bl	8000998 <HW_EscWrite>
        intMask = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	603b      	str	r3, [r7, #0]
        HW_EscReadDWord(intMask, ESC_AL_EVENTMASK_OFFSET);
 8000898:	463b      	mov	r3, r7
 800089a:	2204      	movs	r2, #4
 800089c:	f44f 7101 	mov.w	r1, #516	@ 0x204
 80008a0:	4618      	mov	r0, r3
 80008a2:	f000 f849 	bl	8000938 <HW_EscRead>
    } while (intMask != 0x93);
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	2b93      	cmp	r3, #147	@ 0x93
 80008aa:	d1ea      	bne.n	8000882 <HW_Init+0x56>
    intMask = 0x00;
 80008ac:	2300      	movs	r3, #0
 80008ae:	603b      	str	r3, [r7, #0]
    HW_EscWriteDWord(intMask, ESC_AL_EVENTMASK_OFFSET);
 80008b0:	463b      	mov	r3, r7
 80008b2:	2204      	movs	r2, #4
 80008b4:	f44f 7101 	mov.w	r1, #516	@ 0x204
 80008b8:	4618      	mov	r0, r3
 80008ba:	f000 f86d 	bl	8000998 <HW_EscWrite>
#if AL_EVENT_ENABLED
    /* Enable ESC interrupt */
    ENABLE_ESC_INT();
#endif

    HAL_TIM_Base_Start_IT(&HW_TIMETASK_INSTANCE_H);
 80008be:	480e      	ldr	r0, [pc, #56]	@ (80008f8 <HW_Init+0xcc>)
 80008c0:	f00a fc42 	bl	800b148 <HAL_TIM_Base_Start_IT>
 80008c4:	2300      	movs	r3, #0
 80008c6:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	f383 8810 	msr	PRIMASK, r3
}
 80008ce:	bf00      	nop
    /* enable all interrupts */
    ENABLE_GLOBAL_INT;
#endif

    /* If Switch ID is not zero, write it into station alias register */
    if (bootSwitchID) {
 80008d0:	4b0a      	ldr	r3, [pc, #40]	@ (80008fc <HW_Init+0xd0>)
 80008d2:	881b      	ldrh	r3, [r3, #0]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d004      	beq.n	80008e2 <HW_Init+0xb6>
        HW_EscWriteWord(bootSwitchID, ESC_ALIAS_ADDRESS_OFFSET);
 80008d8:	2202      	movs	r2, #2
 80008da:	2112      	movs	r1, #18
 80008dc:	4807      	ldr	r0, [pc, #28]	@ (80008fc <HW_Init+0xd0>)
 80008de:	f000 f85b 	bl	8000998 <HW_EscWrite>
    }

    return 0;
 80008e2:	2300      	movs	r3, #0
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3710      	adds	r7, #16
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	24000708 	.word	0x24000708
 80008f0:	40001000 	.word	0x40001000
 80008f4:	58020400 	.word	0x58020400
 80008f8:	24000754 	.word	0x24000754
 80008fc:	2400042e 	.word	0x2400042e

08000900 <HW_Release>:
 * @brief  This function shall be implemented if hardware resources need to be
 * release when the sample application stops.
 * @param  None
 * @retval None
 */
void HW_Release(void) {}
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
	...

08000910 <HW_GetALEventRegister>:
/**
 * @brief  This function gets the current content of ALEvent register
 * @param  None
 * @retval First two Bytes of ALEvent register (0x220)
 */
uint16_t HW_GetALEventRegister(void) {
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
    GetInterruptRegister();
 8000914:	f7ff ff62 	bl	80007dc <GetInterruptRegister>
    return EscALEvent.Word;
 8000918:	4b01      	ldr	r3, [pc, #4]	@ (8000920 <HW_GetALEventRegister+0x10>)
 800091a:	881b      	ldrh	r3, [r3, #0]
}
 800091c:	4618      	mov	r0, r3
 800091e:	bd80      	pop	{r7, pc}
 8000920:	2400042c 	.word	0x2400042c

08000924 <HW_GetALEventRegister_Isr>:
 * interrupts service routines. The behaviour is equal to
 * "HW_GetALEventRegister()"
 * @param  None
 * @retval First two Bytes of ALEvent register (0x220)
 */
uint16_t HW_GetALEventRegister_Isr(void) {
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
    ISR_GetInterruptRegister();
 8000928:	f7ff ff74 	bl	8000814 <ISR_GetInterruptRegister>
    return EscALEvent.Word;
 800092c:	4b01      	ldr	r3, [pc, #4]	@ (8000934 <HW_GetALEventRegister_Isr+0x10>)
 800092e:	881b      	ldrh	r3, [r3, #0]
}
 8000930:	4618      	mov	r0, r3
 8000932:	bd80      	pop	{r7, pc}
 8000934:	2400042c 	.word	0x2400042c

08000938 <HW_EscRead>:
 * @param  Address   EtherCAT ASIC address ( upper limit is 0x1FFF )    for
 * access.
 * @param  Len       Access size in Bytes.
 * @retval None
 */
void HW_EscRead(MEM_ADDR* pData, uint16_t Address, uint16_t Len) {
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	460b      	mov	r3, r1
 8000942:	807b      	strh	r3, [r7, #2]
 8000944:	4613      	mov	r3, r2
 8000946:	803b      	strh	r3, [r7, #0]
 8000948:	2301      	movs	r3, #1
 800094a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	f383 8810 	msr	PRIMASK, r3
}
 8000952:	bf00      	nop
#if AL_EVENT_ENABLED
    DISABLE_AL_EVENT_INT;
#endif
    HW_SPI_Read((uint8_t*)pData, Address, Len);
 8000954:	883a      	ldrh	r2, [r7, #0]
 8000956:	887b      	ldrh	r3, [r7, #2]
 8000958:	4619      	mov	r1, r3
 800095a:	6878      	ldr	r0, [r7, #4]
 800095c:	f7ff fe66 	bl	800062c <HW_SPI_Read>
 8000960:	2300      	movs	r3, #0
 8000962:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	f383 8810 	msr	PRIMASK, r3
}
 800096a:	bf00      	nop

#if AL_EVENT_ENABLED
    ENABLE_AL_EVENT_INT;
#endif
}
 800096c:	bf00      	nop
 800096e:	3710      	adds	r7, #16
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}

08000974 <HW_EscReadIsr>:
 * @param  Address     EtherCAT ASIC address ( upper limit is 0x1FFF ) for
 * access.
 * @param  Len         Access size in Bytes.
 * @retval None
 */
void HW_EscReadIsr(MEM_ADDR* pData, uint16_t Address, uint16_t Len) {
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	460b      	mov	r3, r1
 800097e:	807b      	strh	r3, [r7, #2]
 8000980:	4613      	mov	r3, r2
 8000982:	803b      	strh	r3, [r7, #0]
    HW_SPI_Read((uint8_t*)pData, Address, Len);
 8000984:	883a      	ldrh	r2, [r7, #0]
 8000986:	887b      	ldrh	r3, [r7, #2]
 8000988:	4619      	mov	r1, r3
 800098a:	6878      	ldr	r0, [r7, #4]
 800098c:	f7ff fe4e 	bl	800062c <HW_SPI_Read>
}
 8000990:	bf00      	nop
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}

08000998 <HW_EscWrite>:
 * @param  Address     EtherCAT ASIC address ( upper limit is 0x1FFF ) for
 * access.
 * @param  Len         Access size in Bytes.
 * @retval None
 */
void HW_EscWrite(MEM_ADDR* pData, uint16_t Address, uint16_t Len) {
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	460b      	mov	r3, r1
 80009a2:	807b      	strh	r3, [r7, #2]
 80009a4:	4613      	mov	r3, r2
 80009a6:	803b      	strh	r3, [r7, #0]
 80009a8:	2301      	movs	r3, #1
 80009aa:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	f383 8810 	msr	PRIMASK, r3
}
 80009b2:	bf00      	nop
#if AL_EVENT_ENABLED
    DISABLE_AL_EVENT_INT;
#endif
    HW_SPI_Write((uint8_t*)pData, Address, Len);
 80009b4:	883a      	ldrh	r2, [r7, #0]
 80009b6:	887b      	ldrh	r3, [r7, #2]
 80009b8:	4619      	mov	r1, r3
 80009ba:	6878      	ldr	r0, [r7, #4]
 80009bc:	f7ff feae 	bl	800071c <HW_SPI_Write>
 80009c0:	2300      	movs	r3, #0
 80009c2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	f383 8810 	msr	PRIMASK, r3
}
 80009ca:	bf00      	nop

#if AL_EVENT_ENABLED
    ENABLE_AL_EVENT_INT;
#endif
}
 80009cc:	bf00      	nop
 80009ce:	3710      	adds	r7, #16
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <HW_EscWriteIsr>:
 * @param  Address     EtherCAT ASIC address ( upper limit is 0x1FFF ) for
 * access.
 * @param  Len         Access size in Bytes.
 * @retval None
 */
void HW_EscWriteIsr(MEM_ADDR* pData, uint16_t Address, uint16_t Len) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	460b      	mov	r3, r1
 80009de:	807b      	strh	r3, [r7, #2]
 80009e0:	4613      	mov	r3, r2
 80009e2:	803b      	strh	r3, [r7, #0]
    HW_SPI_Write((uint8_t*)pData, Address, Len);
 80009e4:	883a      	ldrh	r2, [r7, #0]
 80009e6:	887b      	ldrh	r3, [r7, #2]
 80009e8:	4619      	mov	r1, r3
 80009ea:	6878      	ldr	r0, [r7, #4]
 80009ec:	f7ff fe96 	bl	800071c <HW_SPI_Write>
}
 80009f0:	bf00      	nop
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <EXTI4_IRQHandler>:
/**
 * @brief  Interrupt service routine for AL
 * @param  None
 * @retval None
 */
void HW_ALEVENT_IRQHandler(void) {
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
    if (__HAL_GPIO_EXTI_GET_FLAG(HW_SPI_ESC_INT_PIN)) {
 80009fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a04:	f003 0310 	and.w	r3, r3, #16
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d006      	beq.n	8000a1a <EXTI4_IRQHandler+0x22>
        __HAL_GPIO_EXTI_CLEAR_FLAG(HW_SPI_ESC_INT_PIN);
 8000a0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a10:	2210      	movs	r2, #16
 8000a12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        PDI_Isr();
 8000a16:	f000 fc9f 	bl	8001358 <PDI_Isr>
    }
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <EXTI2_IRQHandler>:
/**
 * @brief  Interrupt service routine for SYNC0/SYNC1
 * @param  None
 * @retval None
 */
void HW_SYNC0_IRQHandler(void) {
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	af00      	add	r7, sp, #0
#if DC_SUPPORTED
    if (__HAL_GPIO_EXTI_GET_FLAG(HW_SYNC0_PIN)) {
 8000a22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a2a:	f003 0304 	and.w	r3, r3, #4
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d006      	beq.n	8000a40 <EXTI2_IRQHandler+0x22>
        __HAL_GPIO_EXTI_CLEAR_FLAG(HW_SYNC0_PIN);
 8000a32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a36:	2204      	movs	r2, #4
 8000a38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        Sync0_Isr();
 8000a3c:	f000 fd52 	bl	80014e4 <Sync0_Isr>
    }

#endif
}
 8000a40:	bf00      	nop
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <EXTI3_IRQHandler>:
 * @brief  Interrupt service routine for SYNC0/SYNC1
 * @param  None
 * @retval None
 */

void HW_SYNC1_IRQHandler(void) {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
#if DC_SUPPORTED
    if (__HAL_GPIO_EXTI_GET_FLAG(HW_SYNC1_PIN)) {
 8000a48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a50:	f003 0308 	and.w	r3, r3, #8
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d006      	beq.n	8000a66 <EXTI3_IRQHandler+0x22>
        __HAL_GPIO_EXTI_CLEAR_FLAG(HW_SYNC1_PIN);
 8000a58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a5c:	2208      	movs	r2, #8
 8000a5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        Sync1_Isr();
 8000a62:	f000 fdf9 	bl	8001658 <Sync1_Isr>
    }

#endif
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
	...

08000a6c <TIM16_IRQHandler>:
    /**
     * @brief  Interrupt service routine for the Timer
     * @param  None
     * @retval None
     */
    void HW_TIMETASK_IRQHandler(void) {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
        if ((__HAL_TIM_GET_IT_SOURCE(&HW_TIMETASK_INSTANCE_H, TIM_IT_UPDATE) ==
 8000a70:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa0 <TIM16_IRQHandler+0x34>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	68db      	ldr	r3, [r3, #12]
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d10d      	bne.n	8000a9a <TIM16_IRQHandler+0x2e>
             SET) &&
            (__HAL_TIM_GET_FLAG(&HW_TIMETASK_INSTANCE_H, TIM_FLAG_UPDATE) != 0)) {
 8000a7e:	4b08      	ldr	r3, [pc, #32]	@ (8000aa0 <TIM16_IRQHandler+0x34>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	691b      	ldr	r3, [r3, #16]
 8000a84:	f003 0301 	and.w	r3, r3, #1
             SET) &&
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d106      	bne.n	8000a9a <TIM16_IRQHandler+0x2e>
            __HAL_TIM_CLEAR_FLAG(&HW_TIMETASK_INSTANCE_H, TIM_FLAG_UPDATE);
 8000a8c:	4b04      	ldr	r3, [pc, #16]	@ (8000aa0 <TIM16_IRQHandler+0x34>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f06f 0201 	mvn.w	r2, #1
 8000a94:	611a      	str	r2, [r3, #16]
            ECAT_CheckTimer();
 8000a96:	f000 fb99 	bl	80011cc <ECAT_CheckTimer>
            //appTimerRun();  // TODO place your run on timer task here
        }
    }
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	24000754 	.word	0x24000754

08000aa4 <Read0x10F8>:
sdosrv.h))

\brief    This function reads the object 0x10F8
*/
UINT8 Read0x10F8(UINT16 index, UINT8 subindex, UINT32 dataSize, UINT16 MBXMEM * pData, UINT8 bCompleteAccess)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	60ba      	str	r2, [r7, #8]
 8000aac:	607b      	str	r3, [r7, #4]
 8000aae:	4603      	mov	r3, r0
 8000ab0:	81fb      	strh	r3, [r7, #14]
 8000ab2:	460b      	mov	r3, r1
 8000ab4:	737b      	strb	r3, [r7, #13]

    if (index != 0x10F8)
 8000ab6:	89fb      	ldrh	r3, [r7, #14]
 8000ab8:	f241 02f8 	movw	r2, #4344	@ 0x10f8
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d001      	beq.n	8000ac4 <Read0x10F8+0x20>
    {
        return ABORTIDX_PARAM_IS_INCOMPATIBLE;
 8000ac0:	230b      	movs	r3, #11
 8000ac2:	e016      	b.n	8000af2 <Read0x10F8+0x4e>
    }

    
    if (bCompleteAccess)
 8000ac4:	7e3b      	ldrb	r3, [r7, #24]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <Read0x10F8+0x2a>
    {
         /* Complete Access is not supported for object 0x10F8 */
        return ABORTIDX_UNSUPPORTED_ACCESS;
 8000aca:	2305      	movs	r3, #5
 8000acc:	e011      	b.n	8000af2 <Read0x10F8+0x4e>
    }

    if (subindex > 0)
 8000ace:	7b7b      	ldrb	r3, [r7, #13]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <Read0x10F8+0x34>
    {
        return ABORTIDX_SUBINDEX_NOT_EXISTING;
 8000ad4:	2311      	movs	r3, #17
 8000ad6:	e00c      	b.n	8000af2 <Read0x10F8+0x4e>
    }

    if (dataSize > 8)
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	2b08      	cmp	r3, #8
 8000adc:	d901      	bls.n	8000ae2 <Read0x10F8+0x3e>
    {
        return ABORTIDX_PARAM_LENGTH_TOO_LONG;
 8000ade:	230f      	movs	r3, #15
 8000ae0:	e007      	b.n	8000af2 <Read0x10F8+0x4e>
    }


    COE_SyncTimeStamp();
 8000ae2:	f000 f80d 	bl	8000b00 <COE_SyncTimeStamp>

    MEMCPY(pData, &u64Timestamp, dataSize);
 8000ae6:	68ba      	ldr	r2, [r7, #8]
 8000ae8:	4904      	ldr	r1, [pc, #16]	@ (8000afc <Read0x10F8+0x58>)
 8000aea:	6878      	ldr	r0, [r7, #4]
 8000aec:	f00a fdd4 	bl	800b698 <memcpy>
    return 0;
 8000af0:	2300      	movs	r3, #0
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3710      	adds	r7, #16
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	24000448 	.word	0x24000448

08000b00 <COE_SyncTimeStamp>:
/**
\brief    This function updates the local time stamp object (0x10F8) and has to be called at least every 4.2sec to detect an 32Bit DC unit overrun.
          Called from the Timer handler 
*////////////////////////////////////////////////////////////////////////////////////////
void COE_SyncTimeStamp(void)
{
 8000b00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000b04:	b084      	sub	sp, #16
 8000b06:	af00      	add	r7, sp, #0

    if (b32BitDc)
 8000b08:	4b21      	ldr	r3, [pc, #132]	@ (8000b90 <COE_SyncTimeStamp+0x90>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d030      	beq.n	8000b72 <COE_SyncTimeStamp+0x72>
    {
        UINT32 DcTime = (UINT32)(u64Timestamp & (UINT64)0x00000000FFFFFFFF);
 8000b10:	4b20      	ldr	r3, [pc, #128]	@ (8000b94 <COE_SyncTimeStamp+0x94>)
 8000b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b16:	4613      	mov	r3, r2
 8000b18:	60fb      	str	r3, [r7, #12]


        HW_EscReadDWord(DcTime, ESC_SYSTEMTIME_OFFSET);
 8000b1a:	f107 030c 	add.w	r3, r7, #12
 8000b1e:	2204      	movs	r2, #4
 8000b20:	f44f 6111 	mov.w	r1, #2320	@ 0x910
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff ff07 	bl	8000938 <HW_EscRead>

        /*update the lower 32Bit*/
        u64Timestamp = ((u64Timestamp & ((UINT64)0xFFFFFFFF00000000)) | (UINT64)DcTime);
 8000b2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000b94 <COE_SyncTimeStamp+0x94>)
 8000b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b30:	2400      	movs	r4, #0
 8000b32:	461d      	mov	r5, r3
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	2200      	movs	r2, #0
 8000b38:	4698      	mov	r8, r3
 8000b3a:	4691      	mov	r9, r2
 8000b3c:	ea44 0a08 	orr.w	sl, r4, r8
 8000b40:	ea45 0b09 	orr.w	fp, r5, r9
 8000b44:	4b13      	ldr	r3, [pc, #76]	@ (8000b94 <COE_SyncTimeStamp+0x94>)
 8000b46:	e9c3 ab00 	strd	sl, fp, [r3]

        if (DcTime < u32LastDc32Value)
 8000b4a:	68fa      	ldr	r2, [r7, #12]
 8000b4c:	4b12      	ldr	r3, [pc, #72]	@ (8000b98 <COE_SyncTimeStamp+0x98>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d20a      	bcs.n	8000b6a <COE_SyncTimeStamp+0x6a>
        {
            /*32Bit overrun*/
            u64Timestamp = u64Timestamp + ((UINT64)0x0000000100000000);
 8000b54:	4b0f      	ldr	r3, [pc, #60]	@ (8000b94 <COE_SyncTimeStamp+0x94>)
 8000b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b5a:	1c59      	adds	r1, r3, #1
 8000b5c:	6079      	str	r1, [r7, #4]
 8000b5e:	603a      	str	r2, [r7, #0]
 8000b60:	4b0c      	ldr	r3, [pc, #48]	@ (8000b94 <COE_SyncTimeStamp+0x94>)
 8000b62:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000b66:	e9c3 1200 	strd	r1, r2, [r3]
        }
        
        u32LastDc32Value = DcTime;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	4a0a      	ldr	r2, [pc, #40]	@ (8000b98 <COE_SyncTimeStamp+0x98>)
 8000b6e:	6013      	str	r3, [r2, #0]
 8000b70:	e005      	b.n	8000b7e <COE_SyncTimeStamp+0x7e>
    }
    else
    {
        /*The DC unit supports 64Bit => update the complete object*/
        
        HW_EscRead((MEM_ADDR *)&u64Timestamp, ESC_SYSTEMTIME_OFFSET, 8);
 8000b72:	2208      	movs	r2, #8
 8000b74:	f44f 6111 	mov.w	r1, #2320	@ 0x910
 8000b78:	4806      	ldr	r0, [pc, #24]	@ (8000b94 <COE_SyncTimeStamp+0x94>)
 8000b7a:	f7ff fedd 	bl	8000938 <HW_EscRead>
    }

    u32CheckForDcOverrunCnt = 0;
 8000b7e:	4b07      	ldr	r3, [pc, #28]	@ (8000b9c <COE_SyncTimeStamp+0x9c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]

}
 8000b84:	bf00      	nop
 8000b86:	3710      	adds	r7, #16
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000b8e:	bf00      	nop
 8000b90:	240004e8 	.word	0x240004e8
 8000b94:	24000448 	.word	0x24000448
 8000b98:	24000450 	.word	0x24000450
 8000b9c:	24000454 	.word	0x24000454

08000ba0 <COE_GetObjectDictionary>:
/**

 \brief    returns the pointer to the object dictionary
*////////////////////////////////////////////////////////////////////////////////////////
OBJCONST TOBJECT OBJMEM * COE_GetObjectDictionary(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
    return (OBJCONST TOBJECT OBJMEM *) ObjDicList;
 8000ba4:	4b03      	ldr	r3, [pc, #12]	@ (8000bb4 <COE_GetObjectDictionary+0x14>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	2400045c 	.word	0x2400045c

08000bb8 <COE_UpdateSyncErrorStatus>:
/////////////////////////////////////////////////////////////////////////////////////////
/**
\brief     Update the Sync Error Indication
*////////////////////////////////////////////////////////////////////////////////////////
void COE_UpdateSyncErrorStatus(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
    if (sSyncManOutPar.u16CycleExceededCounter > 0 || sSyncManOutPar.u16SmEventMissedCounter > sErrorSettings.u16SyncErrorCounterLimit)
 8000bbc:	4b15      	ldr	r3, [pc, #84]	@ (8000c14 <COE_UpdateSyncErrorStatus+0x5c>)
 8000bbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d105      	bne.n	8000bd0 <COE_UpdateSyncErrorStatus+0x18>
 8000bc4:	4b13      	ldr	r3, [pc, #76]	@ (8000c14 <COE_UpdateSyncErrorStatus+0x5c>)
 8000bc6:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8000bc8:	4b13      	ldr	r3, [pc, #76]	@ (8000c18 <COE_UpdateSyncErrorStatus+0x60>)
 8000bca:	891b      	ldrh	r3, [r3, #8]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d904      	bls.n	8000bda <COE_UpdateSyncErrorStatus+0x22>
    {
        sSyncManOutPar.u8SyncError = 1;
 8000bd0:	4b10      	ldr	r3, [pc, #64]	@ (8000c14 <COE_UpdateSyncErrorStatus+0x5c>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8000bd8:	e003      	b.n	8000be2 <COE_UpdateSyncErrorStatus+0x2a>
    }
    else
    {
        sSyncManOutPar.u8SyncError = 0;
 8000bda:	4b0e      	ldr	r3, [pc, #56]	@ (8000c14 <COE_UpdateSyncErrorStatus+0x5c>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    }


    if (sSyncManInPar.u16CycleExceededCounter > 0 || sSyncManInPar.u16SmEventMissedCounter > sErrorSettings.u16SyncErrorCounterLimit)
 8000be2:	4b0e      	ldr	r3, [pc, #56]	@ (8000c1c <COE_UpdateSyncErrorStatus+0x64>)
 8000be4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d105      	bne.n	8000bf6 <COE_UpdateSyncErrorStatus+0x3e>
 8000bea:	4b0c      	ldr	r3, [pc, #48]	@ (8000c1c <COE_UpdateSyncErrorStatus+0x64>)
 8000bec:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8000bee:	4b0a      	ldr	r3, [pc, #40]	@ (8000c18 <COE_UpdateSyncErrorStatus+0x60>)
 8000bf0:	891b      	ldrh	r3, [r3, #8]
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	d904      	bls.n	8000c00 <COE_UpdateSyncErrorStatus+0x48>
    {
        sSyncManInPar.u8SyncError = 1;
 8000bf6:	4b09      	ldr	r3, [pc, #36]	@ (8000c1c <COE_UpdateSyncErrorStatus+0x64>)
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8000bfe:	e004      	b.n	8000c0a <COE_UpdateSyncErrorStatus+0x52>
    }
    else
    {
        sSyncManInPar.u8SyncError = 0;
 8000c00:	4b06      	ldr	r3, [pc, #24]	@ (8000c1c <COE_UpdateSyncErrorStatus+0x64>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    }

}
 8000c08:	bf00      	nop
 8000c0a:	bf00      	nop
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	240005a8 	.word	0x240005a8
 8000c18:	24000390 	.word	0x24000390
 8000c1c:	240005ec 	.word	0x240005ec

08000c20 <COE_ObjInit>:
/**
 \brief     This function initialize the several objects
*////////////////////////////////////////////////////////////////////////////////////////

void COE_ObjInit(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0

    /* initialize the Sync Manager Output parameter object 0x1C32 */

    sSyncManOutPar.subindex0         = 32;
 8000c26:	4b47      	ldr	r3, [pc, #284]	@ (8000d44 <COE_ObjInit+0x124>)
 8000c28:	2220      	movs	r2, #32
 8000c2a:	801a      	strh	r2, [r3, #0]
      from the master to switch between ECAT FreeRun and ECAT Synchron Mode
        if the slave supports both modes,
        in DC mode (selected by the DC registers) this value will be overwritten
        with SYNCTYPE_DCSYNC0 or SYNCTYPE_DCSYNC1 */
     /*default mode is ECAT Synchron Mode */
    sSyncManOutPar.u16SyncType     = SYNCTYPE_FREERUN;
 8000c2c:	4b45      	ldr	r3, [pc, #276]	@ (8000d44 <COE_ObjInit+0x124>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	805a      	strh	r2, [r3, #2]
    /* subindex 2 contains the cycle time of the application,
       in ECAT FreeRun mode it could be used for a timer interrupt to run the application,
        in ECAT Synchron mode it could be written from the master with its local cycle time
        that the slave can check if this cycle time is supported,
        in DC Mode this value will be overwritten with the DC cycle time register */
    sSyncManOutPar.u32CycleTime     = 0;
 8000c32:	4b44      	ldr	r3, [pc, #272]	@ (8000d44 <COE_ObjInit+0x124>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	605a      	str	r2, [r3, #4]

    /* the subindex 4 contains the supported synchronization types */

    sSyncManOutPar.u16SyncTypesSupported    = SYNCTYPE_FREERUNSUPP            /* ECAT FreeRun Mode is supported */
 8000c38:	4b42      	ldr	r3, [pc, #264]	@ (8000d44 <COE_ObjInit+0x124>)
 8000c3a:	f244 021f 	movw	r2, #16415	@ 0x401f
 8000c3e:	819a      	strh	r2, [r3, #12]

    /* subindex 5 contains the minimum cycle time the slave is able to support,
       will be calculated dynamically because it depends on the connected modules
        (in this example we will make an online measurement in the ESC Interrupt Routine).
        For the sample application this value is set to MIN_PD_CYCLE_TIME */
    sSyncManOutPar.u32MinCycleTime = MIN_PD_CYCLE_TIME;
 8000c40:	4b40      	ldr	r3, [pc, #256]	@ (8000d44 <COE_ObjInit+0x124>)
 8000c42:	4a41      	ldr	r2, [pc, #260]	@ (8000d48 <COE_ObjInit+0x128>)
 8000c44:	611a      	str	r2, [r3, #16]
    /* only for DC Mode important: subindex 6 contains the minimum delay time the slave
       needs after receiving the SM2-event before the SYNC0(SYNC1) can be received without delays
       will be calculated dynamically because it depends on the connected modules
        (in this example we will make an online measurement in the ESC Interrupt Routine) */
    sSyncManOutPar.u32CalcAndCopyTime = (PD_OUTPUT_CALC_AND_COPY_TIME);
 8000c46:	4b3f      	ldr	r3, [pc, #252]	@ (8000d44 <COE_ObjInit+0x124>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	615a      	str	r2, [r3, #20]

    /*subindex 8: trigger cycle time measurement*/
    sSyncManOutPar.u16GetCycleTime = 0;
 8000c4c:	4b3d      	ldr	r3, [pc, #244]	@ (8000d44 <COE_ObjInit+0x124>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	839a      	strh	r2, [r3, #28]

    /*subindex 9: time from start driving outputs until outputs are valid*/
    sSyncManOutPar.u32DelayTime = (PD_OUTPUT_DELAY_TIME);
 8000c52:	4b3c      	ldr	r3, [pc, #240]	@ (8000d44 <COE_ObjInit+0x124>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	621a      	str	r2, [r3, #32]

    /*subindex 11: reset the sm missed error counter*/
    sSyncManOutPar.u16SmEventMissedCounter = 0;
 8000c58:	4b3a      	ldr	r3, [pc, #232]	@ (8000d44 <COE_ObjInit+0x124>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	851a      	strh	r2, [r3, #40]	@ 0x28

    /*subindex 12: reset the cycle exceed error counter*/
    sSyncManOutPar.u16CycleExceededCounter = 0;
 8000c5e:	4b39      	ldr	r3, [pc, #228]	@ (8000d44 <COE_ObjInit+0x124>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /*subindex 32: indicates if a synchronisation error has occurred*/
    sSyncManOutPar.u8SyncError = 0;
 8000c64:	4b37      	ldr	r3, [pc, #220]	@ (8000d44 <COE_ObjInit+0x124>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* initialize the Sync Manager Input parameter object 0x1C33 */
    sSyncManInPar.subindex0         = 32;
 8000c6c:	4b37      	ldr	r3, [pc, #220]	@ (8000d4c <COE_ObjInit+0x12c>)
 8000c6e:	2220      	movs	r2, #32
 8000c70:	801a      	strh	r2, [r3, #0]
    /* default mode is ECAT Synchron Mode, if output size > 0 the inputs are updated with the SM2-event */
    sSyncManInPar.u16SyncType         = SYNCTYPE_FREERUN;
 8000c72:	4b36      	ldr	r3, [pc, #216]	@ (8000d4c <COE_ObjInit+0x12c>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	805a      	strh	r2, [r3, #2]

    
    /* subindex 2: same as 0x1C32:02 */
    sSyncManInPar.u32CycleTime     = sSyncManOutPar.u32CycleTime;
 8000c78:	4b32      	ldr	r3, [pc, #200]	@ (8000d44 <COE_ObjInit+0x124>)
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	4a33      	ldr	r2, [pc, #204]	@ (8000d4c <COE_ObjInit+0x12c>)
 8000c7e:	6053      	str	r3, [r2, #4]

    /* subindex 4: same as 0x1C32:04 */
    sSyncManInPar.u16SyncTypesSupported    = sSyncManOutPar.u16SyncTypesSupported;
 8000c80:	4b30      	ldr	r3, [pc, #192]	@ (8000d44 <COE_ObjInit+0x124>)
 8000c82:	899a      	ldrh	r2, [r3, #12]
 8000c84:	4b31      	ldr	r3, [pc, #196]	@ (8000d4c <COE_ObjInit+0x12c>)
 8000c86:	819a      	strh	r2, [r3, #12]

    /* subindex 5: same as 0x1C32:05 */
    sSyncManInPar.u32MinCycleTime = MIN_PD_CYCLE_TIME;
 8000c88:	4b30      	ldr	r3, [pc, #192]	@ (8000d4c <COE_ObjInit+0x12c>)
 8000c8a:	4a2f      	ldr	r2, [pc, #188]	@ (8000d48 <COE_ObjInit+0x128>)
 8000c8c:	611a      	str	r2, [r3, #16]
    /* subindex 6: delay read inputs, calculation and copy to SM buffer*/
    sSyncManInPar.u32CalcAndCopyTime = (PD_INPUT_CALC_AND_COPY_TIME);
 8000c8e:	4b2f      	ldr	r3, [pc, #188]	@ (8000d4c <COE_ObjInit+0x12c>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	615a      	str	r2, [r3, #20]
    /*subindex 8: trigger cycle time measurement*/
    sSyncManInPar.u16GetCycleTime = 0;
 8000c94:	4b2d      	ldr	r3, [pc, #180]	@ (8000d4c <COE_ObjInit+0x12c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	839a      	strh	r2, [r3, #28]
    /*subindex 9: delay to prepare input latch*/
    sSyncManInPar.u32DelayTime = (PD_INPUT_DELAY_TIME);
 8000c9a:	4b2c      	ldr	r3, [pc, #176]	@ (8000d4c <COE_ObjInit+0x12c>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	621a      	str	r2, [r3, #32]

    /*subindex 11: reset the sm missed error counter*/
    sSyncManInPar.u16SmEventMissedCounter = 0;
 8000ca0:	4b2a      	ldr	r3, [pc, #168]	@ (8000d4c <COE_ObjInit+0x12c>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	851a      	strh	r2, [r3, #40]	@ 0x28

    /*subindex 12: reset the cycle exceed error counter*/
    sSyncManInPar.u16CycleExceededCounter = 0;
 8000ca6:	4b29      	ldr	r3, [pc, #164]	@ (8000d4c <COE_ObjInit+0x12c>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /*subindex 32: incremented if a synchronisation error has occurred*/
    sSyncManInPar.u8SyncError = 0;
 8000cac:	4b27      	ldr	r3, [pc, #156]	@ (8000d4c <COE_ObjInit+0x12c>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /*Indicate no user specified Sync mode*/
    bSyncSetByUser = FALSE;
 8000cb4:	4b26      	ldr	r3, [pc, #152]	@ (8000d50 <COE_ObjInit+0x130>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	701a      	strb	r2, [r3, #0]

    {
    UINT16 result = COE_ObjDictionaryInit();
 8000cba:	f000 f957 	bl	8000f6c <COE_ObjDictionaryInit>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	80fb      	strh	r3, [r7, #6]
    if(result != 0)
 8000cc2:	88fb      	ldrh	r3, [r7, #6]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <COE_ObjInit+0xac>
    {
        /*clear already linked objects*/
        COE_ClearObjDictionary();
 8000cc8:	f000 f90e 	bl	8000ee8 <COE_ClearObjDictionary>
    }
    }

    u8PendingSdo = 0;
 8000ccc:	4b21      	ldr	r3, [pc, #132]	@ (8000d54 <COE_ObjInit+0x134>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	701a      	strb	r2, [r3, #0]
    bStoreCompleteAccess = FALSE;
 8000cd2:	4b21      	ldr	r3, [pc, #132]	@ (8000d58 <COE_ObjInit+0x138>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	701a      	strb	r2, [r3, #0]
    u16StoreIndex   =   0;
 8000cd8:	4b20      	ldr	r3, [pc, #128]	@ (8000d5c <COE_ObjInit+0x13c>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	801a      	strh	r2, [r3, #0]
    u8StoreSubindex = 0;
 8000cde:	4b20      	ldr	r3, [pc, #128]	@ (8000d60 <COE_ObjInit+0x140>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	701a      	strb	r2, [r3, #0]
    u32StoreDataSize = 0;
 8000ce4:	4b1f      	ldr	r3, [pc, #124]	@ (8000d64 <COE_ObjInit+0x144>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
    pStoreData = NULL;
 8000cea:	4b1f      	ldr	r3, [pc, #124]	@ (8000d68 <COE_ObjInit+0x148>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
    pSdoPendFunc    = NULL;
 8000cf0:	4b1e      	ldr	r3, [pc, #120]	@ (8000d6c <COE_ObjInit+0x14c>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]

    pSdoSegData = NULL;
 8000cf6:	4b1e      	ldr	r3, [pc, #120]	@ (8000d70 <COE_ObjInit+0x150>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]


    {
        UINT32 EscFeature = 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	603b      	str	r3, [r7, #0]
        HW_EscReadDWord(EscFeature, ESC_FEATURES_OFFSET);
 8000d00:	463b      	mov	r3, r7
 8000d02:	2204      	movs	r2, #4
 8000d04:	2108      	movs	r1, #8
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff fe16 	bl	8000938 <HW_EscRead>
        EscFeature = SWAPDWORD(EscFeature);
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	603b      	str	r3, [r7, #0]

        if ((EscFeature & ESC_DC_32BIT_MASK) > 0)
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	f003 0308 	and.w	r3, r3, #8
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d003      	beq.n	8000d22 <COE_ObjInit+0x102>
        {
            b32BitDc = FALSE;
 8000d1a:	4b16      	ldr	r3, [pc, #88]	@ (8000d74 <COE_ObjInit+0x154>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	701a      	strb	r2, [r3, #0]
 8000d20:	e008      	b.n	8000d34 <COE_ObjInit+0x114>
        }
        else
        {
            b32BitDc = TRUE;
 8000d22:	4b14      	ldr	r3, [pc, #80]	@ (8000d74 <COE_ObjInit+0x154>)
 8000d24:	2201      	movs	r2, #1
 8000d26:	701a      	strb	r2, [r3, #0]

            HW_EscReadDWord(u32LastDc32Value, ESC_SYSTEMTIME_OFFSET);
 8000d28:	2204      	movs	r2, #4
 8000d2a:	f44f 6111 	mov.w	r1, #2320	@ 0x910
 8000d2e:	4812      	ldr	r0, [pc, #72]	@ (8000d78 <COE_ObjInit+0x158>)
 8000d30:	f7ff fe02 	bl	8000938 <HW_EscRead>
        }

        u32CheckForDcOverrunCnt = CHECK_DC_OVERRUN_IN_MS;
 8000d34:	4b11      	ldr	r3, [pc, #68]	@ (8000d7c <COE_ObjInit+0x15c>)
 8000d36:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8000d3a:	601a      	str	r2, [r3, #0]
    }
}
 8000d3c:	bf00      	nop
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	240005a8 	.word	0x240005a8
 8000d48:	000186a0 	.word	0x000186a0
 8000d4c:	240005ec 	.word	0x240005ec
 8000d50:	240005a1 	.word	0x240005a1
 8000d54:	24000630 	.word	0x24000630
 8000d58:	24000631 	.word	0x24000631
 8000d5c:	24000634 	.word	0x24000634
 8000d60:	24000632 	.word	0x24000632
 8000d64:	24000638 	.word	0x24000638
 8000d68:	2400063c 	.word	0x2400063c
 8000d6c:	24000640 	.word	0x24000640
 8000d70:	24000654 	.word	0x24000654
 8000d74:	240004e8 	.word	0x240004e8
 8000d78:	24000450 	.word	0x24000450
 8000d7c:	24000454 	.word	0x24000454

08000d80 <COE_AddObjectToDic>:
            ALSTATUSCODE_XX add object failed

 \brief    This function adds an object to the object dictionary
 *////////////////////////////////////////////////////////////////////////////////////////
UINT16 COE_AddObjectToDic(TOBJECT OBJMEM * pNewObjEntry)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
    if(pNewObjEntry != NULL)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d062      	beq.n	8000e54 <COE_AddObjectToDic+0xd4>
    {
        if(ObjDicList == NULL)
 8000d8e:	4b35      	ldr	r3, [pc, #212]	@ (8000e64 <COE_AddObjectToDic+0xe4>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d10c      	bne.n	8000db0 <COE_AddObjectToDic+0x30>
        {
            /* Object dictionary is empty */
            ObjDicList = pNewObjEntry;
 8000d96:	4a33      	ldr	r2, [pc, #204]	@ (8000e64 <COE_AddObjectToDic+0xe4>)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6013      	str	r3, [r2, #0]
            ObjDicList->pNext = NULL;
 8000d9c:	4b31      	ldr	r3, [pc, #196]	@ (8000e64 <COE_AddObjectToDic+0xe4>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2200      	movs	r2, #0
 8000da2:	605a      	str	r2, [r3, #4]
            ObjDicList->pPrev = NULL;
 8000da4:	4b2f      	ldr	r3, [pc, #188]	@ (8000e64 <COE_AddObjectToDic+0xe4>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
            return 0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	e052      	b.n	8000e56 <COE_AddObjectToDic+0xd6>
        }
        else if(ObjDicList->Index > pNewObjEntry->Index)
 8000db0:	4b2c      	ldr	r3, [pc, #176]	@ (8000e64 <COE_AddObjectToDic+0xe4>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	891a      	ldrh	r2, [r3, #8]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	891b      	ldrh	r3, [r3, #8]
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	d90f      	bls.n	8000dde <COE_AddObjectToDic+0x5e>
        {
            /*insert new object dictionary head*/
            pNewObjEntry->pPrev = NULL;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
            pNewObjEntry->pNext = ObjDicList;
 8000dc4:	4b27      	ldr	r3, [pc, #156]	@ (8000e64 <COE_AddObjectToDic+0xe4>)
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	605a      	str	r2, [r3, #4]
            ObjDicList->pPrev = pNewObjEntry;
 8000dcc:	4b25      	ldr	r3, [pc, #148]	@ (8000e64 <COE_AddObjectToDic+0xe4>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	687a      	ldr	r2, [r7, #4]
 8000dd2:	601a      	str	r2, [r3, #0]
            ObjDicList = pNewObjEntry;
 8000dd4:	4a23      	ldr	r2, [pc, #140]	@ (8000e64 <COE_AddObjectToDic+0xe4>)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6013      	str	r3, [r2, #0]
            return 0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	e03b      	b.n	8000e56 <COE_AddObjectToDic+0xd6>
        }
        else
        {
            TOBJECT    OBJMEM * pDicEntry = ObjDicList;
 8000dde:	4b21      	ldr	r3, [pc, #132]	@ (8000e64 <COE_AddObjectToDic+0xe4>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	60fb      	str	r3, [r7, #12]
            while(pDicEntry != NULL)
 8000de4:	e033      	b.n	8000e4e <COE_AddObjectToDic+0xce>
            {
                if(pDicEntry->Index == pNewObjEntry->Index)
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	891a      	ldrh	r2, [r3, #8]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	891b      	ldrh	r3, [r3, #8]
 8000dee:	429a      	cmp	r2, r3
 8000df0:	d101      	bne.n	8000df6 <COE_AddObjectToDic+0x76>
                {
                    /*object already exists in object dictionary*/
                    return ALSTATUSCODE_UNSPECIFIEDERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	e02f      	b.n	8000e56 <COE_AddObjectToDic+0xd6>
                }
                else if(pDicEntry->Index > pNewObjEntry->Index)
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	891a      	ldrh	r2, [r3, #8]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	891b      	ldrh	r3, [r3, #8]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d913      	bls.n	8000e2a <COE_AddObjectToDic+0xaa>
                {
                    pNewObjEntry->pPrev = pDicEntry->pPrev;
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	601a      	str	r2, [r3, #0]
                    pNewObjEntry->pNext = pDicEntry;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	68fa      	ldr	r2, [r7, #12]
 8000e0e:	605a      	str	r2, [r3, #4]

                    if(pDicEntry->pPrev != NULL)
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d003      	beq.n	8000e20 <COE_AddObjectToDic+0xa0>
                        pDicEntry->pPrev->pNext = pNewObjEntry;
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	605a      	str	r2, [r3, #4]

                    pDicEntry->pPrev = pNewObjEntry;
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	687a      	ldr	r2, [r7, #4]
 8000e24:	601a      	str	r2, [r3, #0]

                    return 0;
 8000e26:	2300      	movs	r3, #0
 8000e28:	e015      	b.n	8000e56 <COE_AddObjectToDic+0xd6>
                }
                else if(pDicEntry->pNext == NULL)
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d10a      	bne.n	8000e48 <COE_AddObjectToDic+0xc8>
                {
                    /*Last entry reached => add object to list tail*/
                    pDicEntry->pNext = pNewObjEntry;
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	605a      	str	r2, [r3, #4]
                    pNewObjEntry->pPrev = pDicEntry;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	68fa      	ldr	r2, [r7, #12]
 8000e3c:	601a      	str	r2, [r3, #0]
                    pNewObjEntry->pNext = NULL;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2200      	movs	r2, #0
 8000e42:	605a      	str	r2, [r3, #4]
                    return 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	e006      	b.n	8000e56 <COE_AddObjectToDic+0xd6>
                }
                else
                {
                    /*The new object index is smaller than the current index. Get next object handle.*/
                    pDicEntry = pDicEntry->pNext;
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	60fb      	str	r3, [r7, #12]
            while(pDicEntry != NULL)
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d1c8      	bne.n	8000de6 <COE_AddObjectToDic+0x66>
                }
            }
        }
    }
    return ALSTATUSCODE_UNSPECIFIEDERROR;
 8000e54:	2301      	movs	r3, #1
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3714      	adds	r7, #20
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	2400045c 	.word	0x2400045c

08000e68 <COE_RemoveDicEntry>:
/**

 \brief    This function removes an object to the object dictionary
*////////////////////////////////////////////////////////////////////////////////////////
void COE_RemoveDicEntry(UINT16 index)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b087      	sub	sp, #28
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	80fb      	strh	r3, [r7, #6]
    TOBJECT    OBJMEM * pDicEntry = ObjDicList;
 8000e72:	4b1c      	ldr	r3, [pc, #112]	@ (8000ee4 <COE_RemoveDicEntry+0x7c>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	617b      	str	r3, [r7, #20]

    while(pDicEntry != NULL)
 8000e78:	e02a      	b.n	8000ed0 <COE_RemoveDicEntry+0x68>
    {
        if(pDicEntry->Index == index)
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	891b      	ldrh	r3, [r3, #8]
 8000e7e:	88fa      	ldrh	r2, [r7, #6]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d122      	bne.n	8000eca <COE_RemoveDicEntry+0x62>
        {
            TOBJECT OBJMEM *pPrevEntry = pDicEntry->pPrev;
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	613b      	str	r3, [r7, #16]
            TOBJECT OBJMEM *pNextEntry = pDicEntry->pNext;
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	60fb      	str	r3, [r7, #12]

            if(pPrevEntry != NULL)
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d002      	beq.n	8000e9c <COE_RemoveDicEntry+0x34>
            {
                pPrevEntry->pNext = pNextEntry;
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	68fa      	ldr	r2, [r7, #12]
 8000e9a:	605a      	str	r2, [r3, #4]
            }

            if(pNextEntry != NULL)
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d002      	beq.n	8000ea8 <COE_RemoveDicEntry+0x40>
            {
                pNextEntry->pPrev = pPrevEntry;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	601a      	str	r2, [r3, #0]
            }

            pDicEntry->pPrev = NULL;
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
            pDicEntry->pNext = NULL;
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	605a      	str	r2, [r3, #4]
            /*Update Object dictionary pointer if list head was removed*/
            if(pDicEntry->Index == ObjDicList->Index)
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	891a      	ldrh	r2, [r3, #8]
 8000eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee4 <COE_RemoveDicEntry+0x7c>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	891b      	ldrh	r3, [r3, #8]
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	d10a      	bne.n	8000ed8 <COE_RemoveDicEntry+0x70>
            {
                ObjDicList = pNextEntry;
 8000ec2:	4a08      	ldr	r2, [pc, #32]	@ (8000ee4 <COE_RemoveDicEntry+0x7c>)
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	6013      	str	r3, [r2, #0]
            }
            return;
 8000ec8:	e006      	b.n	8000ed8 <COE_RemoveDicEntry+0x70>
        }

        pDicEntry = pDicEntry->pNext;
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	617b      	str	r3, [r7, #20]
    while(pDicEntry != NULL)
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d1d1      	bne.n	8000e7a <COE_RemoveDicEntry+0x12>
 8000ed6:	e000      	b.n	8000eda <COE_RemoveDicEntry+0x72>
            return;
 8000ed8:	bf00      	nop
    }
}
 8000eda:	371c      	adds	r7, #28
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	2400045c 	.word	0x2400045c

08000ee8 <COE_ClearObjDictionary>:
/**

 \brief    This function clear the object dictionary
*////////////////////////////////////////////////////////////////////////////////////////
void COE_ClearObjDictionary(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
    TOBJECT OBJMEM * pObjEntry = (TOBJECT OBJMEM *) ObjDicList;
 8000eee:	4b0d      	ldr	r3, [pc, #52]	@ (8000f24 <COE_ClearObjDictionary+0x3c>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	607b      	str	r3, [r7, #4]
    UINT16 Index = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	807b      	strh	r3, [r7, #2]

    while(pObjEntry != NULL)
 8000ef8:	e009      	b.n	8000f0e <COE_ClearObjDictionary+0x26>
    {
        Index = pObjEntry->Index;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	891b      	ldrh	r3, [r3, #8]
 8000efe:	807b      	strh	r3, [r7, #2]
        pObjEntry = pObjEntry->pNext;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	607b      	str	r3, [r7, #4]

        COE_RemoveDicEntry(Index);
 8000f06:	887b      	ldrh	r3, [r7, #2]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff ffad 	bl	8000e68 <COE_RemoveDicEntry>
    while(pObjEntry != NULL)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d1f2      	bne.n	8000efa <COE_ClearObjDictionary+0x12>
    }
    ObjDicList = NULL;
 8000f14:	4b03      	ldr	r3, [pc, #12]	@ (8000f24 <COE_ClearObjDictionary+0x3c>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	2400045c 	.word	0x2400045c

08000f28 <AddObjectsToObjDictionary>:


UINT16 AddObjectsToObjDictionary(TOBJECT OBJMEM * pObjEntry)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
    UINT16 result = 0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	81fb      	strh	r3, [r7, #14]
    TOBJECT OBJMEM * pEntry = (TOBJECT OBJMEM *)pObjEntry;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	60bb      	str	r3, [r7, #8]

    while(pEntry->Index != 0xFFFF)
 8000f38:	e00c      	b.n	8000f54 <AddObjectsToObjDictionary+0x2c>
    {
        result = COE_AddObjectToDic(pEntry);
 8000f3a:	68b8      	ldr	r0, [r7, #8]
 8000f3c:	f7ff ff20 	bl	8000d80 <COE_AddObjectToDic>
 8000f40:	4603      	mov	r3, r0
 8000f42:	81fb      	strh	r3, [r7, #14]

        if(result != 0)
 8000f44:	89fb      	ldrh	r3, [r7, #14]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <AddObjectsToObjDictionary+0x26>
        {
            return result;
 8000f4a:	89fb      	ldrh	r3, [r7, #14]
 8000f4c:	e009      	b.n	8000f62 <AddObjectsToObjDictionary+0x3a>
        }

        pEntry++;
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	3328      	adds	r3, #40	@ 0x28
 8000f52:	60bb      	str	r3, [r7, #8]
    while(pEntry->Index != 0xFFFF)
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	891b      	ldrh	r3, [r3, #8]
 8000f58:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d1ec      	bne.n	8000f3a <AddObjectsToObjDictionary+0x12>
    }

    return result;
 8000f60:	89fb      	ldrh	r3, [r7, #14]

}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <COE_ObjDictionaryInit>:
            ALSTATUSCODE_XX create object dictionary failed

 \brief    This function initialize the object dictionary
*////////////////////////////////////////////////////////////////////////////////////////
UINT16 COE_ObjDictionaryInit(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
    UINT16 result = 0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	80fb      	strh	r3, [r7, #6]

    /*Reset object dictionary pointer*/
    ObjDicList = NULL;
 8000f76:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa4 <COE_ObjDictionaryInit+0x38>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]

    result = AddObjectsToObjDictionary((TOBJECT OBJMEM *) GenObjDic);
 8000f7c:	480a      	ldr	r0, [pc, #40]	@ (8000fa8 <COE_ObjDictionaryInit+0x3c>)
 8000f7e:	f7ff ffd3 	bl	8000f28 <AddObjectsToObjDictionary>
 8000f82:	4603      	mov	r3, r0
 8000f84:	80fb      	strh	r3, [r7, #6]

    if(result != 0)
 8000f86:	88fb      	ldrh	r3, [r7, #6]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <COE_ObjDictionaryInit+0x24>
    {
        return result;
 8000f8c:	88fb      	ldrh	r3, [r7, #6]
 8000f8e:	e005      	b.n	8000f9c <COE_ObjDictionaryInit+0x30>
    }
    
    if(ApplicationObjDic != NULL)
    {
        result = AddObjectsToObjDictionary((TOBJECT OBJMEM *) ApplicationObjDic);
 8000f90:	4806      	ldr	r0, [pc, #24]	@ (8000fac <COE_ObjDictionaryInit+0x40>)
 8000f92:	f7ff ffc9 	bl	8000f28 <AddObjectsToObjDictionary>
 8000f96:	4603      	mov	r3, r0
 8000f98:	80fb      	strh	r3, [r7, #6]
    }



    return result;
 8000f9a:	88fb      	ldrh	r3, [r7, #6]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	2400045c 	.word	0x2400045c
 8000fa8:	240001b0 	.word	0x240001b0
 8000fac:	24000028 	.word	0x24000028

08000fb0 <COE_Main>:
 \brief    is called for background calculations which should not influence the
             ECAT_Application in synchronous modes
*////////////////////////////////////////////////////////////////////////////////////////

void COE_Main(void)
{
 8000fb0:	b5b0      	push	{r4, r5, r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af02      	add	r7, sp, #8
     UINT8 abort = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	71fb      	strb	r3, [r7, #7]
     
    if(pSdoPendFunc != NULL)
 8000fba:	4b2b      	ldr	r3, [pc, #172]	@ (8001068 <COE_Main+0xb8>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d04e      	beq.n	8001060 <COE_Main+0xb0>
    {
        abort = pSdoPendFunc(u16StoreIndex,u8StoreSubindex,u32StoreDataSize,pStoreData,bStoreCompleteAccess);
 8000fc2:	4b29      	ldr	r3, [pc, #164]	@ (8001068 <COE_Main+0xb8>)
 8000fc4:	681c      	ldr	r4, [r3, #0]
 8000fc6:	4b29      	ldr	r3, [pc, #164]	@ (800106c <COE_Main+0xbc>)
 8000fc8:	8818      	ldrh	r0, [r3, #0]
 8000fca:	4b29      	ldr	r3, [pc, #164]	@ (8001070 <COE_Main+0xc0>)
 8000fcc:	7819      	ldrb	r1, [r3, #0]
 8000fce:	4b29      	ldr	r3, [pc, #164]	@ (8001074 <COE_Main+0xc4>)
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	4b29      	ldr	r3, [pc, #164]	@ (8001078 <COE_Main+0xc8>)
 8000fd4:	681d      	ldr	r5, [r3, #0]
 8000fd6:	4b29      	ldr	r3, [pc, #164]	@ (800107c <COE_Main+0xcc>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	462b      	mov	r3, r5
 8000fde:	47a0      	blx	r4
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	71fb      	strb	r3, [r7, #7]

        if(abort != ABORTIDX_WORKING)
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	2bff      	cmp	r3, #255	@ 0xff
 8000fe8:	d03a      	beq.n	8001060 <COE_Main+0xb0>
        {
            switch(u8PendingSdo)
 8000fea:	4b25      	ldr	r3, [pc, #148]	@ (8001080 <COE_Main+0xd0>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	2b04      	cmp	r3, #4
 8000ff0:	dc21      	bgt.n	8001036 <COE_Main+0x86>
 8000ff2:	2b03      	cmp	r3, #3
 8000ff4:	da16      	bge.n	8001024 <COE_Main+0x74>
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d00d      	beq.n	8001016 <COE_Main+0x66>
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	d11b      	bne.n	8001036 <COE_Main+0x86>
            {
                case SDO_PENDING_SEG_WRITE:
                    if(pSdoSegData)
 8000ffe:	4b21      	ldr	r3, [pc, #132]	@ (8001084 <COE_Main+0xd4>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d007      	beq.n	8001016 <COE_Main+0x66>
                    {
                        /* the allocated buffer can be released */
                        FREEMEM( (UINT16 VARMEM *) pSdoSegData );
 8001006:	4b1f      	ldr	r3, [pc, #124]	@ (8001084 <COE_Main+0xd4>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4618      	mov	r0, r3
 800100c:	f00a fa4a 	bl	800b4a4 <free>
                        pSdoSegData = NULL;
 8001010:	4b1c      	ldr	r3, [pc, #112]	@ (8001084 <COE_Main+0xd4>)
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
                    }
                case SDO_PENDING_WRITE:
                     /*send SDO Download Response*/
                    SDOS_SdoRes(abort, 0, NULL);
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	2200      	movs	r2, #0
 800101a:	2100      	movs	r1, #0
 800101c:	4618      	mov	r0, r3
 800101e:	f005 fbb1 	bl	8006784 <SDOS_SdoRes>
                break;
 8001022:	e008      	b.n	8001036 <COE_Main+0x86>

                case SDO_PENDING_SEG_READ:
                case SDO_PENDING_READ:
                    /* send SDO upload response */
                      SDOS_SdoRes(abort, u32StoreDataSize, pStoreData);
 8001024:	4b13      	ldr	r3, [pc, #76]	@ (8001074 <COE_Main+0xc4>)
 8001026:	6819      	ldr	r1, [r3, #0]
 8001028:	4b13      	ldr	r3, [pc, #76]	@ (8001078 <COE_Main+0xc8>)
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	4618      	mov	r0, r3
 8001030:	f005 fba8 	bl	8006784 <SDOS_SdoRes>
                    break;
 8001034:	bf00      	nop

            }

            u8PendingSdo = 0;
 8001036:	4b12      	ldr	r3, [pc, #72]	@ (8001080 <COE_Main+0xd0>)
 8001038:	2200      	movs	r2, #0
 800103a:	701a      	strb	r2, [r3, #0]
            u16StoreIndex = 0;
 800103c:	4b0b      	ldr	r3, [pc, #44]	@ (800106c <COE_Main+0xbc>)
 800103e:	2200      	movs	r2, #0
 8001040:	801a      	strh	r2, [r3, #0]
            u8StoreSubindex = 0;
 8001042:	4b0b      	ldr	r3, [pc, #44]	@ (8001070 <COE_Main+0xc0>)
 8001044:	2200      	movs	r2, #0
 8001046:	701a      	strb	r2, [r3, #0]
            u32StoreDataSize = 0;
 8001048:	4b0a      	ldr	r3, [pc, #40]	@ (8001074 <COE_Main+0xc4>)
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
            pStoreData = NULL;
 800104e:	4b0a      	ldr	r3, [pc, #40]	@ (8001078 <COE_Main+0xc8>)
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
            bStoreCompleteAccess = 0;
 8001054:	4b09      	ldr	r3, [pc, #36]	@ (800107c <COE_Main+0xcc>)
 8001056:	2200      	movs	r2, #0
 8001058:	701a      	strb	r2, [r3, #0]
            pSdoPendFunc = NULL;
 800105a:	4b03      	ldr	r3, [pc, #12]	@ (8001068 <COE_Main+0xb8>)
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
        }
    }
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bdb0      	pop	{r4, r5, r7, pc}
 8001068:	24000640 	.word	0x24000640
 800106c:	24000634 	.word	0x24000634
 8001070:	24000632 	.word	0x24000632
 8001074:	24000638 	.word	0x24000638
 8001078:	2400063c 	.word	0x2400063c
 800107c:	24000631 	.word	0x24000631
 8001080:	24000630 	.word	0x24000630
 8001084:	24000654 	.word	0x24000654

08001088 <PDO_InputMapping>:
/////////////////////////////////////////////////////////////////////////////////////////
/**
\brief      This function will copies the inputs from the local memory to the ESC memory
*////////////////////////////////////////////////////////////////////////////////////////
void PDO_InputMapping(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0

#if ((MIN_PD_CYCLE_TIME == 0) || (PD_INPUT_CALC_AND_COPY_TIME == 0))
    UINT32 u32TimeValue = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	607b      	str	r3, [r7, #4]
    UINT16 ALEvent = HW_GetALEventRegister_Isr();
 8001092:	f7ff fc47 	bl	8000924 <HW_GetALEventRegister_Isr>
 8001096:	4603      	mov	r3, r0
 8001098:	807b      	strh	r3, [r7, #2]
    ALEvent = SWAPWORD(ALEvent);

    if (MEASUREMENT_ACTIVE)
 800109a:	4b1b      	ldr	r3, [pc, #108]	@ (8001108 <PDO_InputMapping+0x80>)
 800109c:	8b9b      	ldrh	r3, [r3, #28]
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d105      	bne.n	80010b2 <PDO_InputMapping+0x2a>
 80010a6:	4b19      	ldr	r3, [pc, #100]	@ (800110c <PDO_InputMapping+0x84>)
 80010a8:	8b9b      	ldrh	r3, [r3, #28]
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d003      	beq.n	80010ba <PDO_InputMapping+0x32>
    {
        u32TimeValue = GetSystemTimeDelay(0);
 80010b2:	2000      	movs	r0, #0
 80010b4:	f000 f918 	bl	80012e8 <GetSystemTimeDelay>
 80010b8:	6078      	str	r0, [r7, #4]




  
    APPL_InputMapping((UINT16*)aPdInputData);
 80010ba:	4815      	ldr	r0, [pc, #84]	@ (8001110 <PDO_InputMapping+0x88>)
 80010bc:	f7ff fa08 	bl	80004d0 <APPL_InputMapping>
    HW_EscWriteIsr(((MEM_ADDR *) aPdInputData), nEscAddrInputData, nPdInputSize );
 80010c0:	4b14      	ldr	r3, [pc, #80]	@ (8001114 <PDO_InputMapping+0x8c>)
 80010c2:	881b      	ldrh	r3, [r3, #0]
 80010c4:	4a14      	ldr	r2, [pc, #80]	@ (8001118 <PDO_InputMapping+0x90>)
 80010c6:	8812      	ldrh	r2, [r2, #0]
 80010c8:	4619      	mov	r1, r3
 80010ca:	4811      	ldr	r0, [pc, #68]	@ (8001110 <PDO_InputMapping+0x88>)
 80010cc:	f7ff fc82 	bl	80009d4 <HW_EscWriteIsr>

    

#if ((MIN_PD_CYCLE_TIME == 0) || (PD_INPUT_CALC_AND_COPY_TIME == 0))

    if (MEASUREMENT_ACTIVE)
 80010d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001108 <PDO_InputMapping+0x80>)
 80010d2:	8b9b      	ldrh	r3, [r3, #28]
 80010d4:	f003 0301 	and.w	r3, r3, #1
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d105      	bne.n	80010e8 <PDO_InputMapping+0x60>
 80010dc:	4b0b      	ldr	r3, [pc, #44]	@ (800110c <PDO_InputMapping+0x84>)
 80010de:	8b9b      	ldrh	r3, [r3, #28]
 80010e0:	f003 0301 	and.w	r3, r3, #1
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d00b      	beq.n	8001100 <PDO_InputMapping+0x78>
    {
        u32TimeValue = GetSystemTimeDelay(u32TimeValue);
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f000 f8fd 	bl	80012e8 <GetSystemTimeDelay>
 80010ee:	6078      	str	r0, [r7, #4]

#if (PD_INPUT_CALC_AND_COPY_TIME == 0)
        if (sSyncManInPar.u32CalcAndCopyTime < u32TimeValue)
 80010f0:	4b06      	ldr	r3, [pc, #24]	@ (800110c <PDO_InputMapping+0x84>)
 80010f2:	695b      	ldr	r3, [r3, #20]
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d902      	bls.n	8001100 <PDO_InputMapping+0x78>
        {
            sSyncManInPar.u32CalcAndCopyTime = u32TimeValue;
 80010fa:	4a04      	ldr	r2, [pc, #16]	@ (800110c <PDO_InputMapping+0x84>)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6153      	str	r3, [r2, #20]
#endif /* (MIN_PD_CYCLE_TIME == 0) */
    }

#endif /* ((MIN_PD_CYCLE_TIME == 0) || (PD_INPUT_CALC_AND_COPY_TIME == 0)) */

}
 8001100:	bf00      	nop
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	240005a8 	.word	0x240005a8
 800110c:	240005ec 	.word	0x240005ec
 8001110:	24000488 	.word	0x24000488
 8001114:	24000502 	.word	0x24000502
 8001118:	240004f4 	.word	0x240004f4

0800111c <PDO_OutputMapping>:
/**
\brief    This function will copies the outputs from the ESC memory to the local memory.
        This function is only called in case of an SM2 (output process data) event.
*////////////////////////////////////////////////////////////////////////////////////////
void PDO_OutputMapping(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
   UINT32 u32TimeValue = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	607b      	str	r3, [r7, #4]
   if (MEASUREMENT_ACTIVE)
 8001126:	4b21      	ldr	r3, [pc, #132]	@ (80011ac <PDO_OutputMapping+0x90>)
 8001128:	8b9b      	ldrh	r3, [r3, #28]
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	2b00      	cmp	r3, #0
 8001130:	d105      	bne.n	800113e <PDO_OutputMapping+0x22>
 8001132:	4b1f      	ldr	r3, [pc, #124]	@ (80011b0 <PDO_OutputMapping+0x94>)
 8001134:	8b9b      	ldrh	r3, [r3, #28]
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	2b00      	cmp	r3, #0
 800113c:	d00e      	beq.n	800115c <PDO_OutputMapping+0x40>
   {
#if ((MIN_PD_CYCLE_TIME == 0) || (PD_OUTPUT_CALC_AND_COPY_TIME == 0))
      u32TimeValue = GetSystemTimeDelay(0);
 800113e:	2000      	movs	r0, #0
 8001140:	f000 f8d2 	bl	80012e8 <GetSystemTimeDelay>
 8001144:	6078      	str	r0, [r7, #4]
      u32MinCycleTimeStartValue = u32TimeValue;
 8001146:	4a1b      	ldr	r2, [pc, #108]	@ (80011b4 <PDO_OutputMapping+0x98>)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6013      	str	r3, [r2, #0]

      bMinCycleTimeMeasurementStarted = TRUE;
 800114c:	4b1a      	ldr	r3, [pc, #104]	@ (80011b8 <PDO_OutputMapping+0x9c>)
 800114e:	2201      	movs	r2, #1
 8001150:	701a      	strb	r2, [r3, #0]
      u32MinCycleTimeValue = 0;
 8001152:	4b1a      	ldr	r3, [pc, #104]	@ (80011bc <PDO_OutputMapping+0xa0>)
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]

#endif /* ((MIN_PD_CYCLE_TIME == 0) || (PD_OUTPUT_CALC_AND_COPY_TIME == 0)) */

      HandleCycleTimeMeasurement();
 8001158:	f000 f888 	bl	800126c <HandleCycleTimeMeasurement>

   }

    HW_EscReadIsr(((MEM_ADDR *)aPdOutputData), nEscAddrOutputData, nPdOutputSize );
 800115c:	4b18      	ldr	r3, [pc, #96]	@ (80011c0 <PDO_OutputMapping+0xa4>)
 800115e:	881b      	ldrh	r3, [r3, #0]
 8001160:	4a18      	ldr	r2, [pc, #96]	@ (80011c4 <PDO_OutputMapping+0xa8>)
 8001162:	8812      	ldrh	r2, [r2, #0]
 8001164:	4619      	mov	r1, r3
 8001166:	4818      	ldr	r0, [pc, #96]	@ (80011c8 <PDO_OutputMapping+0xac>)
 8001168:	f7ff fc04 	bl	8000974 <HW_EscReadIsr>
    APPL_OutputMapping((UINT16*) aPdOutputData);
 800116c:	4816      	ldr	r0, [pc, #88]	@ (80011c8 <PDO_OutputMapping+0xac>)
 800116e:	f7ff f9dd 	bl	800052c <APPL_OutputMapping>


#if ((MIN_PD_CYCLE_TIME == 0) || (PD_OUTPUT_CALC_AND_COPY_TIME == 0))
    if (MEASUREMENT_ACTIVE)
 8001172:	4b0e      	ldr	r3, [pc, #56]	@ (80011ac <PDO_OutputMapping+0x90>)
 8001174:	8b9b      	ldrh	r3, [r3, #28]
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	2b00      	cmp	r3, #0
 800117c:	d105      	bne.n	800118a <PDO_OutputMapping+0x6e>
 800117e:	4b0c      	ldr	r3, [pc, #48]	@ (80011b0 <PDO_OutputMapping+0x94>)
 8001180:	8b9b      	ldrh	r3, [r3, #28]
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	2b00      	cmp	r3, #0
 8001188:	d00b      	beq.n	80011a2 <PDO_OutputMapping+0x86>
    {
       u32TimeValue = GetSystemTimeDelay(u32TimeValue);
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f000 f8ac 	bl	80012e8 <GetSystemTimeDelay>
 8001190:	6078      	str	r0, [r7, #4]

#if (PD_OUTPUT_CALC_AND_COPY_TIME == 0)
       if (sSyncManOutPar.u32CalcAndCopyTime < u32TimeValue)
 8001192:	4b06      	ldr	r3, [pc, #24]	@ (80011ac <PDO_OutputMapping+0x90>)
 8001194:	695b      	ldr	r3, [r3, #20]
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	429a      	cmp	r2, r3
 800119a:	d902      	bls.n	80011a2 <PDO_OutputMapping+0x86>
       {
          sSyncManOutPar.u32CalcAndCopyTime = u32TimeValue;
 800119c:	4a03      	ldr	r2, [pc, #12]	@ (80011ac <PDO_OutputMapping+0x90>)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6153      	str	r3, [r2, #20]
       /* add the first part of the min cycle time */
       u32MinCycleTimeValue = u32TimeValue;
#endif
    }
#endif /* #if ((MIN_PD_CYCLE_TIME == 0) || (PD_OUTPUT_CALC_AND_COPY_TIME == 0)) */
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	240005a8 	.word	0x240005a8
 80011b0:	240005ec 	.word	0x240005ec
 80011b4:	24000474 	.word	0x24000474
 80011b8:	2400047c 	.word	0x2400047c
 80011bc:	24000480 	.word	0x24000480
 80011c0:	24000500 	.word	0x24000500
 80011c4:	240004f6 	.word	0x240004f6
 80011c8:	24000484 	.word	0x24000484

080011cc <ECAT_CheckTimer>:
 \brief interrupts. In this case a local timer register is checked every ECAT_Main cycle
 \brief and the function is triggered if 1 ms is elapsed
 *////////////////////////////////////////////////////////////////////////////////////////

void ECAT_CheckTimer(void)
{
 80011cc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011d0:	af00      	add	r7, sp, #0

    /*decrement the state transition timeout counter*/
    if(bEcatWaitForAlControlRes &&  (EsmTimeoutCounter > 0))
 80011d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001250 <ECAT_CheckTimer+0x84>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d00d      	beq.n	80011f6 <ECAT_CheckTimer+0x2a>
 80011da:	4b1e      	ldr	r3, [pc, #120]	@ (8001254 <ECAT_CheckTimer+0x88>)
 80011dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	dd08      	ble.n	80011f6 <ECAT_CheckTimer+0x2a>
    {
        EsmTimeoutCounter--;
 80011e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001254 <ECAT_CheckTimer+0x88>)
 80011e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	3b01      	subs	r3, #1
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	b21a      	sxth	r2, r3
 80011f2:	4b18      	ldr	r3, [pc, #96]	@ (8001254 <ECAT_CheckTimer+0x88>)
 80011f4:	801a      	strh	r2, [r3, #0]
    }



    DC_CheckWatchdog();
 80011f6:	f002 f919 	bl	800342c <DC_CheckWatchdog>



/*ECATCHANGE_START(V5.13) */
    /* Increment the counter every ms between two updates based on the system time (32Bit overrun is handled in COE_SyncTimeStamp) */
    if (!b32BitDc || ((u64Timestamp & 0xFFFFFFFF) <= 4293000000UL))
 80011fa:	4b17      	ldr	r3, [pc, #92]	@ (8001258 <ECAT_CheckTimer+0x8c>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d009      	beq.n	8001216 <ECAT_CheckTimer+0x4a>
 8001202:	4b16      	ldr	r3, [pc, #88]	@ (800125c <ECAT_CheckTimer+0x90>)
 8001204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001208:	4614      	mov	r4, r2
 800120a:	2500      	movs	r5, #0
 800120c:	4b14      	ldr	r3, [pc, #80]	@ (8001260 <ECAT_CheckTimer+0x94>)
 800120e:	429c      	cmp	r4, r3
 8001210:	f175 0300 	sbcs.w	r3, r5, #0
 8001214:	d20b      	bcs.n	800122e <ECAT_CheckTimer+0x62>
/*ECATCHANGE_END(V5.13) */
    {

        /* the timestamp is stored in ns */
        u64Timestamp = u64Timestamp + 1000000;
 8001216:	4b11      	ldr	r3, [pc, #68]	@ (800125c <ECAT_CheckTimer+0x90>)
 8001218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121c:	4911      	ldr	r1, [pc, #68]	@ (8001264 <ECAT_CheckTimer+0x98>)
 800121e:	eb12 0801 	adds.w	r8, r2, r1
 8001222:	f143 0900 	adc.w	r9, r3, #0
 8001226:	4b0d      	ldr	r3, [pc, #52]	@ (800125c <ECAT_CheckTimer+0x90>)
 8001228:	e9c3 8900 	strd	r8, r9, [r3]
 800122c:	e007      	b.n	800123e <ECAT_CheckTimer+0x72>

    }
    else if(b32BitDc)
 800122e:	4b0a      	ldr	r3, [pc, #40]	@ (8001258 <ECAT_CheckTimer+0x8c>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d003      	beq.n	800123e <ECAT_CheckTimer+0x72>
    {
        /* in case of a 32Bit DC and almost expired time stamp check for a DC overrun*/
        u32CheckForDcOverrunCnt = CHECK_DC_OVERRUN_IN_MS;
 8001236:	4b0c      	ldr	r3, [pc, #48]	@ (8001268 <ECAT_CheckTimer+0x9c>)
 8001238:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 800123c:	601a      	str	r2, [r3, #0]
    }

    u32CheckForDcOverrunCnt++;
 800123e:	4b0a      	ldr	r3, [pc, #40]	@ (8001268 <ECAT_CheckTimer+0x9c>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	3301      	adds	r3, #1
 8001244:	4a08      	ldr	r2, [pc, #32]	@ (8001268 <ECAT_CheckTimer+0x9c>)
 8001246:	6013      	str	r3, [r2, #0]


}
 8001248:	bf00      	nop
 800124a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800124e:	bf00      	nop
 8001250:	240004f0 	.word	0x240004f0
 8001254:	240004ce 	.word	0x240004ce
 8001258:	240004e8 	.word	0x240004e8
 800125c:	24000448 	.word	0x24000448
 8001260:	ffe1fb41 	.word	0xffe1fb41
 8001264:	000f4240 	.word	0x000f4240
 8001268:	24000454 	.word	0x24000454

0800126c <HandleCycleTimeMeasurement>:
/////////////////////////////////////////////////////////////////////////////////////////
/**
\brief    In case of non DC synchronization the cycle time measurement is started and 0x1C3.2 (Cycle time) is updated
*////////////////////////////////////////////////////////////////////////////////////////
void HandleCycleTimeMeasurement(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
    if (!bDcSyncActive) //no DC sync configured (cycle time measurement 0x1C3x.2 is only available in no DC sync modes)
 8001270:	4b19      	ldr	r3, [pc, #100]	@ (80012d8 <HandleCycleTimeMeasurement+0x6c>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d12d      	bne.n	80012d4 <HandleCycleTimeMeasurement+0x68>
    {
        if (u32CycleTimeStartValue > 0)
 8001278:	4b18      	ldr	r3, [pc, #96]	@ (80012dc <HandleCycleTimeMeasurement+0x70>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d023      	beq.n	80012c8 <HandleCycleTimeMeasurement+0x5c>
        {
            /* bus cycle completed*/
            u32CycleTimeStartValue = GetSystemTimeDelay(u32CycleTimeStartValue);
 8001280:	4b16      	ldr	r3, [pc, #88]	@ (80012dc <HandleCycleTimeMeasurement+0x70>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4618      	mov	r0, r3
 8001286:	f000 f82f 	bl	80012e8 <GetSystemTimeDelay>
 800128a:	4603      	mov	r3, r0
 800128c:	4a13      	ldr	r2, [pc, #76]	@ (80012dc <HandleCycleTimeMeasurement+0x70>)
 800128e:	6013      	str	r3, [r2, #0]

            if ((sSyncManOutPar.u32CycleTime == 0) || (sSyncManOutPar.u32CycleTime > u32CycleTimeStartValue))
 8001290:	4b13      	ldr	r3, [pc, #76]	@ (80012e0 <HandleCycleTimeMeasurement+0x74>)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d005      	beq.n	80012a4 <HandleCycleTimeMeasurement+0x38>
 8001298:	4b11      	ldr	r3, [pc, #68]	@ (80012e0 <HandleCycleTimeMeasurement+0x74>)
 800129a:	685a      	ldr	r2, [r3, #4]
 800129c:	4b0f      	ldr	r3, [pc, #60]	@ (80012dc <HandleCycleTimeMeasurement+0x70>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d903      	bls.n	80012ac <HandleCycleTimeMeasurement+0x40>
            {
                    sSyncManOutPar.u32CycleTime = u32CycleTimeStartValue;
 80012a4:	4b0d      	ldr	r3, [pc, #52]	@ (80012dc <HandleCycleTimeMeasurement+0x70>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a0d      	ldr	r2, [pc, #52]	@ (80012e0 <HandleCycleTimeMeasurement+0x74>)
 80012aa:	6053      	str	r3, [r2, #4]
            }

            if ((sSyncManInPar.u32CycleTime == 0) || (sSyncManInPar.u32CycleTime > u32CycleTimeStartValue))
 80012ac:	4b0d      	ldr	r3, [pc, #52]	@ (80012e4 <HandleCycleTimeMeasurement+0x78>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d005      	beq.n	80012c0 <HandleCycleTimeMeasurement+0x54>
 80012b4:	4b0b      	ldr	r3, [pc, #44]	@ (80012e4 <HandleCycleTimeMeasurement+0x78>)
 80012b6:	685a      	ldr	r2, [r3, #4]
 80012b8:	4b08      	ldr	r3, [pc, #32]	@ (80012dc <HandleCycleTimeMeasurement+0x70>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d903      	bls.n	80012c8 <HandleCycleTimeMeasurement+0x5c>
            {
                    sSyncManInPar.u32CycleTime = u32CycleTimeStartValue;
 80012c0:	4b06      	ldr	r3, [pc, #24]	@ (80012dc <HandleCycleTimeMeasurement+0x70>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a07      	ldr	r2, [pc, #28]	@ (80012e4 <HandleCycleTimeMeasurement+0x78>)
 80012c6:	6053      	str	r3, [r2, #4]
            }
        }
        /* get next start value */
        u32CycleTimeStartValue = GetSystemTimeDelay(0);
 80012c8:	2000      	movs	r0, #0
 80012ca:	f000 f80d 	bl	80012e8 <GetSystemTimeDelay>
 80012ce:	4603      	mov	r3, r0
 80012d0:	4a02      	ldr	r2, [pc, #8]	@ (80012dc <HandleCycleTimeMeasurement+0x70>)
 80012d2:	6013      	str	r3, [r2, #0]
        
    }/* No DC sync configured */
}
 80012d4:	bf00      	nop
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	240004cc 	.word	0x240004cc
 80012dc:	24000470 	.word	0x24000470
 80012e0:	240005a8 	.word	0x240005a8
 80012e4:	240005ec 	.word	0x240005ec

080012e8 <GetSystemTimeDelay>:
\brief    Calculates the difference between the old and current system time value in ns.
          NOTE: This function only handles a 32Bit system time values (therefore the maximum delay about 4sec).
*////////////////////////////////////////////////////////////////////////////////////////

UINT32 GetSystemTimeDelay(UINT32 u32StartTime)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
   UINT32 u32CurValue = 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	60bb      	str	r3, [r7, #8]
   UINT32 u32Delta = 0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	60fb      	str	r3, [r7, #12]

   
   HW_EscReadDWordIsr(u32CurValue, ESC_SYSTEMTIME_OFFSET);
 80012f8:	f107 0308 	add.w	r3, r7, #8
 80012fc:	2204      	movs	r2, #4
 80012fe:	f44f 6111 	mov.w	r1, #2320	@ 0x910
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff fb36 	bl	8000974 <HW_EscReadIsr>

   if (u32CurValue > 0)
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d00d      	beq.n	800132a <GetSystemTimeDelay+0x42>
   {
      if (u32StartTime <= u32CurValue)
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	429a      	cmp	r2, r3
 8001314:	d804      	bhi.n	8001320 <GetSystemTimeDelay+0x38>
      {
         u32Delta = u32CurValue - u32StartTime;
 8001316:	68ba      	ldr	r2, [r7, #8]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	e004      	b.n	800132a <GetSystemTimeDelay+0x42>
      }
      else
      {
         //The 32Bit timer is wrapped around
         u32Delta = u32CurValue + (0xFFFFFFFF - u32StartTime);
 8001320:	68ba      	ldr	r2, [r7, #8]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	3b01      	subs	r3, #1
 8001328:	60fb      	str	r3, [r7, #12]
      }
   }// current value successfully read out

   if (u32StartTime > 0)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d00c      	beq.n	800134a <GetSystemTimeDelay+0x62>
   {

       /*the difference between two timestamps are calculated => subtract measurement failure*/
       if (u32SystemTimeReadFailure < u32Delta)
 8001330:	4b08      	ldr	r3, [pc, #32]	@ (8001354 <GetSystemTimeDelay+0x6c>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	68fa      	ldr	r2, [r7, #12]
 8001336:	429a      	cmp	r2, r3
 8001338:	d905      	bls.n	8001346 <GetSystemTimeDelay+0x5e>
       {
           u32Delta = u32Delta - u32SystemTimeReadFailure;
 800133a:	4b06      	ldr	r3, [pc, #24]	@ (8001354 <GetSystemTimeDelay+0x6c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	68fa      	ldr	r2, [r7, #12]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	e001      	b.n	800134a <GetSystemTimeDelay+0x62>
       }
       else
       {
           /*set the delta to 0 if the measurement failure is greater than the calculated difference*/
           u32Delta = 0;
 8001346:	2300      	movs	r3, #0
 8001348:	60fb      	str	r3, [r7, #12]
       }
   }
   return u32Delta;
 800134a:	68fb      	ldr	r3, [r7, #12]
}
 800134c:	4618      	mov	r0, r3
 800134e:	3710      	adds	r7, #16
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	24000478 	.word	0x24000478

08001358 <PDI_Isr>:

/*ECATCHANGE_START(V5.13) ECAT1*/
/*ECATCHANGE_END(V5.13) ECAT1*/
void PDI_Isr(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
    /*ECATCHANGE_START(V5.13) ECAT1*/
    BOOL SyncAcknowledgePending = FALSE;
 800135e:	2300      	movs	r3, #0
 8001360:	71fb      	strb	r3, [r7, #7]

    /* get the AL event register */
    UINT16  ALEvent = HW_GetALEventRegister_Isr();
 8001362:	f7ff fadf 	bl	8000924 <HW_GetALEventRegister_Isr>
 8001366:	4603      	mov	r3, r0
 8001368:	80bb      	strh	r3, [r7, #4]
    ALEvent = SWAPWORD(ALEvent);


    /* Check if Sync1 Isr has to be called */

    if (ALEvent & SYNC1_EVENT)
 800136a:	88bb      	ldrh	r3, [r7, #4]
 800136c:	f003 0308 	and.w	r3, r3, #8
 8001370:	2b00      	cmp	r3, #0
 8001372:	d003      	beq.n	800137c <PDI_Isr+0x24>
    {
        Sync1_Isr();
 8001374:	f000 f970 	bl	8001658 <Sync1_Isr>

        SyncAcknowledgePending = TRUE;
 8001378:	2301      	movs	r3, #1
 800137a:	71fb      	strb	r3, [r7, #7]
    }
    /*ECATCHANGE_END(V5.13) ECAT1*/
    

    if(bEscIntEnabled)
 800137c:	4b4c      	ldr	r3, [pc, #304]	@ (80014b0 <PDI_Isr+0x158>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d07a      	beq.n	800147a <PDI_Isr+0x122>
    {
        if ( ALEvent & PROCESS_OUTPUT_EVENT )
 8001384:	88bb      	ldrh	r3, [r7, #4]
 8001386:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800138a:	2b00      	cmp	r3, #0
 800138c:	d036      	beq.n	80013fc <PDI_Isr+0xa4>
        {
            if(bDcRunning && bDcSyncActive)
 800138e:	4b49      	ldr	r3, [pc, #292]	@ (80014b4 <PDI_Isr+0x15c>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d006      	beq.n	80013a4 <PDI_Isr+0x4c>
 8001396:	4b48      	ldr	r3, [pc, #288]	@ (80014b8 <PDI_Isr+0x160>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d002      	beq.n	80013a4 <PDI_Isr+0x4c>
            {
                /* Reset SM/Sync0 counter. Will be incremented on every Sync0 event*/
                u16SmSync0Counter = 0;
 800139e:	4b47      	ldr	r3, [pc, #284]	@ (80014bc <PDI_Isr+0x164>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	801a      	strh	r2, [r3, #0]
            }
            if(sSyncManOutPar.u16SmEventMissedCounter > 0)
 80013a4:	4b46      	ldr	r3, [pc, #280]	@ (80014c0 <PDI_Isr+0x168>)
 80013a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d005      	beq.n	80013b8 <PDI_Isr+0x60>
            {
                sSyncManOutPar.u16SmEventMissedCounter--;
 80013ac:	4b44      	ldr	r3, [pc, #272]	@ (80014c0 <PDI_Isr+0x168>)
 80013ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013b0:	3b01      	subs	r3, #1
 80013b2:	b29a      	uxth	r2, r3
 80013b4:	4b42      	ldr	r3, [pc, #264]	@ (80014c0 <PDI_Isr+0x168>)
 80013b6:	851a      	strh	r2, [r3, #40]	@ 0x28
            }

            sSyncManInPar.u16SmEventMissedCounter = sSyncManOutPar.u16SmEventMissedCounter;
 80013b8:	4b41      	ldr	r3, [pc, #260]	@ (80014c0 <PDI_Isr+0x168>)
 80013ba:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80013bc:	4b41      	ldr	r3, [pc, #260]	@ (80014c4 <PDI_Isr+0x16c>)
 80013be:	851a      	strh	r2, [r3, #40]	@ 0x28



        /* Outputs were updated, set flag for watchdog monitoring */
        bEcatFirstOutputsReceived = TRUE;
 80013c0:	4b41      	ldr	r3, [pc, #260]	@ (80014c8 <PDI_Isr+0x170>)
 80013c2:	2201      	movs	r2, #1
 80013c4:	701a      	strb	r2, [r3, #0]


        /*
            handle output process data event
        */
        if ( bEcatOutputUpdateRunning )
 80013c6:	4b41      	ldr	r3, [pc, #260]	@ (80014cc <PDI_Isr+0x174>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d002      	beq.n	80013d4 <PDI_Isr+0x7c>
        {
            /* slave is in OP, update the outputs */
            PDO_OutputMapping();
 80013ce:	f7ff fea5 	bl	800111c <PDO_OutputMapping>
 80013d2:	e013      	b.n	80013fc <PDI_Isr+0xa4>
        }
        else
        {
            /* Just acknowledge the process data event in the INIT,PreOP and SafeOP state */
            HW_EscReadByteIsr(u8dummy,nEscAddrOutputData);
 80013d4:	4b3e      	ldr	r3, [pc, #248]	@ (80014d0 <PDI_Isr+0x178>)
 80013d6:	881b      	ldrh	r3, [r3, #0]
 80013d8:	2201      	movs	r2, #1
 80013da:	4619      	mov	r1, r3
 80013dc:	483d      	ldr	r0, [pc, #244]	@ (80014d4 <PDI_Isr+0x17c>)
 80013de:	f7ff fac9 	bl	8000974 <HW_EscReadIsr>
            HW_EscReadByteIsr(u8dummy,(nEscAddrOutputData+nPdOutputSize-1));
 80013e2:	4b3b      	ldr	r3, [pc, #236]	@ (80014d0 <PDI_Isr+0x178>)
 80013e4:	881a      	ldrh	r2, [r3, #0]
 80013e6:	4b3c      	ldr	r3, [pc, #240]	@ (80014d8 <PDI_Isr+0x180>)
 80013e8:	881b      	ldrh	r3, [r3, #0]
 80013ea:	4413      	add	r3, r2
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	3b01      	subs	r3, #1
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	2201      	movs	r2, #1
 80013f4:	4619      	mov	r1, r3
 80013f6:	4837      	ldr	r0, [pc, #220]	@ (80014d4 <PDI_Isr+0x17c>)
 80013f8:	f7ff fabc 	bl	8000974 <HW_EscReadIsr>
        }

        /*
            Call ECAT_Application() in SM Sync mode
        */
        if (sSyncManOutPar.u16SyncType == SYNCTYPE_SM_SYNCHRON)
 80013fc:	4b30      	ldr	r3, [pc, #192]	@ (80014c0 <PDI_Isr+0x168>)
 80013fe:	885b      	ldrh	r3, [r3, #2]
 8001400:	2b01      	cmp	r3, #1
 8001402:	d101      	bne.n	8001408 <PDI_Isr+0xb0>
        {
            /* The Application is synchronized to process data Sync Manager event*/
            ECAT_Application();
 8001404:	f000 fa50 	bl	80018a8 <ECAT_Application>
        }

/*ECATCHANGE_START(V5.13) ECAT 5*/
    if ( (bEcatInputUpdateRunning == TRUE) && (nPdInputSize > 0)
 8001408:	4b34      	ldr	r3, [pc, #208]	@ (80014dc <PDI_Isr+0x184>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d10d      	bne.n	800142c <PDI_Isr+0xd4>
 8001410:	4b33      	ldr	r3, [pc, #204]	@ (80014e0 <PDI_Isr+0x188>)
 8001412:	881b      	ldrh	r3, [r3, #0]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d009      	beq.n	800142c <PDI_Isr+0xd4>
/*ECATCHANGE_END(V5.13) ECAT 5*/
       && ((sSyncManInPar.u16SyncType == SYNCTYPE_SM_SYNCHRON) || (sSyncManInPar.u16SyncType == SYNCTYPE_SM2_SYNCHRON))
 8001418:	4b2a      	ldr	r3, [pc, #168]	@ (80014c4 <PDI_Isr+0x16c>)
 800141a:	885b      	ldrh	r3, [r3, #2]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d003      	beq.n	8001428 <PDI_Isr+0xd0>
 8001420:	4b28      	ldr	r3, [pc, #160]	@ (80014c4 <PDI_Isr+0x16c>)
 8001422:	885b      	ldrh	r3, [r3, #2]
 8001424:	2b22      	cmp	r3, #34	@ 0x22
 8001426:	d101      	bne.n	800142c <PDI_Isr+0xd4>
        )
    {
        /* EtherCAT slave is at least in SAFE-OPERATIONAL, update inputs */
        PDO_InputMapping();
 8001428:	f7ff fe2e 	bl	8001088 <PDO_InputMapping>

    /*
      Check if cycle exceed
    */
    /*if next SM event was triggered during runtime increment cycle exceed counter*/
    ALEvent = HW_GetALEventRegister_Isr();
 800142c:	f7ff fa7a 	bl	8000924 <HW_GetALEventRegister_Isr>
 8001430:	4603      	mov	r3, r0
 8001432:	80bb      	strh	r3, [r7, #4]
    ALEvent = SWAPWORD(ALEvent);

    if ( ALEvent & PROCESS_OUTPUT_EVENT )
 8001434:	88bb      	ldrh	r3, [r7, #4]
 8001436:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800143a:	2b00      	cmp	r3, #0
 800143c:	d01d      	beq.n	800147a <PDI_Isr+0x122>
    {
        sSyncManOutPar.u16CycleExceededCounter++;
 800143e:	4b20      	ldr	r3, [pc, #128]	@ (80014c0 <PDI_Isr+0x168>)
 8001440:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001442:	3301      	adds	r3, #1
 8001444:	b29a      	uxth	r2, r3
 8001446:	4b1e      	ldr	r3, [pc, #120]	@ (80014c0 <PDI_Isr+0x168>)
 8001448:	855a      	strh	r2, [r3, #42]	@ 0x2a
        sSyncManInPar.u16CycleExceededCounter = sSyncManOutPar.u16CycleExceededCounter;
 800144a:	4b1d      	ldr	r3, [pc, #116]	@ (80014c0 <PDI_Isr+0x168>)
 800144c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800144e:	4b1d      	ldr	r3, [pc, #116]	@ (80014c4 <PDI_Isr+0x16c>)
 8001450:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Acknowledge the process data event*/
            HW_EscReadByteIsr(u8dummy,nEscAddrOutputData);
 8001452:	4b1f      	ldr	r3, [pc, #124]	@ (80014d0 <PDI_Isr+0x178>)
 8001454:	881b      	ldrh	r3, [r3, #0]
 8001456:	2201      	movs	r2, #1
 8001458:	4619      	mov	r1, r3
 800145a:	481e      	ldr	r0, [pc, #120]	@ (80014d4 <PDI_Isr+0x17c>)
 800145c:	f7ff fa8a 	bl	8000974 <HW_EscReadIsr>
            HW_EscReadByteIsr(u8dummy,(nEscAddrOutputData+nPdOutputSize-1));
 8001460:	4b1b      	ldr	r3, [pc, #108]	@ (80014d0 <PDI_Isr+0x178>)
 8001462:	881a      	ldrh	r2, [r3, #0]
 8001464:	4b1c      	ldr	r3, [pc, #112]	@ (80014d8 <PDI_Isr+0x180>)
 8001466:	881b      	ldrh	r3, [r3, #0]
 8001468:	4413      	add	r3, r2
 800146a:	b29b      	uxth	r3, r3
 800146c:	3b01      	subs	r3, #1
 800146e:	b29b      	uxth	r3, r3
 8001470:	2201      	movs	r2, #1
 8001472:	4619      	mov	r1, r3
 8001474:	4817      	ldr	r0, [pc, #92]	@ (80014d4 <PDI_Isr+0x17c>)
 8001476:	f7ff fa7d 	bl	8000974 <HW_EscReadIsr>
    }
    } //if(bEscIntEnabled)

      /*ECATCHANGE_START(V5.13) ECAT1*/
    if (ALEvent & SYNC0_EVENT)
 800147a:	88bb      	ldrh	r3, [r7, #4]
 800147c:	f003 0304 	and.w	r3, r3, #4
 8001480:	2b00      	cmp	r3, #0
 8001482:	d003      	beq.n	800148c <PDI_Isr+0x134>
    {
        Sync0_Isr();
 8001484:	f000 f82e 	bl	80014e4 <Sync0_Isr>

        SyncAcknowledgePending = TRUE;
 8001488:	2301      	movs	r3, #1
 800148a:	71fb      	strb	r3, [r7, #7]
    }

    /* Read Sync0/1 Status Register to acknowledge the event bit in the AL Event register */
    if (SyncAcknowledgePending)
 800148c:	79fb      	ldrb	r3, [r7, #7]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d008      	beq.n	80014a4 <PDI_Isr+0x14c>
    {
        volatile UINT32 SyncState = 0;
 8001492:	2300      	movs	r3, #0
 8001494:	603b      	str	r3, [r7, #0]
        HW_EscReadDWord(SyncState, ESC_DC_SYNC_STATUS);
 8001496:	463b      	mov	r3, r7
 8001498:	2204      	movs	r2, #4
 800149a:	f640 118c 	movw	r1, #2444	@ 0x98c
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff fa4a 	bl	8000938 <HW_EscRead>

    }
    /*ECATCHANGE_END(V5.13) ECAT1*/

    COE_UpdateSyncErrorStatus();
 80014a4:	f7ff fb88 	bl	8000bb8 <COE_UpdateSyncErrorStatus>

}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	240004e9 	.word	0x240004e9
 80014b4:	240004d0 	.word	0x240004d0
 80014b8:	240004cc 	.word	0x240004cc
 80014bc:	240004d2 	.word	0x240004d2
 80014c0:	240005a8 	.word	0x240005a8
 80014c4:	240005ec 	.word	0x240005ec
 80014c8:	240004ca 	.word	0x240004ca
 80014cc:	240004c8 	.word	0x240004c8
 80014d0:	24000500 	.word	0x24000500
 80014d4:	24000508 	.word	0x24000508
 80014d8:	240004f6 	.word	0x240004f6
 80014dc:	240004c9 	.word	0x240004c9
 80014e0:	240004f4 	.word	0x240004f4

080014e4 <Sync0_Isr>:

void Sync0_Isr(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
     Sync0WdCounter = 0;
 80014ea:	4b4f      	ldr	r3, [pc, #316]	@ (8001628 <Sync0_Isr+0x144>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	801a      	strh	r2, [r3, #0]

    if(bDcSyncActive)
 80014f0:	4b4e      	ldr	r3, [pc, #312]	@ (800162c <Sync0_Isr+0x148>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	f000 8091 	beq.w	800161c <Sync0_Isr+0x138>
    {
/*ECATCHANGE_START(V5.13) ECAT 6*/
        BOOL bCallInputMapping = FALSE;
 80014fa:	2300      	movs	r3, #0
 80014fc:	71fb      	strb	r3, [r7, #7]
/*ECATCHANGE_END(V5.13) ECAT 6*/

/*ECATCHANGE_START(V5.13) ECAT 6*/
        if ((bEcatInputUpdateRunning == TRUE) && (LatchInputSync0Value > 0) && (nPdInputSize > 0))
 80014fe:	4b4c      	ldr	r3, [pc, #304]	@ (8001630 <Sync0_Isr+0x14c>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d11b      	bne.n	800153e <Sync0_Isr+0x5a>
 8001506:	4b4b      	ldr	r3, [pc, #300]	@ (8001634 <Sync0_Isr+0x150>)
 8001508:	881b      	ldrh	r3, [r3, #0]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d017      	beq.n	800153e <Sync0_Isr+0x5a>
 800150e:	4b4a      	ldr	r3, [pc, #296]	@ (8001638 <Sync0_Isr+0x154>)
 8001510:	881b      	ldrh	r3, [r3, #0]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d013      	beq.n	800153e <Sync0_Isr+0x5a>
        {
            if(LatchInputSync0Value > LatchInputSync0Counter) /* Inputs shall be latched on a specific Sync0 event */
 8001516:	4b47      	ldr	r3, [pc, #284]	@ (8001634 <Sync0_Isr+0x150>)
 8001518:	881a      	ldrh	r2, [r3, #0]
 800151a:	4b48      	ldr	r3, [pc, #288]	@ (800163c <Sync0_Isr+0x158>)
 800151c:	881b      	ldrh	r3, [r3, #0]
 800151e:	429a      	cmp	r2, r3
 8001520:	d905      	bls.n	800152e <Sync0_Isr+0x4a>
            {
                LatchInputSync0Counter++;
 8001522:	4b46      	ldr	r3, [pc, #280]	@ (800163c <Sync0_Isr+0x158>)
 8001524:	881b      	ldrh	r3, [r3, #0]
 8001526:	3301      	adds	r3, #1
 8001528:	b29a      	uxth	r2, r3
 800152a:	4b44      	ldr	r3, [pc, #272]	@ (800163c <Sync0_Isr+0x158>)
 800152c:	801a      	strh	r2, [r3, #0]
            }

            if (LatchInputSync0Value == LatchInputSync0Counter)
 800152e:	4b41      	ldr	r3, [pc, #260]	@ (8001634 <Sync0_Isr+0x150>)
 8001530:	881a      	ldrh	r2, [r3, #0]
 8001532:	4b42      	ldr	r3, [pc, #264]	@ (800163c <Sync0_Isr+0x158>)
 8001534:	881b      	ldrh	r3, [r3, #0]
 8001536:	429a      	cmp	r2, r3
 8001538:	d101      	bne.n	800153e <Sync0_Isr+0x5a>
            {
                bCallInputMapping = TRUE;
 800153a:	2301      	movs	r3, #1
 800153c:	71fb      	strb	r3, [r7, #7]
            }
        }
/*ECATCHANGE_END(V5.13) ECAT 6*/

        if(u16SmSync0Value > 0)
 800153e:	4b40      	ldr	r3, [pc, #256]	@ (8001640 <Sync0_Isr+0x15c>)
 8001540:	881b      	ldrh	r3, [r3, #0]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d05c      	beq.n	8001600 <Sync0_Isr+0x11c>
        {
           /* Check if Sm-Sync sequence is invalid */
           if (u16SmSync0Counter > u16SmSync0Value)
 8001546:	4b3f      	ldr	r3, [pc, #252]	@ (8001644 <Sync0_Isr+0x160>)
 8001548:	881a      	ldrh	r2, [r3, #0]
 800154a:	4b3d      	ldr	r3, [pc, #244]	@ (8001640 <Sync0_Isr+0x15c>)
 800154c:	881b      	ldrh	r3, [r3, #0]
 800154e:	429a      	cmp	r2, r3
 8001550:	d923      	bls.n	800159a <Sync0_Isr+0xb6>
           {
              if ((nPdOutputSize > 0) && (sSyncManOutPar.u16SmEventMissedCounter <= sErrorSettings.u16SyncErrorCounterLimit))
 8001552:	4b3d      	ldr	r3, [pc, #244]	@ (8001648 <Sync0_Isr+0x164>)
 8001554:	881b      	ldrh	r3, [r3, #0]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d00b      	beq.n	8001572 <Sync0_Isr+0x8e>
 800155a:	4b3c      	ldr	r3, [pc, #240]	@ (800164c <Sync0_Isr+0x168>)
 800155c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800155e:	4b3c      	ldr	r3, [pc, #240]	@ (8001650 <Sync0_Isr+0x16c>)
 8001560:	891b      	ldrh	r3, [r3, #8]
 8001562:	429a      	cmp	r2, r3
 8001564:	d805      	bhi.n	8001572 <Sync0_Isr+0x8e>
              {
                 sSyncManOutPar.u16SmEventMissedCounter = sSyncManOutPar.u16SmEventMissedCounter + 3;
 8001566:	4b39      	ldr	r3, [pc, #228]	@ (800164c <Sync0_Isr+0x168>)
 8001568:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800156a:	3303      	adds	r3, #3
 800156c:	b29a      	uxth	r2, r3
 800156e:	4b37      	ldr	r3, [pc, #220]	@ (800164c <Sync0_Isr+0x168>)
 8001570:	851a      	strh	r2, [r3, #40]	@ 0x28
              }

               if ((nPdInputSize > 0) && (nPdOutputSize == 0) && (sSyncManInPar.u16SmEventMissedCounter <= sErrorSettings.u16SyncErrorCounterLimit))
 8001572:	4b31      	ldr	r3, [pc, #196]	@ (8001638 <Sync0_Isr+0x154>)
 8001574:	881b      	ldrh	r3, [r3, #0]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d00f      	beq.n	800159a <Sync0_Isr+0xb6>
 800157a:	4b33      	ldr	r3, [pc, #204]	@ (8001648 <Sync0_Isr+0x164>)
 800157c:	881b      	ldrh	r3, [r3, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d10b      	bne.n	800159a <Sync0_Isr+0xb6>
 8001582:	4b34      	ldr	r3, [pc, #208]	@ (8001654 <Sync0_Isr+0x170>)
 8001584:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8001586:	4b32      	ldr	r3, [pc, #200]	@ (8001650 <Sync0_Isr+0x16c>)
 8001588:	891b      	ldrh	r3, [r3, #8]
 800158a:	429a      	cmp	r2, r3
 800158c:	d805      	bhi.n	800159a <Sync0_Isr+0xb6>
               {
                   sSyncManInPar.u16SmEventMissedCounter = sSyncManInPar.u16SmEventMissedCounter + 3;
 800158e:	4b31      	ldr	r3, [pc, #196]	@ (8001654 <Sync0_Isr+0x170>)
 8001590:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001592:	3303      	adds	r3, #3
 8001594:	b29a      	uxth	r2, r3
 8001596:	4b2f      	ldr	r3, [pc, #188]	@ (8001654 <Sync0_Isr+0x170>)
 8001598:	851a      	strh	r2, [r3, #40]	@ 0x28
               }

           } // if (u16SmSync0Counter > u16SmSync0Value)

           
           if ((nPdOutputSize == 0) && (nPdInputSize > 0))
 800159a:	4b2b      	ldr	r3, [pc, #172]	@ (8001648 <Sync0_Isr+0x164>)
 800159c:	881b      	ldrh	r3, [r3, #0]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d120      	bne.n	80015e4 <Sync0_Isr+0x100>
 80015a2:	4b25      	ldr	r3, [pc, #148]	@ (8001638 <Sync0_Isr+0x154>)
 80015a4:	881b      	ldrh	r3, [r3, #0]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d01c      	beq.n	80015e4 <Sync0_Isr+0x100>
           {
              /* Input only with DC, check if the last input data was read*/
              UINT16  ALEvent = HW_GetALEventRegister_Isr();
 80015aa:	f7ff f9bb 	bl	8000924 <HW_GetALEventRegister_Isr>
 80015ae:	4603      	mov	r3, r0
 80015b0:	80bb      	strh	r3, [r7, #4]
              ALEvent = SWAPWORD(ALEvent);

              if ((ALEvent & PROCESS_INPUT_EVENT) == 0)
 80015b2:	88bb      	ldrh	r3, [r7, #4]
 80015b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d10c      	bne.n	80015d6 <Sync0_Isr+0xf2>
              {

                 /* no input data was read by the master, increment the sm missed counter*/
                if (u16SmSync0Counter <= u16SmSync0Value)
 80015bc:	4b21      	ldr	r3, [pc, #132]	@ (8001644 <Sync0_Isr+0x160>)
 80015be:	881a      	ldrh	r2, [r3, #0]
 80015c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001640 <Sync0_Isr+0x15c>)
 80015c2:	881b      	ldrh	r3, [r3, #0]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d81a      	bhi.n	80015fe <Sync0_Isr+0x11a>
                {
                    u16SmSync0Counter++;
 80015c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001644 <Sync0_Isr+0x160>)
 80015ca:	881b      	ldrh	r3, [r3, #0]
 80015cc:	3301      	adds	r3, #1
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	4b1c      	ldr	r3, [pc, #112]	@ (8001644 <Sync0_Isr+0x160>)
 80015d2:	801a      	strh	r2, [r3, #0]
           {
 80015d4:	e013      	b.n	80015fe <Sync0_Isr+0x11a>
                }
              }
              else
              {
                 /* Reset SM/Sync0 counter*/
                 u16SmSync0Counter = 0;
 80015d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001644 <Sync0_Isr+0x160>)
 80015d8:	2200      	movs	r2, #0
 80015da:	801a      	strh	r2, [r3, #0]

                 sSyncManInPar.u16SmEventMissedCounter = 0;
 80015dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001654 <Sync0_Isr+0x170>)
 80015de:	2200      	movs	r2, #0
 80015e0:	851a      	strh	r2, [r3, #40]	@ 0x28
           {
 80015e2:	e00c      	b.n	80015fe <Sync0_Isr+0x11a>

              }
           }
           else if (u16SmSync0Counter <= u16SmSync0Value)
 80015e4:	4b17      	ldr	r3, [pc, #92]	@ (8001644 <Sync0_Isr+0x160>)
 80015e6:	881a      	ldrh	r2, [r3, #0]
 80015e8:	4b15      	ldr	r3, [pc, #84]	@ (8001640 <Sync0_Isr+0x15c>)
 80015ea:	881b      	ldrh	r3, [r3, #0]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d807      	bhi.n	8001600 <Sync0_Isr+0x11c>
           {

               u16SmSync0Counter++;
 80015f0:	4b14      	ldr	r3, [pc, #80]	@ (8001644 <Sync0_Isr+0x160>)
 80015f2:	881b      	ldrh	r3, [r3, #0]
 80015f4:	3301      	adds	r3, #1
 80015f6:	b29a      	uxth	r2, r3
 80015f8:	4b12      	ldr	r3, [pc, #72]	@ (8001644 <Sync0_Isr+0x160>)
 80015fa:	801a      	strh	r2, [r3, #0]
 80015fc:	e000      	b.n	8001600 <Sync0_Isr+0x11c>
           {
 80015fe:	bf00      	nop
           }
        }//SM -Sync monitoring enabled


        /* Application is synchronized to SYNC0 event*/
        ECAT_Application();
 8001600:	f000 f952 	bl	80018a8 <ECAT_Application>

/*ECATCHANGE_START(V5.13) ECAT 6*/
        if (bCallInputMapping == TRUE)
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d108      	bne.n	800161c <Sync0_Isr+0x138>
        {
            /* EtherCAT slave is at least in SAFE-OPERATIONAL, update inputs */
            PDO_InputMapping();
 800160a:	f7ff fd3d 	bl	8001088 <PDO_InputMapping>

            if(LatchInputSync0Value == 1)
 800160e:	4b09      	ldr	r3, [pc, #36]	@ (8001634 <Sync0_Isr+0x150>)
 8001610:	881b      	ldrh	r3, [r3, #0]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d102      	bne.n	800161c <Sync0_Isr+0x138>
            {
                /* if inputs are latched on every Sync0 event (otherwise the counter is reset on the next Sync1 event) */
                LatchInputSync0Counter = 0;
 8001616:	4b09      	ldr	r3, [pc, #36]	@ (800163c <Sync0_Isr+0x158>)
 8001618:	2200      	movs	r2, #0
 800161a:	801a      	strh	r2, [r3, #0]
        }
/*ECATCHANGE_END(V5.13) ECAT 6*/

    }

    COE_UpdateSyncErrorStatus();
 800161c:	f7ff facc 	bl	8000bb8 <COE_UpdateSyncErrorStatus>

}
 8001620:	bf00      	nop
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	240004dc 	.word	0x240004dc
 800162c:	240004cc 	.word	0x240004cc
 8001630:	240004c9 	.word	0x240004c9
 8001634:	240004e4 	.word	0x240004e4
 8001638:	240004f4 	.word	0x240004f4
 800163c:	240004e6 	.word	0x240004e6
 8001640:	240004d4 	.word	0x240004d4
 8001644:	240004d2 	.word	0x240004d2
 8001648:	240004f6 	.word	0x240004f6
 800164c:	240005a8 	.word	0x240005a8
 8001650:	24000390 	.word	0x24000390
 8001654:	240005ec 	.word	0x240005ec

08001658 <Sync1_Isr>:

void Sync1_Isr(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
    Sync1WdCounter = 0;
 800165c:	4b0c      	ldr	r3, [pc, #48]	@ (8001690 <Sync1_Isr+0x38>)
 800165e:	2200      	movs	r2, #0
 8001660:	801a      	strh	r2, [r3, #0]

    /*ECATCHANGE_START(V5.13) ECAT 5*/
    if ( (bEcatInputUpdateRunning == TRUE) && (nPdInputSize > 0)
 8001662:	4b0c      	ldr	r3, [pc, #48]	@ (8001694 <Sync1_Isr+0x3c>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d10d      	bne.n	8001686 <Sync1_Isr+0x2e>
 800166a:	4b0b      	ldr	r3, [pc, #44]	@ (8001698 <Sync1_Isr+0x40>)
 800166c:	881b      	ldrh	r3, [r3, #0]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d009      	beq.n	8001686 <Sync1_Isr+0x2e>
/*ECATCHANGE_END(V5.13) ECAT 5*/
            && (sSyncManInPar.u16SyncType == SYNCTYPE_DCSYNC1)
 8001672:	4b0a      	ldr	r3, [pc, #40]	@ (800169c <Sync1_Isr+0x44>)
 8001674:	885b      	ldrh	r3, [r3, #2]
 8001676:	2b03      	cmp	r3, #3
 8001678:	d105      	bne.n	8001686 <Sync1_Isr+0x2e>
            && (LatchInputSync0Value == 0)) /* Inputs are latched on Sync1 (LatchInputSync0Value == 0), if LatchInputSync0Value > 0 inputs are latched with Sync0 */
 800167a:	4b09      	ldr	r3, [pc, #36]	@ (80016a0 <Sync1_Isr+0x48>)
 800167c:	881b      	ldrh	r3, [r3, #0]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d101      	bne.n	8001686 <Sync1_Isr+0x2e>
        {
            /* EtherCAT slave is at least in SAFE-OPERATIONAL, update inputs */
            PDO_InputMapping();
 8001682:	f7ff fd01 	bl	8001088 <PDO_InputMapping>
        }

        /* Reset Sync0 latch counter (to start next Sync0 latch cycle) */
        LatchInputSync0Counter = 0;
 8001686:	4b07      	ldr	r3, [pc, #28]	@ (80016a4 <Sync1_Isr+0x4c>)
 8001688:	2200      	movs	r2, #0
 800168a:	801a      	strh	r2, [r3, #0]
}
 800168c:	bf00      	nop
 800168e:	bd80      	pop	{r7, pc}
 8001690:	240004e0 	.word	0x240004e0
 8001694:	240004c9 	.word	0x240004c9
 8001698:	240004f4 	.word	0x240004f4
 800169c:	240005ec 	.word	0x240005ec
 80016a0:	240004e4 	.word	0x240004e4
 80016a4:	240004e6 	.word	0x240004e6

080016a8 <MainInit>:
 \brief    This function initialize the EtherCAT Sample Code

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 MainInit(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
    UINT16 Error = 0;
 80016ae:	2300      	movs	r3, #0
 80016b0:	817b      	strh	r3, [r7, #10]




    /* ECATCHANGE_START(V5.13) COE4*/
    pAPPL_CoeReadInd = NULL;
 80016b2:	4b3d      	ldr	r3, [pc, #244]	@ (80017a8 <MainInit+0x100>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
    pAPPL_CoeWriteInd = NULL;
 80016b8:	4b3c      	ldr	r3, [pc, #240]	@ (80017ac <MainInit+0x104>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
    /* ECATCHANGE_END(V5.13) COE4*/

    pAPPL_MainLoop = NULL;
 80016be:	4b3c      	ldr	r3, [pc, #240]	@ (80017b0 <MainInit+0x108>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]

    /* initialize the EtherCAT Slave Interface */
    ECAT_Init();
 80016c4:	f001 ff9c 	bl	8003600 <ECAT_Init>
    /* initialize the objects */
    COE_ObjInit();
 80016c8:	f7ff faaa 	bl	8000c20 <COE_ObjInit>


    /*Reset PDI Access*/
    {
    UINT16 eepromConfigControl = 0; //register (0x0500 : 0x0503) values
 80016cc:	2300      	movs	r3, #0
 80016ce:	813b      	strh	r3, [r7, #8]

    HW_EscReadWord(eepromConfigControl,ESC_EEPROM_CONFIG_OFFSET);
 80016d0:	f107 0308 	add.w	r3, r7, #8
 80016d4:	2202      	movs	r2, #2
 80016d6:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff f92c 	bl	8000938 <HW_EscRead>
    eepromConfigControl = SWAPWORD(eepromConfigControl);
 80016e0:	893b      	ldrh	r3, [r7, #8]
 80016e2:	813b      	strh	r3, [r7, #8]

    if((eepromConfigControl & ESC_EEPROM_ASSIGN_TO_PDI_MASK) > 0)
 80016e4:	893b      	ldrh	r3, [r7, #8]
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	dd0e      	ble.n	800170c <MainInit+0x64>
    {
        /*Clear access register(0x0501.1)*/
        eepromConfigControl &= ~ESC_EEPROM_LOCKED_BY_PDI_MASK;
 80016ee:	893b      	ldrh	r3, [r7, #8]
 80016f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	813b      	strh	r3, [r7, #8]

        eepromConfigControl = SWAPWORD(eepromConfigControl);
 80016f8:	893b      	ldrh	r3, [r7, #8]
 80016fa:	813b      	strh	r3, [r7, #8]
        HW_EscWriteWord(eepromConfigControl,ESC_EEPROM_CONFIG_OFFSET);
 80016fc:	f107 0308 	add.w	r3, r7, #8
 8001700:	2202      	movs	r2, #2
 8001702:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff f946 	bl	8000998 <HW_EscWrite>
    }
    }
    /*indicate that the slave stack initialization finished*/
    bInitFinished = TRUE;
 800170c:	4b29      	ldr	r3, [pc, #164]	@ (80017b4 <MainInit+0x10c>)
 800170e:	2201      	movs	r2, #1
 8001710:	701a      	strb	r2, [r3, #0]


    bMinCycleTimeMeasurementStarted = FALSE;
 8001712:	4b29      	ldr	r3, [pc, #164]	@ (80017b8 <MainInit+0x110>)
 8001714:	2200      	movs	r2, #0
 8001716:	701a      	strb	r2, [r3, #0]
    u32CycleTimeStartValue = 0;
 8001718:	4b28      	ldr	r3, [pc, #160]	@ (80017bc <MainInit+0x114>)
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
    u32MinCycleTimeStartValue = 0;
 800171e:	4b28      	ldr	r3, [pc, #160]	@ (80017c0 <MainInit+0x118>)
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]

    u32SystemTimeReadFailure = 0;
 8001724:	4b27      	ldr	r3, [pc, #156]	@ (80017c4 <MainInit+0x11c>)
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]

    /* Get the System Time read failure */
    {
       UINT32 u32TimeValue = 0;
 800172a:	2300      	movs	r3, #0
 800172c:	607b      	str	r3, [r7, #4]
       UINT32 u32Cnt = 0;
 800172e:	2300      	movs	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]
       UINT32 u32Delta = 0;
 8001732:	2300      	movs	r3, #0
 8001734:	603b      	str	r3, [r7, #0]

       while (u32Cnt < 1000)
 8001736:	e02e      	b.n	8001796 <MainInit+0xee>
       {
           HW_EscReadDWordIsr(u32TimeValue, ESC_SYSTEMTIME_OFFSET);
 8001738:	1d3b      	adds	r3, r7, #4
 800173a:	2204      	movs	r2, #4
 800173c:	f44f 6111 	mov.w	r1, #2320	@ 0x910
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff f917 	bl	8000974 <HW_EscReadIsr>
           HW_EscReadDWordIsr(u32Delta, ESC_SYSTEMTIME_OFFSET);
 8001746:	463b      	mov	r3, r7
 8001748:	2204      	movs	r2, #4
 800174a:	f44f 6111 	mov.w	r1, #2320	@ 0x910
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff f910 	bl	8000974 <HW_EscReadIsr>

            if (u32TimeValue <= u32Delta)
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	429a      	cmp	r2, r3
 800175a:	d804      	bhi.n	8001766 <MainInit+0xbe>
            {
                    u32Delta = u32Delta - u32TimeValue;
 800175c:	683a      	ldr	r2, [r7, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	603b      	str	r3, [r7, #0]
 8001764:	e004      	b.n	8001770 <MainInit+0xc8>
            }
            else
            {
                //The 32Bit timer is wrapped around
                u32Delta = u32Delta + (0xFFFFFFFF - u32TimeValue);
 8001766:	683a      	ldr	r2, [r7, #0]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	3b01      	subs	r3, #1
 800176e:	603b      	str	r3, [r7, #0]
            }


            if (u32SystemTimeReadFailure == 0)
 8001770:	4b14      	ldr	r3, [pc, #80]	@ (80017c4 <MainInit+0x11c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d103      	bne.n	8001780 <MainInit+0xd8>
            {
                u32SystemTimeReadFailure = u32Delta;
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	4a12      	ldr	r2, [pc, #72]	@ (80017c4 <MainInit+0x11c>)
 800177c:	6013      	str	r3, [r2, #0]
 800177e:	e007      	b.n	8001790 <MainInit+0xe8>
            }
            else if (u32SystemTimeReadFailure > u32Delta)
 8001780:	4b10      	ldr	r3, [pc, #64]	@ (80017c4 <MainInit+0x11c>)
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	429a      	cmp	r2, r3
 8001788:	d902      	bls.n	8001790 <MainInit+0xe8>
            {
                u32SystemTimeReadFailure = u32Delta;
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	4a0d      	ldr	r2, [pc, #52]	@ (80017c4 <MainInit+0x11c>)
 800178e:	6013      	str	r3, [r2, #0]
            }

          u32Cnt++;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	3301      	adds	r3, #1
 8001794:	60fb      	str	r3, [r7, #12]
       while (u32Cnt < 1000)
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800179c:	d3cc      	bcc.n	8001738 <MainInit+0x90>




/*Application Init need to be called from the application layer*/
     return Error;
 800179e:	897b      	ldrh	r3, [r7, #10]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	24000464 	.word	0x24000464
 80017ac:	24000468 	.word	0x24000468
 80017b0:	2400046c 	.word	0x2400046c
 80017b4:	240004c0 	.word	0x240004c0
 80017b8:	2400047c 	.word	0x2400047c
 80017bc:	24000470 	.word	0x24000470
 80017c0:	24000474 	.word	0x24000474
 80017c4:	24000478 	.word	0x24000478

080017c8 <MainLoop>:
 \brief    This function shall be called cyclically from main

*////////////////////////////////////////////////////////////////////////////////////////

void MainLoop(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
    /*return if initialization not finished */
    if(bInitFinished == FALSE)
 80017ce:	4b2c      	ldr	r3, [pc, #176]	@ (8001880 <MainLoop+0xb8>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d04f      	beq.n	8001876 <MainLoop+0xae>

        /* FreeRun-Mode:  bEscIntEnabled = FALSE, bDcSyncActive = FALSE
           Synchron-Mode: bEscIntEnabled = TRUE, bDcSyncActive = FALSE
           DC-Mode:       bEscIntEnabled = TRUE, bDcSyncActive = TRUE */
        if (
            (!bEscIntEnabled || !bEcatFirstOutputsReceived)     /* SM-Synchronous, but not SM-event received */
 80017d6:	4b2b      	ldr	r3, [pc, #172]	@ (8001884 <MainLoop+0xbc>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
        if (
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d003      	beq.n	80017e6 <MainLoop+0x1e>
            (!bEscIntEnabled || !bEcatFirstOutputsReceived)     /* SM-Synchronous, but not SM-event received */
 80017de:	4b2a      	ldr	r3, [pc, #168]	@ (8001888 <MainLoop+0xc0>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d132      	bne.n	800184c <MainLoop+0x84>
          && !bDcSyncActive                                               /* DC-Synchronous */
 80017e6:	4b29      	ldr	r3, [pc, #164]	@ (800188c <MainLoop+0xc4>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d12e      	bne.n	800184c <MainLoop+0x84>
               from the ESC interrupt routine,
               in ECAT Synchron Mode it should be additionally checked, if the SM-event is received
               at least once (bEcatFirstOutputsReceived = 1), otherwise no interrupt is generated
               and the function ECAT_Application has to be called here (with interrupts disabled,
               because the SM-event could be generated while executing ECAT_Application) */
            if ( !bEscIntEnabled )
 80017ee:	4b25      	ldr	r3, [pc, #148]	@ (8001884 <MainLoop+0xbc>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d11e      	bne.n	8001834 <MainLoop+0x6c>
            {
                /* application is running in ECAT FreeRun Mode,
                   first we have to check, if outputs were received */
                UINT16 ALEvent = HW_GetALEventRegister();
 80017f6:	f7ff f88b 	bl	8000910 <HW_GetALEventRegister>
 80017fa:	4603      	mov	r3, r0
 80017fc:	80fb      	strh	r3, [r7, #6]
                ALEvent = SWAPWORD(ALEvent);

                if ( ALEvent & PROCESS_OUTPUT_EVENT )
 80017fe:	88fb      	ldrh	r3, [r7, #6]
 8001800:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001804:	2b00      	cmp	r3, #0
 8001806:	d009      	beq.n	800181c <MainLoop+0x54>
                {
                    /* set the flag for the state machine behavior */
                    bEcatFirstOutputsReceived = TRUE;
 8001808:	4b1f      	ldr	r3, [pc, #124]	@ (8001888 <MainLoop+0xc0>)
 800180a:	2201      	movs	r2, #1
 800180c:	701a      	strb	r2, [r3, #0]
                    if ( bEcatOutputUpdateRunning )
 800180e:	4b20      	ldr	r3, [pc, #128]	@ (8001890 <MainLoop+0xc8>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d00e      	beq.n	8001834 <MainLoop+0x6c>
                    {
                        /* update the outputs */
                        PDO_OutputMapping();
 8001816:	f7ff fc81 	bl	800111c <PDO_OutputMapping>
 800181a:	e00b      	b.n	8001834 <MainLoop+0x6c>
                    }
                }
                else if ( nPdOutputSize == 0 )
 800181c:	4b1d      	ldr	r3, [pc, #116]	@ (8001894 <MainLoop+0xcc>)
 800181e:	881b      	ldrh	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d107      	bne.n	8001834 <MainLoop+0x6c>
                {
                    /* if no outputs are transmitted, the watchdog must be reset, when the inputs were read */
                    if ( ALEvent & PROCESS_INPUT_EVENT )
 8001824:	88fb      	ldrh	r3, [r7, #6]
 8001826:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800182a:	2b00      	cmp	r3, #0
 800182c:	d002      	beq.n	8001834 <MainLoop+0x6c>
                    {
                        /* Outputs were updated, set flag for watchdog monitoring */
                        bEcatFirstOutputsReceived = TRUE;
 800182e:	4b16      	ldr	r3, [pc, #88]	@ (8001888 <MainLoop+0xc0>)
 8001830:	2201      	movs	r2, #1
 8001832:	701a      	strb	r2, [r3, #0]
                    }
                }
            }

            DISABLE_ESC_INT();
             ECAT_Application();
 8001834:	f000 f838 	bl	80018a8 <ECAT_Application>

/*ECATCHANGE_START(V5.13) ECAT 5*/
             if ( (bEcatInputUpdateRunning  == TRUE) && (nPdInputSize > 0))
 8001838:	4b17      	ldr	r3, [pc, #92]	@ (8001898 <MainLoop+0xd0>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d105      	bne.n	800184c <MainLoop+0x84>
 8001840:	4b16      	ldr	r3, [pc, #88]	@ (800189c <MainLoop+0xd4>)
 8001842:	881b      	ldrh	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <MainLoop+0x84>
/*ECATCHANGE_END(V5.13) ECAT 5*/
             {
                /* EtherCAT slave is at least in SAFE-OPERATIONAL, update inputs */
                PDO_InputMapping();
 8001848:	f7ff fc1e 	bl	8001088 <PDO_InputMapping>
            }
            ENABLE_ESC_INT();
        }


        if (u32CheckForDcOverrunCnt >= CHECK_DC_OVERRUN_IN_MS)
 800184c:	4b14      	ldr	r3, [pc, #80]	@ (80018a0 <MainLoop+0xd8>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8001854:	d301      	bcc.n	800185a <MainLoop+0x92>
        {
            COE_SyncTimeStamp();
 8001856:	f7ff f953 	bl	8000b00 <COE_SyncTimeStamp>
        }

        /* call EtherCAT functions */
        ECAT_Main();
 800185a:	f001 ff7b 	bl	8003754 <ECAT_Main>

        /* call lower prior application part */
       COE_Main();
 800185e:	f7ff fba7 	bl	8000fb0 <COE_Main>
       CheckIfEcatError();
 8001862:	f001 fe77 	bl	8003554 <CheckIfEcatError>


    if (pAPPL_MainLoop != NULL)
 8001866:	4b0f      	ldr	r3, [pc, #60]	@ (80018a4 <MainLoop+0xdc>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d004      	beq.n	8001878 <MainLoop+0xb0>
    {
        pAPPL_MainLoop();
 800186e:	4b0d      	ldr	r3, [pc, #52]	@ (80018a4 <MainLoop+0xdc>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4798      	blx	r3
 8001874:	e000      	b.n	8001878 <MainLoop+0xb0>
        return;
 8001876:	bf00      	nop
    }
}
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	240004c0 	.word	0x240004c0
 8001884:	240004e9 	.word	0x240004e9
 8001888:	240004ca 	.word	0x240004ca
 800188c:	240004cc 	.word	0x240004cc
 8001890:	240004c8 	.word	0x240004c8
 8001894:	240004f6 	.word	0x240004f6
 8001898:	240004c9 	.word	0x240004c9
 800189c:	240004f4 	.word	0x240004f4
 80018a0:	24000454 	.word	0x24000454
 80018a4:	2400046c 	.word	0x2400046c

080018a8 <ECAT_Application>:
/**
 \brief    ECAT_Application (prev. SSC versions "COE_Application")
 this function calculates and the physical process signals and triggers the input mapping
*////////////////////////////////////////////////////////////////////////////////////////
void ECAT_Application(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
            u32MinCycleTimeValue = 0;
        }
    } /* measurement started*/
#endif /* (MIN_PD_CYCLE_TIME == 0)*/

    if (MEASUREMENT_ACTIVE)
 80018ac:	4b0a      	ldr	r3, [pc, #40]	@ (80018d8 <ECAT_Application+0x30>)
 80018ae:	8b9b      	ldrh	r3, [r3, #28]
 80018b0:	f003 0301 	and.w	r3, r3, #1
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d105      	bne.n	80018c4 <ECAT_Application+0x1c>
 80018b8:	4b08      	ldr	r3, [pc, #32]	@ (80018dc <ECAT_Application+0x34>)
 80018ba:	8b9b      	ldrh	r3, [r3, #28]
 80018bc:	f003 0301 	and.w	r3, r3, #1
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d005      	beq.n	80018d0 <ECAT_Application+0x28>
    {
        if (nPdOutputSize == 0)
 80018c4:	4b06      	ldr	r3, [pc, #24]	@ (80018e0 <ECAT_Application+0x38>)
 80018c6:	881b      	ldrh	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d101      	bne.n	80018d0 <ECAT_Application+0x28>
        {
            /* in case of an input only device the cycle starts with an ECAT_Application call*/
            HandleCycleTimeMeasurement();
 80018cc:	f7ff fcce 	bl	800126c <HandleCycleTimeMeasurement>


    /*ECATCHANGE_START(V5.13) CIA402 4*/
    /*decouple CIA402 application from ESM*/
    /*ECATCHANGE_END(V5.13) CIA402 4*/
    APPL_Application();
 80018d0:	f7fe fe5a 	bl	8000588 <APPL_Application>
            }
        }

    }/* measurement started*/
#endif /* #if MIN_PD_CYCLE_TIME == 0 */
}
 80018d4:	bf00      	nop
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	240005a8 	.word	0x240005a8
 80018dc:	240005ec 	.word	0x240005ec
 80018e0:	240004f6 	.word	0x240004f6

080018e4 <COE_Init>:

 \brief    This function intialize the CoE Interface.
*////////////////////////////////////////////////////////////////////////////////////////

void COE_Init(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
    pCoeSendStored = 0;
 80018e8:	4b05      	ldr	r3, [pc, #20]	@ (8001900 <COE_Init+0x1c>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
    nSdoInfoFragmentsLeft = 0;
 80018ee:	4b05      	ldr	r3, [pc, #20]	@ (8001904 <COE_Init+0x20>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	801a      	strh	r2, [r3, #0]
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	240004c4 	.word	0x240004c4
 8001904:	24000658 	.word	0x24000658

08001908 <COE_ServiceInd>:
 \brief    This function is called when a CoE (CAN application layer over EtherCAT) service is received from
             the master.
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 COE_ServiceInd(TCOEMBX MBXMEM *pCoeMbx)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
    UINT8 result = 0;
 8001910:	2300      	movs	r3, #0
 8001912:	73fb      	strb	r3, [r7, #15]

    switch ((pCoeMbx->CoeHeader & COEHEADER_COESERVICEMASK) >> COEHEADER_COESERVICESHIFT)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	88db      	ldrh	r3, [r3, #6]
 8001918:	0b1b      	lsrs	r3, r3, #12
 800191a:	b29b      	uxth	r3, r3
 800191c:	3b01      	subs	r3, #1
 800191e:	2b07      	cmp	r3, #7
 8001920:	d821      	bhi.n	8001966 <COE_ServiceInd+0x5e>
 8001922:	a201      	add	r2, pc, #4	@ (adr r2, 8001928 <COE_ServiceInd+0x20>)
 8001924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001928:	08001961 	.word	0x08001961
 800192c:	08001949 	.word	0x08001949
 8001930:	08001961 	.word	0x08001961
 8001934:	08001961 	.word	0x08001961
 8001938:	08001961 	.word	0x08001961
 800193c:	08001961 	.word	0x08001961
 8001940:	08001961 	.word	0x08001961
 8001944:	08001955 	.word	0x08001955
    {
    case COESERVICE_SDOREQUEST:
        /* SDO-Request received, call SDOS_SdoInd to process the SDO-Request
           if an existing SDO-Stack shall be used, the corresponding function
            should be called */
        result = SDOS_SdoInd( (TINITSDOMBX MBXMEM *) pCoeMbx );
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f004 fc35 	bl	80061b8 <SDOS_SdoInd>
 800194e:	4603      	mov	r3, r0
 8001950:	73fb      	strb	r3, [r7, #15]
        break;
 8001952:	e00b      	b.n	800196c <COE_ServiceInd+0x64>

    case COESERVICE_SDOINFO:
        /* SDO-Information Request received, call SDOS_SdoInfoInd to process the SDO-Request */
        result = SDOS_SdoInfoInd( (TSDOINFORMATION MBXMEM *) pCoeMbx );
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f005 f809 	bl	800696c <SDOS_SdoInfoInd>
 800195a:	4603      	mov	r3, r0
 800195c:	73fb      	strb	r3, [r7, #15]
        /*NOERROR_INWORK is never returned by SDOS_SdoInfoInd() => delete return code handling*/
        break;
 800195e:	e005      	b.n	800196c <COE_ServiceInd+0x64>
    case COESERVICE_TXPDO:
    case COESERVICE_RXPDO:
    case COESERVICE_TXPDOREMREQ:
    case COESERVICE_RXPDOREMREQ:
        /* these CoE services are not supported yet */
        result = MBXERR_SERVICENOTSUPPORTED;
 8001960:	2304      	movs	r3, #4
 8001962:	73fb      	strb	r3, [r7, #15]
        break;
 8001964:	e002      	b.n	800196c <COE_ServiceInd+0x64>

    default:
        result = MBXERR_INVALIDHEADER;
 8001966:	2305      	movs	r3, #5
 8001968:	73fb      	strb	r3, [r7, #15]
        break;
 800196a:	bf00      	nop
    }
    return result;
 800196c:	7bfb      	ldrb	r3, [r7, #15]
}
 800196e:	4618      	mov	r0, r3
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop

08001978 <COE_ContinueInd>:
 \brief    This function is called when a CoE service to be sent is stored and can
 \brief  be put in the send mailbox.
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 COE_ContinueInd(TMBX MBXMEM * pMbx)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
    if (pCoeSendStored)
 8001980:	4b13      	ldr	r3, [pc, #76]	@ (80019d0 <COE_ContinueInd+0x58>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d00c      	beq.n	80019a2 <COE_ContinueInd+0x2a>
    {
        /* send the stored CoE service which could not be sent before */
/*ECATCHANGE_START(V5.13) COE8*/
        if (MBX_MailboxSendReq(pCoeSendStored, COE_SERVICE) == 0)
 8001988:	4b11      	ldr	r3, [pc, #68]	@ (80019d0 <COE_ContinueInd+0x58>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2102      	movs	r1, #2
 800198e:	4618      	mov	r0, r3
 8001990:	f002 faea 	bl	8003f68 <MBX_MailboxSendReq>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d115      	bne.n	80019c6 <COE_ContinueInd+0x4e>
        {
            pCoeSendStored = 0;
 800199a:	4b0d      	ldr	r3, [pc, #52]	@ (80019d0 <COE_ContinueInd+0x58>)
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	e011      	b.n	80019c6 <COE_ContinueInd+0x4e>
    }
    else
    {
        /* send the next fragment of the last CoE service (only for SDO-Information possible) */
        /* in mailbox queue mode pMbx is always 0, so a mailbox buffer shall be get */
        pMbx = (TMBX MBXMEM *) APPL_AllocMailboxBuffer(SIZEOF(TMBX));
 80019a2:	2080      	movs	r0, #128	@ 0x80
 80019a4:	f009 fd76 	bl	800b494 <malloc>
 80019a8:	4603      	mov	r3, r0
 80019aa:	607b      	str	r3, [r7, #4]
        /* it shall be checked if a valid pointer was returned */
        if (pMbx == NULL)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d101      	bne.n	80019b6 <COE_ContinueInd+0x3e>
        {
            return MBXERR_NOMOREMEMORY;
 80019b2:	2307      	movs	r3, #7
 80019b4:	e008      	b.n	80019c8 <COE_ContinueInd+0x50>
        }
        else
        {
            /* copy the stored SDO-Info-Header in the request */
            MBXMEMCPY(pMbx, aSdoInfoHeader, SDO_INFO_HEADER_BYTE_SIZE);
 80019b6:	220e      	movs	r2, #14
 80019b8:	4906      	ldr	r1, [pc, #24]	@ (80019d4 <COE_ContinueInd+0x5c>)
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f009 fe6c 	bl	800b698 <memcpy>
            /* call SDOS_SdoInfoInd to generate and send the next fragment */
            SDOS_SdoInfoInd( (TSDOINFORMATION MBXMEM *) pMbx );
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f004 ffd3 	bl	800696c <SDOS_SdoInfoInd>
        }
    }

    return 0;
 80019c6:	2300      	movs	r3, #0
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	240004c4 	.word	0x240004c4
 80019d4:	24000644 	.word	0x24000644

080019d8 <ResetALEventMask>:
 \param    intMask        interrupt mask (disabled interrupt shall be zero)

 \brief    This function makes an logical and with the AL Event Mask register (0x204)
*////////////////////////////////////////////////////////////////////////////////////////
void ResetALEventMask(UINT16 intMask)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	80fb      	strh	r3, [r7, #6]
    UINT16 mask;
    HW_EscReadWord(mask, ESC_AL_EVENTMASK_OFFSET);
 80019e2:	f107 030e 	add.w	r3, r7, #14
 80019e6:	2202      	movs	r2, #2
 80019e8:	f44f 7101 	mov.w	r1, #516	@ 0x204
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7fe ffa3 	bl	8000938 <HW_EscRead>
    
    mask &= intMask;
 80019f2:	89fa      	ldrh	r2, [r7, #14]
 80019f4:	88fb      	ldrh	r3, [r7, #6]
 80019f6:	4013      	ands	r3, r2
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	81fb      	strh	r3, [r7, #14]


    DISABLE_ESC_INT();


    HW_EscWriteWord(mask, ESC_AL_EVENTMASK_OFFSET);
 80019fc:	f107 030e 	add.w	r3, r7, #14
 8001a00:	2202      	movs	r2, #2
 8001a02:	f44f 7101 	mov.w	r1, #516	@ 0x204
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7fe ffc6 	bl	8000998 <HW_EscWrite>
    ENABLE_ESC_INT();
}
 8001a0c:	bf00      	nop
 8001a0e:	3710      	adds	r7, #16
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <SetALEventMask>:
 \param    intMask        interrupt mask (enabled interrupt shall be one)

  \brief    This function makes an logical or with the AL Event Mask register (0x204)
*////////////////////////////////////////////////////////////////////////////////////////
void SetALEventMask(UINT16 intMask)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	80fb      	strh	r3, [r7, #6]
    UINT16 mask;
    HW_EscReadWord(mask, ESC_AL_EVENTMASK_OFFSET);
 8001a1e:	f107 030e 	add.w	r3, r7, #14
 8001a22:	2202      	movs	r2, #2
 8001a24:	f44f 7101 	mov.w	r1, #516	@ 0x204
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7fe ff85 	bl	8000938 <HW_EscRead>
    

    mask |= intMask;
 8001a2e:	89fa      	ldrh	r2, [r7, #14]
 8001a30:	88fb      	ldrh	r3, [r7, #6]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	81fb      	strh	r3, [r7, #14]

    DISABLE_ESC_INT();


    HW_EscWriteWord(mask, ESC_AL_EVENTMASK_OFFSET);
 8001a38:	f107 030e 	add.w	r3, r7, #14
 8001a3c:	2202      	movs	r2, #2
 8001a3e:	f44f 7101 	mov.w	r1, #516	@ 0x204
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7fe ffa8 	bl	8000998 <HW_EscWrite>
    ENABLE_ESC_INT();
}
 8001a48:	bf00      	nop
 8001a4a:	3710      	adds	r7, #16
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <UpdateEEPROMLoadedState>:
/**

\brief    This function reads the EEPROM loaded state
*////////////////////////////////////////////////////////////////////////////////////////
void UpdateEEPROMLoadedState(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
    UINT16 TmpVar = 0;
 8001a56:	2300      	movs	r3, #0
 8001a58:	80fb      	strh	r3, [r7, #6]
    //read EEPROM loaded information
    HW_EscReadWord(TmpVar, ESC_EEPROM_CONTROL_OFFSET);
 8001a5a:	1dbb      	adds	r3, r7, #6
 8001a5c:	2202      	movs	r2, #2
 8001a5e:	f240 5102 	movw	r1, #1282	@ 0x502
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7fe ff68 	bl	8000938 <HW_EscRead>
    TmpVar = SWAPWORD(TmpVar);
 8001a68:	88fb      	ldrh	r3, [r7, #6]
 8001a6a:	80fb      	strh	r3, [r7, #6]


    if (((TmpVar & ESC_EEPROM_ERROR_CRC) > 0)
 8001a6c:	88fb      	ldrh	r3, [r7, #6]
 8001a6e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	dc04      	bgt.n	8001a80 <UpdateEEPROMLoadedState+0x30>
        || ((TmpVar & ESC_EEPROM_ERROR_LOAD) > 0))
 8001a76:	88fb      	ldrh	r3, [r7, #6]
 8001a78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	dd03      	ble.n	8001a88 <UpdateEEPROMLoadedState+0x38>
    {
        EepromLoaded = FALSE;
 8001a80:	4b05      	ldr	r3, [pc, #20]	@ (8001a98 <UpdateEEPROMLoadedState+0x48>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	701a      	strb	r2, [r3, #0]
 8001a86:	e003      	b.n	8001a90 <UpdateEEPROMLoadedState+0x40>
    }
    else
    {
        EepromLoaded = TRUE;
 8001a88:	4b03      	ldr	r3, [pc, #12]	@ (8001a98 <UpdateEEPROMLoadedState+0x48>)
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	701a      	strb	r2, [r3, #0]
    }
}
 8001a8e:	bf00      	nop
 8001a90:	bf00      	nop
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	24000514 	.word	0x24000514

08001a9c <GetSyncMan>:
 \brief    This function is called to read the SYNC Manager channel descriptions of the
             process data SYNC Managers.
*////////////////////////////////////////////////////////////////////////////////////////

TSYNCMAN ESCMEM * GetSyncMan( UINT8 channel )
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	71fb      	strb	r3, [r7, #7]
    HW_EscRead((MEM_ADDR *)&SyncManInfo, ESC_SYNCMAN_REG_OFFSET + (channel * SIZEOF_SM_REGISTER), SIZEOF_SM_REGISTER );
 8001aa6:	79fb      	ldrb	r3, [r7, #7]
 8001aa8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	00db      	lsls	r3, r3, #3
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	2208      	movs	r2, #8
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4804      	ldr	r0, [pc, #16]	@ (8001ac8 <GetSyncMan+0x2c>)
 8001ab8:	f7fe ff3e 	bl	8000938 <HW_EscRead>



    return &SyncManInfo;
 8001abc:	4b02      	ldr	r3, [pc, #8]	@ (8001ac8 <GetSyncMan+0x2c>)
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	2400050c 	.word	0x2400050c

08001acc <DisableSyncManChannel>:
 \param     channel        Sync Manager channel

 \brief    This function disables a Sync Manager channel
*////////////////////////////////////////////////////////////////////////////////////////
void DisableSyncManChannel(UINT8 channel)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	71fb      	strb	r3, [r7, #7]
    UINT16 Offset;
    VARVOLATILE UINT8 smStatus = SM_SETTING_PDI_DISABLE;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	737b      	strb	r3, [r7, #13]
    Offset = (ESC_SM_PDICONTROL_OFFSET + (SIZEOF_SM_REGISTER*channel));
 8001ada:	79fb      	ldrb	r3, [r7, #7]
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	f603 0307 	addw	r3, r3, #2055	@ 0x807
 8001ae6:	81fb      	strh	r3, [r7, #14]

    HW_EscWriteByte(smStatus,Offset);
 8001ae8:	89f9      	ldrh	r1, [r7, #14]
 8001aea:	f107 030d 	add.w	r3, r7, #13
 8001aee:	2201      	movs	r2, #1
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7fe ff51 	bl	8000998 <HW_EscWrite>
    
    /*wait until SyncManager is disabled*/
    do
    {
        HW_EscReadByte(smStatus, Offset);
 8001af6:	89f9      	ldrh	r1, [r7, #14]
 8001af8:	f107 030d 	add.w	r3, r7, #13
 8001afc:	2201      	movs	r2, #1
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7fe ff1a 	bl	8000938 <HW_EscRead>
    }while(!(smStatus & SM_SETTING_PDI_DISABLE));
 8001b04:	7b7b      	ldrb	r3, [r7, #13]
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d0f2      	beq.n	8001af6 <DisableSyncManChannel+0x2a>
}
 8001b10:	bf00      	nop
 8001b12:	bf00      	nop
 8001b14:	3710      	adds	r7, #16
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <EnableSyncManChannel>:
 \param     channel        Sync Manager channel

 \brief    This function enables a Sync Manager channel
*////////////////////////////////////////////////////////////////////////////////////////
void EnableSyncManChannel(UINT8 channel)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b084      	sub	sp, #16
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	4603      	mov	r3, r0
 8001b22:	71fb      	strb	r3, [r7, #7]
    UINT16 Offset;
    VARVOLATILE UINT8 smStatus = 0x00;
 8001b24:	2300      	movs	r3, #0
 8001b26:	737b      	strb	r3, [r7, #13]
    Offset = (ESC_SM_PDICONTROL_OFFSET + (SIZEOF_SM_REGISTER*channel));
 8001b28:	79fb      	ldrb	r3, [r7, #7]
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	00db      	lsls	r3, r3, #3
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	f603 0307 	addw	r3, r3, #2055	@ 0x807
 8001b34:	81fb      	strh	r3, [r7, #14]

    HW_EscWriteByte(smStatus,Offset);
 8001b36:	89f9      	ldrh	r1, [r7, #14]
 8001b38:	f107 030d 	add.w	r3, r7, #13
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7fe ff2a 	bl	8000998 <HW_EscWrite>
    
    /*wait until SyncManager is enabled*/
    do
    {
        HW_EscReadByte(smStatus,Offset);
 8001b44:	89f9      	ldrh	r1, [r7, #14]
 8001b46:	f107 030d 	add.w	r3, r7, #13
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7fe fef3 	bl	8000938 <HW_EscRead>
    }while((smStatus & SM_SETTING_PDI_DISABLE));
 8001b52:	7b7b      	ldrb	r3, [r7, #13]
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1f2      	bne.n	8001b44 <EnableSyncManChannel+0x2a>
}
 8001b5e:	bf00      	nop
 8001b60:	bf00      	nop
 8001b62:	3710      	adds	r7, #16
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <CheckSmSettings>:
 \brief    This function checks all SM channels

*////////////////////////////////////////////////////////////////////////////////////////

UINT8    CheckSmSettings(UINT8 maxChannel)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	71fb      	strb	r3, [r7, #7]
    UINT8 i;
    UINT8 result = 0;
 8001b72:	2300      	movs	r3, #0
 8001b74:	75bb      	strb	r3, [r7, #22]
    TSYNCMAN ESCMEM *pSyncMan;
    UINT16 SMLength = 0;
 8001b76:	2300      	movs	r3, #0
 8001b78:	82bb      	strh	r3, [r7, #20]
    UINT16 SMAddress = 0;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	827b      	strh	r3, [r7, #18]


        //Check if max address defines are within the available ESC address range
        if ((nMaxEscAddress < MAX_PD_WRITE_ADDRESS)
 8001b7e:	4b91      	ldr	r3, [pc, #580]	@ (8001dc4 <CheckSmSettings+0x25c>)
 8001b80:	881b      	ldrh	r3, [r3, #0]
 8001b82:	f642 72fe 	movw	r2, #12286	@ 0x2ffe
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d911      	bls.n	8001bae <CheckSmSettings+0x46>
            || (nMaxEscAddress < MAX_PD_READ_ADDRESS)
 8001b8a:	4b8e      	ldr	r3, [pc, #568]	@ (8001dc4 <CheckSmSettings+0x25c>)
 8001b8c:	881b      	ldrh	r3, [r3, #0]
 8001b8e:	f642 72fe 	movw	r2, #12286	@ 0x2ffe
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d90b      	bls.n	8001bae <CheckSmSettings+0x46>
            || (nMaxEscAddress < MAX_MBX_WRITE_ADDRESS)
 8001b96:	4b8b      	ldr	r3, [pc, #556]	@ (8001dc4 <CheckSmSettings+0x25c>)
 8001b98:	881b      	ldrh	r3, [r3, #0]
 8001b9a:	f642 72fe 	movw	r2, #12286	@ 0x2ffe
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d905      	bls.n	8001bae <CheckSmSettings+0x46>
            || (nMaxEscAddress < MAX_MBX_READ_ADDRESS))
 8001ba2:	4b88      	ldr	r3, [pc, #544]	@ (8001dc4 <CheckSmSettings+0x25c>)
 8001ba4:	881b      	ldrh	r3, [r3, #0]
 8001ba6:	f642 72fe 	movw	r2, #12286	@ 0x2ffe
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d801      	bhi.n	8001bb2 <CheckSmSettings+0x4a>
        {
            /*The defines for maximum SM addresses are invalid for the used ESC (change the defines in the file ecat_def.h or the SSC Tool)
            It may be also required to adapt the SM settings in the ESI file*/


                return ALSTATUSCODE_NOVALIDFIRMWARE;
 8001bae:	2314      	movs	r3, #20
 8001bb0:	e186      	b.n	8001ec0 <CheckSmSettings+0x358>
        }

    /* check the Sync Manager Parameter for the Receive Mailbox (Sync Manager Channel 0) */
    pSyncMan = GetSyncMan(MAILBOX_WRITE);
 8001bb2:	2000      	movs	r0, #0
 8001bb4:	f7ff ff72 	bl	8001a9c <GetSyncMan>
 8001bb8:	60f8      	str	r0, [r7, #12]

    SMLength = pSyncMan->Length;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	885b      	ldrh	r3, [r3, #2]
 8001bbe:	82bb      	strh	r3, [r7, #20]
    SMAddress = pSyncMan->PhysicalStartAddress;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	881b      	ldrh	r3, [r3, #0]
 8001bc4:	827b      	strh	r3, [r7, #18]



    if (!(pSyncMan->Settings[SM_SETTING_ACTIVATE_OFFSET] & SM_SETTING_ENABLE_VALUE))
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	799b      	ldrb	r3, [r3, #6]
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d102      	bne.n	8001bd8 <CheckSmSettings+0x70>
    {
        /* receive mailbox is not enabled */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8001bd2:	2316      	movs	r3, #22
 8001bd4:	75bb      	strb	r3, [r7, #22]
 8001bd6:	e02a      	b.n	8001c2e <CheckSmSettings+0xc6>
    }
    else if ((pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_DIRECTION_MASK) != SM_SETTING_DIRECTION_WRITE_VALUE)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	791b      	ldrb	r3, [r3, #4]
 8001bdc:	f003 030c 	and.w	r3, r3, #12
 8001be0:	2b04      	cmp	r3, #4
 8001be2:	d002      	beq.n	8001bea <CheckSmSettings+0x82>
    {
        /* receive mailbox is not writable by the master*/
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8001be4:	2316      	movs	r3, #22
 8001be6:	75bb      	strb	r3, [r7, #22]
 8001be8:	e021      	b.n	8001c2e <CheckSmSettings+0xc6>
    }
    else if ((pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_MASK) != SM_SETTING_MODE_ONE_BUFFER_VALUE)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	791b      	ldrb	r3, [r3, #4]
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d102      	bne.n	8001bfc <CheckSmSettings+0x94>
    {
        /* receive mailbox is not in one buffer mode */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8001bf6:	2316      	movs	r3, #22
 8001bf8:	75bb      	strb	r3, [r7, #22]
 8001bfa:	e018      	b.n	8001c2e <CheckSmSettings+0xc6>
    }
    else if (SMLength < MIN_MBX_SIZE)
 8001bfc:	8abb      	ldrh	r3, [r7, #20]
 8001bfe:	2b23      	cmp	r3, #35	@ 0x23
 8001c00:	d802      	bhi.n	8001c08 <CheckSmSettings+0xa0>
    {
        /* receive mailbox size is too small */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8001c02:	2316      	movs	r3, #22
 8001c04:	75bb      	strb	r3, [r7, #22]
 8001c06:	e012      	b.n	8001c2e <CheckSmSettings+0xc6>
    }
    else if (SMLength > MAX_MBX_SIZE)
 8001c08:	8abb      	ldrh	r3, [r7, #20]
 8001c0a:	2b80      	cmp	r3, #128	@ 0x80
 8001c0c:	d902      	bls.n	8001c14 <CheckSmSettings+0xac>
    {
        /* receive mailbox size is too great */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8001c0e:	2316      	movs	r3, #22
 8001c10:	75bb      	strb	r3, [r7, #22]
 8001c12:	e00c      	b.n	8001c2e <CheckSmSettings+0xc6>
    }
    else if (SMAddress < MIN_MBX_WRITE_ADDRESS)
 8001c14:	8a7b      	ldrh	r3, [r7, #18]
 8001c16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c1a:	d202      	bcs.n	8001c22 <CheckSmSettings+0xba>
    {
        /* receive mailbox address is too small */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8001c1c:	2316      	movs	r3, #22
 8001c1e:	75bb      	strb	r3, [r7, #22]
 8001c20:	e005      	b.n	8001c2e <CheckSmSettings+0xc6>
    }
    else if (SMAddress > MAX_MBX_WRITE_ADDRESS)
 8001c22:	8a7b      	ldrh	r3, [r7, #18]
 8001c24:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001c28:	d301      	bcc.n	8001c2e <CheckSmSettings+0xc6>
    {
        /* receive mailbox address is too great */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8001c2a:	2316      	movs	r3, #22
 8001c2c:	75bb      	strb	r3, [r7, #22]
    }


    if ( result == 0 )
 8001c2e:	7dbb      	ldrb	r3, [r7, #22]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d13d      	bne.n	8001cb0 <CheckSmSettings+0x148>
    {
        /* check the Sync Manager Parameter for the Send Mailbox (Sync Manager Channel 1) */
        pSyncMan = GetSyncMan(MAILBOX_READ);
 8001c34:	2001      	movs	r0, #1
 8001c36:	f7ff ff31 	bl	8001a9c <GetSyncMan>
 8001c3a:	60f8      	str	r0, [r7, #12]

    SMLength = pSyncMan->Length;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	885b      	ldrh	r3, [r3, #2]
 8001c40:	82bb      	strh	r3, [r7, #20]
    SMAddress = pSyncMan->PhysicalStartAddress;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	881b      	ldrh	r3, [r3, #0]
 8001c46:	827b      	strh	r3, [r7, #18]


    if (!(pSyncMan->Settings[SM_SETTING_ACTIVATE_OFFSET] & SM_SETTING_ENABLE_VALUE))
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	799b      	ldrb	r3, [r3, #6]
 8001c4c:	f003 0301 	and.w	r3, r3, #1
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d102      	bne.n	8001c5a <CheckSmSettings+0xf2>
    {
        /* send mailbox is not enabled */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8001c54:	2316      	movs	r3, #22
 8001c56:	75bb      	strb	r3, [r7, #22]
 8001c58:	e02a      	b.n	8001cb0 <CheckSmSettings+0x148>
    }
    else if ((pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_DIRECTION_MASK) != SM_SETTING_DIRECTION_READ_VALUE)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	791b      	ldrb	r3, [r3, #4]
 8001c5e:	f003 030c 	and.w	r3, r3, #12
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d002      	beq.n	8001c6c <CheckSmSettings+0x104>
    {
        /* receive mailbox is not readable by the master*/
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8001c66:	2316      	movs	r3, #22
 8001c68:	75bb      	strb	r3, [r7, #22]
 8001c6a:	e021      	b.n	8001cb0 <CheckSmSettings+0x148>
    }
    else if ((pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_MASK) != SM_SETTING_MODE_ONE_BUFFER_VALUE)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	791b      	ldrb	r3, [r3, #4]
 8001c70:	f003 0302 	and.w	r3, r3, #2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d102      	bne.n	8001c7e <CheckSmSettings+0x116>
    {
        /* receive mailbox is not in one buffer mode */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8001c78:	2316      	movs	r3, #22
 8001c7a:	75bb      	strb	r3, [r7, #22]
 8001c7c:	e018      	b.n	8001cb0 <CheckSmSettings+0x148>
    }
    else if (SMLength < MIN_MBX_SIZE)
 8001c7e:	8abb      	ldrh	r3, [r7, #20]
 8001c80:	2b23      	cmp	r3, #35	@ 0x23
 8001c82:	d802      	bhi.n	8001c8a <CheckSmSettings+0x122>
    {
        /* send mailbox size is too small */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8001c84:	2316      	movs	r3, #22
 8001c86:	75bb      	strb	r3, [r7, #22]
 8001c88:	e012      	b.n	8001cb0 <CheckSmSettings+0x148>
    }
    else if (SMLength > MAX_MBX_SIZE)
 8001c8a:	8abb      	ldrh	r3, [r7, #20]
 8001c8c:	2b80      	cmp	r3, #128	@ 0x80
 8001c8e:	d902      	bls.n	8001c96 <CheckSmSettings+0x12e>
    {
        /* send mailbox size is too great */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8001c90:	2316      	movs	r3, #22
 8001c92:	75bb      	strb	r3, [r7, #22]
 8001c94:	e00c      	b.n	8001cb0 <CheckSmSettings+0x148>
    }
    else if (SMAddress < MIN_MBX_READ_ADDRESS)
 8001c96:	8a7b      	ldrh	r3, [r7, #18]
 8001c98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c9c:	d202      	bcs.n	8001ca4 <CheckSmSettings+0x13c>
    {
        /* send mailbox address is too small */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8001c9e:	2316      	movs	r3, #22
 8001ca0:	75bb      	strb	r3, [r7, #22]
 8001ca2:	e005      	b.n	8001cb0 <CheckSmSettings+0x148>
    }
    else if (SMAddress > MAX_MBX_READ_ADDRESS)
 8001ca4:	8a7b      	ldrh	r3, [r7, #18]
 8001ca6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001caa:	d301      	bcc.n	8001cb0 <CheckSmSettings+0x148>
    {
        /* send mailbox address is too great */
        result = ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8001cac:	2316      	movs	r3, #22
 8001cae:	75bb      	strb	r3, [r7, #22]
    }
    }

    if ( result == 0 && maxChannel > PROCESS_DATA_IN )
 8001cb0:	7dbb      	ldrb	r3, [r7, #22]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d169      	bne.n	8001d8a <CheckSmSettings+0x222>
 8001cb6:	79fb      	ldrb	r3, [r7, #7]
 8001cb8:	2b03      	cmp	r3, #3
 8001cba:	d966      	bls.n	8001d8a <CheckSmSettings+0x222>
    {
        /* b3BufferMode is only set, if inputs and outputs are running in 3-Buffer-Mode when leaving this function */
        b3BufferMode = TRUE;
 8001cbc:	4b42      	ldr	r3, [pc, #264]	@ (8001dc8 <CheckSmSettings+0x260>)
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	701a      	strb	r2, [r3, #0]
        /* check the Sync Manager Parameter for the Inputs (Sync Manager Channel 2 (0 in case if no mailbox is supported)) */
        pSyncMan = GetSyncMan(PROCESS_DATA_IN);
 8001cc2:	2003      	movs	r0, #3
 8001cc4:	f7ff feea 	bl	8001a9c <GetSyncMan>
 8001cc8:	60f8      	str	r0, [r7, #12]

    SMLength = pSyncMan->Length;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	885b      	ldrh	r3, [r3, #2]
 8001cce:	82bb      	strh	r3, [r7, #20]
    SMAddress = pSyncMan->PhysicalStartAddress;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	881b      	ldrh	r3, [r3, #0]
 8001cd4:	827b      	strh	r3, [r7, #18]



    if ((pSyncMan->Settings[SM_SETTING_ACTIVATE_OFFSET] & SM_SETTING_ENABLE_VALUE) != 0 && SMLength == 0)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	799b      	ldrb	r3, [r3, #6]
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d005      	beq.n	8001cee <CheckSmSettings+0x186>
 8001ce2:	8abb      	ldrh	r3, [r7, #20]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d102      	bne.n	8001cee <CheckSmSettings+0x186>
    {
        /* the SM3 size is 0 and the SM3 is active */
        result = SYNCMANCHSETTINGS + 1;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	75bb      	strb	r3, [r7, #22]
 8001cec:	e048      	b.n	8001d80 <CheckSmSettings+0x218>
    }
        else if (pSyncMan->Settings[SM_SETTING_ACTIVATE_OFFSET] & SM_SETTING_ENABLE_VALUE)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	799b      	ldrb	r3, [r3, #6]
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d039      	beq.n	8001d6e <CheckSmSettings+0x206>
        {
            /* Sync Manager Channel 3 is active, input size has to greater 0 */
                if (SMLength != nPdInputSize || nPdInputSize == 0 || SMLength > MAX_PD_INPUT_SIZE)
 8001cfa:	4b34      	ldr	r3, [pc, #208]	@ (8001dcc <CheckSmSettings+0x264>)
 8001cfc:	881b      	ldrh	r3, [r3, #0]
 8001cfe:	8aba      	ldrh	r2, [r7, #20]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d106      	bne.n	8001d12 <CheckSmSettings+0x1aa>
 8001d04:	4b31      	ldr	r3, [pc, #196]	@ (8001dcc <CheckSmSettings+0x264>)
 8001d06:	881b      	ldrh	r3, [r3, #0]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d002      	beq.n	8001d12 <CheckSmSettings+0x1aa>
 8001d0c:	8abb      	ldrh	r3, [r7, #20]
 8001d0e:	2b38      	cmp	r3, #56	@ 0x38
 8001d10:	d902      	bls.n	8001d18 <CheckSmSettings+0x1b0>
                {
                    /* sizes don't match */
                    result = SYNCMANCHSIZE + 1;
 8001d12:	2301      	movs	r3, #1
 8001d14:	75bb      	strb	r3, [r7, #22]
 8001d16:	e033      	b.n	8001d80 <CheckSmSettings+0x218>
                }
                else
                {
                    /* sizes matches */
                    if ((pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_DIRECTION_MASK) == SM_SETTING_DIRECTION_READ_VALUE)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	791b      	ldrb	r3, [r3, #4]
 8001d1c:	f003 030c 	and.w	r3, r3, #12
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d121      	bne.n	8001d68 <CheckSmSettings+0x200>
                    {
                        /* settings match */
                        if (((nAlStatus == STATE_PREOP) && (SMAddress >= MIN_PD_READ_ADDRESS) && (SMAddress <= MAX_PD_READ_ADDRESS))
 8001d24:	4b2a      	ldr	r3, [pc, #168]	@ (8001dd0 <CheckSmSettings+0x268>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d107      	bne.n	8001d3c <CheckSmSettings+0x1d4>
 8001d2c:	8a7b      	ldrh	r3, [r7, #18]
 8001d2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d32:	d303      	bcc.n	8001d3c <CheckSmSettings+0x1d4>
 8001d34:	8a7b      	ldrh	r3, [r7, #18]
 8001d36:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001d3a:	d308      	bcc.n	8001d4e <CheckSmSettings+0x1e6>
                            || ((nAlStatus != STATE_PREOP) && (SMAddress == nEscAddrInputData))
 8001d3c:	4b24      	ldr	r3, [pc, #144]	@ (8001dd0 <CheckSmSettings+0x268>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d00e      	beq.n	8001d62 <CheckSmSettings+0x1fa>
 8001d44:	4b23      	ldr	r3, [pc, #140]	@ (8001dd4 <CheckSmSettings+0x26c>)
 8001d46:	881b      	ldrh	r3, [r3, #0]
 8001d48:	8a7a      	ldrh	r2, [r7, #18]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d109      	bne.n	8001d62 <CheckSmSettings+0x1fa>
                            )
                        {
                            /* addresses match */

                                if ((pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_MASK) == SM_SETTING_MODE_ONE_BUFFER_VALUE)
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	791b      	ldrb	r3, [r3, #4]
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d012      	beq.n	8001d80 <CheckSmSettings+0x218>
                                {
                                    /* inputs are running in 1-Buffer-Mode, reset flag b3BufferMode */
                                    b3BufferMode = FALSE;
 8001d5a:	4b1b      	ldr	r3, [pc, #108]	@ (8001dc8 <CheckSmSettings+0x260>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	701a      	strb	r2, [r3, #0]
                                if ((pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_MASK) == SM_SETTING_MODE_ONE_BUFFER_VALUE)
 8001d60:	e00e      	b.n	8001d80 <CheckSmSettings+0x218>
                                }
                        }
                        else
                        {
                            /* input address is out of the allowed area or has changed in SAFEOP or OP */
                            result = SYNCMANCHADDRESS + 1;
 8001d62:	2302      	movs	r3, #2
 8001d64:	75bb      	strb	r3, [r7, #22]
 8001d66:	e00b      	b.n	8001d80 <CheckSmSettings+0x218>
                        }
                    }
                    else
                    {
                        /* input settings do not match */
                        result = SYNCMANCHSETTINGS + 1;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	75bb      	strb	r3, [r7, #22]
 8001d6c:	e008      	b.n	8001d80 <CheckSmSettings+0x218>
                    }
                }
        }
        else if (SMLength != 0 || nPdInputSize != 0)
 8001d6e:	8abb      	ldrh	r3, [r7, #20]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d103      	bne.n	8001d7c <CheckSmSettings+0x214>
 8001d74:	4b15      	ldr	r3, [pc, #84]	@ (8001dcc <CheckSmSettings+0x264>)
 8001d76:	881b      	ldrh	r3, [r3, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <CheckSmSettings+0x218>
        {
            /* input size is not zero although the SM3 channel is not enabled */
            result = SYNCMANCHSIZE + 1;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	75bb      	strb	r3, [r7, #22]
        }



        if ( result != 0 )
 8001d80:	7dbb      	ldrb	r3, [r7, #22]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <CheckSmSettings+0x222>
        {
            result = ALSTATUSCODE_INVALIDSMINCFG;
 8001d86:	231e      	movs	r3, #30
 8001d88:	75bb      	strb	r3, [r7, #22]
        }
    }


//    else
    if (result == 0 && maxChannel > PROCESS_DATA_OUT)
 8001d8a:	7dbb      	ldrb	r3, [r7, #22]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d17f      	bne.n	8001e90 <CheckSmSettings+0x328>
 8001d90:	79fb      	ldrb	r3, [r7, #7]
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d97c      	bls.n	8001e90 <CheckSmSettings+0x328>
    {
        /* check the Sync Manager Parameter for the Outputs (Sync Manager Channel 2) */
        pSyncMan = GetSyncMan(PROCESS_DATA_OUT);
 8001d96:	2002      	movs	r0, #2
 8001d98:	f7ff fe80 	bl	8001a9c <GetSyncMan>
 8001d9c:	60f8      	str	r0, [r7, #12]

    SMLength = pSyncMan->Length;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	885b      	ldrh	r3, [r3, #2]
 8001da2:	82bb      	strh	r3, [r7, #20]
    SMAddress = pSyncMan->PhysicalStartAddress;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	881b      	ldrh	r3, [r3, #0]
 8001da8:	827b      	strh	r3, [r7, #18]



    if ((pSyncMan->Settings[SM_SETTING_ACTIVATE_OFFSET] & SM_SETTING_ENABLE_VALUE) != 0 && SMLength == 0)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	799b      	ldrb	r3, [r3, #6]
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d010      	beq.n	8001dd8 <CheckSmSettings+0x270>
 8001db6:	8abb      	ldrh	r3, [r7, #20]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d10d      	bne.n	8001dd8 <CheckSmSettings+0x270>
    {
        /* the SM2 size is 0 and the SM2 is active */
        result = SYNCMANCHSETTINGS + 1;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	75bb      	strb	r3, [r7, #22]
 8001dc0:	e061      	b.n	8001e86 <CheckSmSettings+0x31e>
 8001dc2:	bf00      	nop
 8001dc4:	240004fa 	.word	0x240004fa
 8001dc8:	240004ea 	.word	0x240004ea
 8001dcc:	240004f4 	.word	0x240004f4
 8001dd0:	240004fc 	.word	0x240004fc
 8001dd4:	24000502 	.word	0x24000502
    }
        else if (pSyncMan->Settings[SM_SETTING_ACTIVATE_OFFSET] & SM_SETTING_ENABLE_VALUE)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	799b      	ldrb	r3, [r3, #6]
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d047      	beq.n	8001e74 <CheckSmSettings+0x30c>
        {
            /* Sync Manager Channel 2 is active, output size has to greater 0 */
            if ( SMLength == nPdOutputSize && nPdOutputSize != 0 && SMLength <= ((UINT16)MAX_PD_OUTPUT_SIZE))
 8001de4:	4b38      	ldr	r3, [pc, #224]	@ (8001ec8 <CheckSmSettings+0x360>)
 8001de6:	881b      	ldrh	r3, [r3, #0]
 8001de8:	8aba      	ldrh	r2, [r7, #20]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d13f      	bne.n	8001e6e <CheckSmSettings+0x306>
 8001dee:	4b36      	ldr	r3, [pc, #216]	@ (8001ec8 <CheckSmSettings+0x360>)
 8001df0:	881b      	ldrh	r3, [r3, #0]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d03b      	beq.n	8001e6e <CheckSmSettings+0x306>
 8001df6:	8abb      	ldrh	r3, [r7, #20]
 8001df8:	2b04      	cmp	r3, #4
 8001dfa:	d838      	bhi.n	8001e6e <CheckSmSettings+0x306>
            {
                /* sizes match */
                if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_DIRECTION_MASK) == SM_SETTING_DIRECTION_WRITE_VALUE )
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	791b      	ldrb	r3, [r3, #4]
 8001e00:	f003 030c 	and.w	r3, r3, #12
 8001e04:	2b04      	cmp	r3, #4
 8001e06:	d12e      	bne.n	8001e66 <CheckSmSettings+0x2fe>
                {
                    /* settings match */
                    if ( ( ( nAlStatus == STATE_PREOP )&&( SMAddress >= MIN_PD_WRITE_ADDRESS )&&( SMAddress <= MAX_PD_WRITE_ADDRESS ) )
 8001e08:	4b30      	ldr	r3, [pc, #192]	@ (8001ecc <CheckSmSettings+0x364>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d107      	bne.n	8001e20 <CheckSmSettings+0x2b8>
 8001e10:	8a7b      	ldrh	r3, [r7, #18]
 8001e12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e16:	d303      	bcc.n	8001e20 <CheckSmSettings+0x2b8>
 8001e18:	8a7b      	ldrh	r3, [r7, #18]
 8001e1a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8001e1e:	d308      	bcc.n	8001e32 <CheckSmSettings+0x2ca>
                       ||( ( nAlStatus != STATE_PREOP )&&( SMAddress == nEscAddrOutputData ) )
 8001e20:	4b2a      	ldr	r3, [pc, #168]	@ (8001ecc <CheckSmSettings+0x364>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d01b      	beq.n	8001e60 <CheckSmSettings+0x2f8>
 8001e28:	4b29      	ldr	r3, [pc, #164]	@ (8001ed0 <CheckSmSettings+0x368>)
 8001e2a:	881b      	ldrh	r3, [r3, #0]
 8001e2c:	8a7a      	ldrh	r2, [r7, #18]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d116      	bne.n	8001e60 <CheckSmSettings+0x2f8>
                        )
                    {
                        /* addresses match */
                        {
                            /* check, if watchdog trigger is enabled */
                            if (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_WATCHDOG_VALUE)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	791b      	ldrb	r3, [r3, #4]
 8001e36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <CheckSmSettings+0x2de>
                            {
                                bWdTrigger = TRUE;
 8001e3e:	4b25      	ldr	r3, [pc, #148]	@ (8001ed4 <CheckSmSettings+0x36c>)
 8001e40:	2201      	movs	r2, #1
 8001e42:	701a      	strb	r2, [r3, #0]
 8001e44:	e002      	b.n	8001e4c <CheckSmSettings+0x2e4>
                            }
                            else
                            {
                                bWdTrigger = FALSE;
 8001e46:	4b23      	ldr	r3, [pc, #140]	@ (8001ed4 <CheckSmSettings+0x36c>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	701a      	strb	r2, [r3, #0]
                            }

                            if ((pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_MASK) == SM_SETTING_MODE_ONE_BUFFER_VALUE)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	791b      	ldrb	r3, [r3, #4]
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d009      	beq.n	8001e6c <CheckSmSettings+0x304>
                            {
                                /* outputs are running in 1-Buffer-Mode, reset flag b3BufferMode */
                                b3BufferMode = FALSE;
 8001e58:	4b1f      	ldr	r3, [pc, #124]	@ (8001ed8 <CheckSmSettings+0x370>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	701a      	strb	r2, [r3, #0]
                            if ((pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_MASK) == SM_SETTING_MODE_ONE_BUFFER_VALUE)
 8001e5e:	e005      	b.n	8001e6c <CheckSmSettings+0x304>
                        }
                    }
                    else
                    {
                        /* output address is out of the allowed area or has changed in SAFEOP or OP */
                        result = SYNCMANCHADDRESS + 1;
 8001e60:	2302      	movs	r3, #2
 8001e62:	75bb      	strb	r3, [r7, #22]
                if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_DIRECTION_MASK) == SM_SETTING_DIRECTION_WRITE_VALUE )
 8001e64:	e00f      	b.n	8001e86 <CheckSmSettings+0x31e>
                    }
                }
                else
                {
                    /* output settings do not match */
                    result = SYNCMANCHSETTINGS + 1;
 8001e66:	2303      	movs	r3, #3
 8001e68:	75bb      	strb	r3, [r7, #22]
                if ( (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_DIRECTION_MASK) == SM_SETTING_DIRECTION_WRITE_VALUE )
 8001e6a:	e00c      	b.n	8001e86 <CheckSmSettings+0x31e>
 8001e6c:	e00b      	b.n	8001e86 <CheckSmSettings+0x31e>
                }
            }
            else
            {
                /* output sizes don't match */
                result = SYNCMANCHSIZE + 1;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	75bb      	strb	r3, [r7, #22]
 8001e72:	e008      	b.n	8001e86 <CheckSmSettings+0x31e>
            }
        }
        else if (SMLength != 0 || nPdOutputSize != 0)
 8001e74:	8abb      	ldrh	r3, [r7, #20]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d103      	bne.n	8001e82 <CheckSmSettings+0x31a>
 8001e7a:	4b13      	ldr	r3, [pc, #76]	@ (8001ec8 <CheckSmSettings+0x360>)
 8001e7c:	881b      	ldrh	r3, [r3, #0]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <CheckSmSettings+0x31e>
        {
            /* output size is not zero although the SM2 channel is not enabled */
            result = SYNCMANCHSIZE + 1;
 8001e82:	2301      	movs	r3, #1
 8001e84:	75bb      	strb	r3, [r7, #22]
        }

        if ( result != 0 )
 8001e86:	7dbb      	ldrb	r3, [r7, #22]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <CheckSmSettings+0x328>
        {
            result = ALSTATUSCODE_INVALIDSMOUTCFG;
 8001e8c:	231d      	movs	r3, #29
 8001e8e:	75bb      	strb	r3, [r7, #22]
        }
    }


    if ( result == 0 )
 8001e90:	7dbb      	ldrb	r3, [r7, #22]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d113      	bne.n	8001ebe <CheckSmSettings+0x356>
    {
        /* the Enable-Byte of the rest of the SM channels has to be read to acknowledge the SM-Change-Interrupt */
        for (i = maxChannel; i < nMaxSyncMan; i++)
 8001e96:	79fb      	ldrb	r3, [r7, #7]
 8001e98:	75fb      	strb	r3, [r7, #23]
 8001e9a:	e00b      	b.n	8001eb4 <CheckSmSettings+0x34c>
        {
            pSyncMan = GetSyncMan(i);
 8001e9c:	7dfb      	ldrb	r3, [r7, #23]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff fdfc 	bl	8001a9c <GetSyncMan>
 8001ea4:	60f8      	str	r0, [r7, #12]
            SMActivate = pSyncMan->Settings[SM_SETTING_ACTIVATE_OFFSET];
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	799a      	ldrb	r2, [r3, #6]
 8001eaa:	4b0c      	ldr	r3, [pc, #48]	@ (8001edc <CheckSmSettings+0x374>)
 8001eac:	701a      	strb	r2, [r3, #0]
        for (i = maxChannel; i < nMaxSyncMan; i++)
 8001eae:	7dfb      	ldrb	r3, [r7, #23]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	75fb      	strb	r3, [r7, #23]
 8001eb4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee0 <CheckSmSettings+0x378>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	7dfa      	ldrb	r2, [r7, #23]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d3ee      	bcc.n	8001e9c <CheckSmSettings+0x334>
        }
    }
    return result;
 8001ebe:	7dbb      	ldrb	r3, [r7, #22]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3718      	adds	r7, #24
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	240004f6 	.word	0x240004f6
 8001ecc:	240004fc 	.word	0x240004fc
 8001ed0:	24000500 	.word	0x24000500
 8001ed4:	240004cb 	.word	0x240004cb
 8001ed8:	240004ea 	.word	0x240004ea
 8001edc:	24000509 	.word	0x24000509
 8001ee0:	240004f8 	.word	0x240004f8

08001ee4 <StartInputHandler>:
 \brief  and the AL Event Mask register will be set

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 StartInputHandler(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08e      	sub	sp, #56	@ 0x38
 8001ee8:	af00      	add	r7, sp, #0
    TSYNCMAN ESCMEM * pSyncMan;

    UINT8        dcControl;

    UINT16     wdiv = 0;
 8001eea:	2300      	movs	r3, #0
 8001eec:	823b      	strh	r3, [r7, #16]
    UINT16     wd = 0;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	81fb      	strh	r3, [r7, #14]
    UINT32     cycleTimeSync0 = 0; /* Sync0 cycle time */
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60bb      	str	r3, [r7, #8]
    UINT32     shiftTimeSync1 = 0; /* Delay between the Sync0 and Sycn1 signal. A new Sync1 cycle starts on the next Sync0 signal after Sync1 signal.*/
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	607b      	str	r3, [r7, #4]
    BOOL bSubordinatedCycles = FALSE;
 8001efa:	2300      	movs	r3, #0
 8001efc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    UINT16    nPdInputBuffer = 3;
 8001f00:	2303      	movs	r3, #3
 8001f02:	86bb      	strh	r3, [r7, #52]	@ 0x34

    UINT16    nPdOutputBuffer = 3;
 8001f04:	2303      	movs	r3, #3
 8001f06:	867b      	strh	r3, [r7, #50]	@ 0x32

    UINT16 SyncType0x1C32 = 0; /* Helper variable for sync type for SM2 (required if no CoE is supported or no output process data available)*/
 8001f08:	2300      	movs	r3, #0
 8001f0a:	863b      	strh	r3, [r7, #48]	@ 0x30
    UINT16 SyncType0x1C33 = 0; /* Helper variable for sync type for SM3 (required if no CoE is supported or no input process data available)*/
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	85fb      	strh	r3, [r7, #46]	@ 0x2e

    UINT16 u16MinSuppSyncType = 0xFFFF;  /* Minimum supported Sync Types */
 8001f10:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f14:	85bb      	strh	r3, [r7, #44]	@ 0x2c

    u16MinSuppSyncType &= sSyncManOutPar.u16SyncTypesSupported;
 8001f16:	4b9a      	ldr	r3, [pc, #616]	@ (8002180 <StartInputHandler+0x29c>)
 8001f18:	899a      	ldrh	r2, [r3, #12]
 8001f1a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    u16MinSuppSyncType &= sSyncManInPar.u16SyncTypesSupported;
 8001f20:	4b98      	ldr	r3, [pc, #608]	@ (8002184 <StartInputHandler+0x2a0>)
 8001f22:	899a      	ldrh	r2, [r3, #12]
 8001f24:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001f26:	4013      	ands	r3, r2
 8001f28:	85bb      	strh	r3, [r7, #44]	@ 0x2c

    u16ALEventMask = 0;
 8001f2a:	4b97      	ldr	r3, [pc, #604]	@ (8002188 <StartInputHandler+0x2a4>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	801a      	strh	r2, [r3, #0]


    /* 
        --- Check if SyncManager areas overlapping --- 
    */
    bEcatFirstOutputsReceived = FALSE;
 8001f30:	4b96      	ldr	r3, [pc, #600]	@ (800218c <StartInputHandler+0x2a8>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	701a      	strb	r2, [r3, #0]

    /* get a pointer to the Sync Manager Channel 2 (Outputs) */
    pSyncMan = GetSyncMan(PROCESS_DATA_OUT);
 8001f36:	2002      	movs	r0, #2
 8001f38:	f7ff fdb0 	bl	8001a9c <GetSyncMan>
 8001f3c:	62b8      	str	r0, [r7, #40]	@ 0x28
    /* store the address of the Sync Manager Channel 2 (Outputs) */
    nEscAddrOutputData = pSyncMan->PhysicalStartAddress;
 8001f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f40:	881a      	ldrh	r2, [r3, #0]
 8001f42:	4b93      	ldr	r3, [pc, #588]	@ (8002190 <StartInputHandler+0x2ac>)
 8001f44:	801a      	strh	r2, [r3, #0]
    /* get the number of output buffer used for calculating the address areas */
    if (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_ONE_BUFFER_VALUE)
 8001f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f48:	791b      	ldrb	r3, [r3, #4]
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <StartInputHandler+0x72>
    {
       nPdOutputBuffer = 1;
 8001f52:	2301      	movs	r3, #1
 8001f54:	867b      	strh	r3, [r7, #50]	@ 0x32
    }


    /* get a pointer to the Sync Manager Channel 3 (Inputs) */
    pSyncMan = GetSyncMan(PROCESS_DATA_IN);
 8001f56:	2003      	movs	r0, #3
 8001f58:	f7ff fda0 	bl	8001a9c <GetSyncMan>
 8001f5c:	62b8      	str	r0, [r7, #40]	@ 0x28
    /* store the address of the Sync Manager Channel 3 (Inputs)*/
    nEscAddrInputData = pSyncMan->PhysicalStartAddress;
 8001f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f60:	881a      	ldrh	r2, [r3, #0]
 8001f62:	4b8c      	ldr	r3, [pc, #560]	@ (8002194 <StartInputHandler+0x2b0>)
 8001f64:	801a      	strh	r2, [r3, #0]


    /* get the number of input buffer used for calculating the address areas */
    if (pSyncMan->Settings[SM_SETTING_CONTROL_OFFSET] & SM_SETTING_MODE_ONE_BUFFER_VALUE)
 8001f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f68:	791b      	ldrb	r3, [r3, #4]
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <StartInputHandler+0x92>
    {
        nPdInputBuffer = 1;
 8001f72:	2301      	movs	r3, #1
 8001f74:	86bb      	strh	r3, [r7, #52]	@ 0x34
    }
    /* it has be checked if the Sync Manager memory areas for Inputs and Outputs will not overlap
       the Sync Manager memory areas for the Mailbox */

    if (((nEscAddrInputData + nPdInputSize * nPdInputBuffer) > u16EscAddrSendMbx && (nEscAddrInputData < (u16EscAddrSendMbx + u16SendMbxSize)))
 8001f76:	4b87      	ldr	r3, [pc, #540]	@ (8002194 <StartInputHandler+0x2b0>)
 8001f78:	881b      	ldrh	r3, [r3, #0]
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	4b86      	ldr	r3, [pc, #536]	@ (8002198 <StartInputHandler+0x2b4>)
 8001f7e:	881b      	ldrh	r3, [r3, #0]
 8001f80:	4619      	mov	r1, r3
 8001f82:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001f84:	fb01 f303 	mul.w	r3, r1, r3
 8001f88:	4413      	add	r3, r2
 8001f8a:	4a84      	ldr	r2, [pc, #528]	@ (800219c <StartInputHandler+0x2b8>)
 8001f8c:	8812      	ldrh	r2, [r2, #0]
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	dd0a      	ble.n	8001fa8 <StartInputHandler+0xc4>
 8001f92:	4b80      	ldr	r3, [pc, #512]	@ (8002194 <StartInputHandler+0x2b0>)
 8001f94:	881b      	ldrh	r3, [r3, #0]
 8001f96:	461a      	mov	r2, r3
 8001f98:	4b80      	ldr	r3, [pc, #512]	@ (800219c <StartInputHandler+0x2b8>)
 8001f9a:	881b      	ldrh	r3, [r3, #0]
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4b80      	ldr	r3, [pc, #512]	@ (80021a0 <StartInputHandler+0x2bc>)
 8001fa0:	881b      	ldrh	r3, [r3, #0]
 8001fa2:	440b      	add	r3, r1
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	db18      	blt.n	8001fda <StartInputHandler+0xf6>
       || ((nEscAddrInputData + nPdInputSize * nPdInputBuffer) > u16EscAddrReceiveMbx && (nEscAddrInputData < (u16EscAddrReceiveMbx + u16ReceiveMbxSize)))
 8001fa8:	4b7a      	ldr	r3, [pc, #488]	@ (8002194 <StartInputHandler+0x2b0>)
 8001faa:	881b      	ldrh	r3, [r3, #0]
 8001fac:	461a      	mov	r2, r3
 8001fae:	4b7a      	ldr	r3, [pc, #488]	@ (8002198 <StartInputHandler+0x2b4>)
 8001fb0:	881b      	ldrh	r3, [r3, #0]
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001fb6:	fb01 f303 	mul.w	r3, r1, r3
 8001fba:	4413      	add	r3, r2
 8001fbc:	4a79      	ldr	r2, [pc, #484]	@ (80021a4 <StartInputHandler+0x2c0>)
 8001fbe:	8812      	ldrh	r2, [r2, #0]
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	dd0c      	ble.n	8001fde <StartInputHandler+0xfa>
 8001fc4:	4b73      	ldr	r3, [pc, #460]	@ (8002194 <StartInputHandler+0x2b0>)
 8001fc6:	881b      	ldrh	r3, [r3, #0]
 8001fc8:	461a      	mov	r2, r3
 8001fca:	4b76      	ldr	r3, [pc, #472]	@ (80021a4 <StartInputHandler+0x2c0>)
 8001fcc:	881b      	ldrh	r3, [r3, #0]
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4b75      	ldr	r3, [pc, #468]	@ (80021a8 <StartInputHandler+0x2c4>)
 8001fd2:	881b      	ldrh	r3, [r3, #0]
 8001fd4:	440b      	add	r3, r1
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	da01      	bge.n	8001fde <StartInputHandler+0xfa>
        )
    {
        return ALSTATUSCODE_INVALIDSMINCFG;
 8001fda:	231e      	movs	r3, #30
 8001fdc:	e376      	b.n	80026cc <StartInputHandler+0x7e8>
    }

    if (
        ((nEscAddrOutputData + nPdOutputSize * nPdOutputBuffer) > u16EscAddrSendMbx && (nEscAddrOutputData < (u16EscAddrSendMbx + u16SendMbxSize)))
 8001fde:	4b6c      	ldr	r3, [pc, #432]	@ (8002190 <StartInputHandler+0x2ac>)
 8001fe0:	881b      	ldrh	r3, [r3, #0]
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	4b71      	ldr	r3, [pc, #452]	@ (80021ac <StartInputHandler+0x2c8>)
 8001fe6:	881b      	ldrh	r3, [r3, #0]
 8001fe8:	4619      	mov	r1, r3
 8001fea:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8001fec:	fb01 f303 	mul.w	r3, r1, r3
 8001ff0:	4413      	add	r3, r2
 8001ff2:	4a6a      	ldr	r2, [pc, #424]	@ (800219c <StartInputHandler+0x2b8>)
 8001ff4:	8812      	ldrh	r2, [r2, #0]
    if (
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	dd0a      	ble.n	8002010 <StartInputHandler+0x12c>
        ((nEscAddrOutputData + nPdOutputSize * nPdOutputBuffer) > u16EscAddrSendMbx && (nEscAddrOutputData < (u16EscAddrSendMbx + u16SendMbxSize)))
 8001ffa:	4b65      	ldr	r3, [pc, #404]	@ (8002190 <StartInputHandler+0x2ac>)
 8001ffc:	881b      	ldrh	r3, [r3, #0]
 8001ffe:	461a      	mov	r2, r3
 8002000:	4b66      	ldr	r3, [pc, #408]	@ (800219c <StartInputHandler+0x2b8>)
 8002002:	881b      	ldrh	r3, [r3, #0]
 8002004:	4619      	mov	r1, r3
 8002006:	4b66      	ldr	r3, [pc, #408]	@ (80021a0 <StartInputHandler+0x2bc>)
 8002008:	881b      	ldrh	r3, [r3, #0]
 800200a:	440b      	add	r3, r1
 800200c:	429a      	cmp	r2, r3
 800200e:	db31      	blt.n	8002074 <StartInputHandler+0x190>
        ||((nEscAddrOutputData + nPdOutputSize * nPdOutputBuffer) > u16EscAddrReceiveMbx && (nEscAddrOutputData < (u16EscAddrReceiveMbx + u16ReceiveMbxSize)))
 8002010:	4b5f      	ldr	r3, [pc, #380]	@ (8002190 <StartInputHandler+0x2ac>)
 8002012:	881b      	ldrh	r3, [r3, #0]
 8002014:	461a      	mov	r2, r3
 8002016:	4b65      	ldr	r3, [pc, #404]	@ (80021ac <StartInputHandler+0x2c8>)
 8002018:	881b      	ldrh	r3, [r3, #0]
 800201a:	4619      	mov	r1, r3
 800201c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800201e:	fb01 f303 	mul.w	r3, r1, r3
 8002022:	4413      	add	r3, r2
 8002024:	4a5f      	ldr	r2, [pc, #380]	@ (80021a4 <StartInputHandler+0x2c0>)
 8002026:	8812      	ldrh	r2, [r2, #0]
 8002028:	4293      	cmp	r3, r2
 800202a:	dd0a      	ble.n	8002042 <StartInputHandler+0x15e>
 800202c:	4b58      	ldr	r3, [pc, #352]	@ (8002190 <StartInputHandler+0x2ac>)
 800202e:	881b      	ldrh	r3, [r3, #0]
 8002030:	461a      	mov	r2, r3
 8002032:	4b5c      	ldr	r3, [pc, #368]	@ (80021a4 <StartInputHandler+0x2c0>)
 8002034:	881b      	ldrh	r3, [r3, #0]
 8002036:	4619      	mov	r1, r3
 8002038:	4b5b      	ldr	r3, [pc, #364]	@ (80021a8 <StartInputHandler+0x2c4>)
 800203a:	881b      	ldrh	r3, [r3, #0]
 800203c:	440b      	add	r3, r1
 800203e:	429a      	cmp	r2, r3
 8002040:	db18      	blt.n	8002074 <StartInputHandler+0x190>
        ||
        ((nEscAddrOutputData + nPdOutputSize * nPdOutputBuffer) > nEscAddrInputData && (nEscAddrOutputData < (nEscAddrInputData + nPdInputSize)))
 8002042:	4b53      	ldr	r3, [pc, #332]	@ (8002190 <StartInputHandler+0x2ac>)
 8002044:	881b      	ldrh	r3, [r3, #0]
 8002046:	461a      	mov	r2, r3
 8002048:	4b58      	ldr	r3, [pc, #352]	@ (80021ac <StartInputHandler+0x2c8>)
 800204a:	881b      	ldrh	r3, [r3, #0]
 800204c:	4619      	mov	r1, r3
 800204e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002050:	fb01 f303 	mul.w	r3, r1, r3
 8002054:	4413      	add	r3, r2
 8002056:	4a4f      	ldr	r2, [pc, #316]	@ (8002194 <StartInputHandler+0x2b0>)
 8002058:	8812      	ldrh	r2, [r2, #0]
        ||
 800205a:	4293      	cmp	r3, r2
 800205c:	dd0c      	ble.n	8002078 <StartInputHandler+0x194>
        ((nEscAddrOutputData + nPdOutputSize * nPdOutputBuffer) > nEscAddrInputData && (nEscAddrOutputData < (nEscAddrInputData + nPdInputSize)))
 800205e:	4b4c      	ldr	r3, [pc, #304]	@ (8002190 <StartInputHandler+0x2ac>)
 8002060:	881b      	ldrh	r3, [r3, #0]
 8002062:	461a      	mov	r2, r3
 8002064:	4b4b      	ldr	r3, [pc, #300]	@ (8002194 <StartInputHandler+0x2b0>)
 8002066:	881b      	ldrh	r3, [r3, #0]
 8002068:	4619      	mov	r1, r3
 800206a:	4b4b      	ldr	r3, [pc, #300]	@ (8002198 <StartInputHandler+0x2b4>)
 800206c:	881b      	ldrh	r3, [r3, #0]
 800206e:	440b      	add	r3, r1
 8002070:	429a      	cmp	r2, r3
 8002072:	da01      	bge.n	8002078 <StartInputHandler+0x194>
        )
    {

        /* Sync Manager Channel 2 memory area (Outputs) overlaps the Sync Manager memory areas for the Mailbox
           or the Sync Manager Channel 3 memory area (Inputs) */
        return ALSTATUSCODE_INVALIDSMOUTCFG;
 8002074:	231d      	movs	r3, #29
 8002076:	e329      	b.n	80026cc <StartInputHandler+0x7e8>
        --- Check configured synchronization ---
    */

    /* Get the DC Control/Activation register value*/
    /*Read register 0x981 (corresponding masks are adapted)*/
    HW_EscReadByte(dcControl, ESC_DC_SYNC_ACTIVATION_OFFSET);
 8002078:	f107 0313 	add.w	r3, r7, #19
 800207c:	2201      	movs	r2, #1
 800207e:	f640 1181 	movw	r1, #2433	@ 0x981
 8002082:	4618      	mov	r0, r3
 8002084:	f7fe fc58 	bl	8000938 <HW_EscRead>

    // Cycle time for Sync0
        HW_EscReadDWord(cycleTimeSync0, ESC_DC_SYNC0_CYCLETIME_OFFSET);
 8002088:	f107 0308 	add.w	r3, r7, #8
 800208c:	2204      	movs	r2, #4
 800208e:	f44f 611a 	mov.w	r1, #2464	@ 0x9a0
 8002092:	4618      	mov	r0, r3
 8002094:	f7fe fc50 	bl	8000938 <HW_EscRead>
        cycleTimeSync0 = SWAPDWORD(cycleTimeSync0);
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	60bb      	str	r3, [r7, #8]

    // Cycle time for Sync1
        HW_EscReadDWord(shiftTimeSync1, ESC_DC_SYNC1_CYCLETIME_OFFSET);
 800209c:	1d3b      	adds	r3, r7, #4
 800209e:	2204      	movs	r2, #4
 80020a0:	f640 11a4 	movw	r1, #2468	@ 0x9a4
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7fe fc47 	bl	8000938 <HW_EscRead>
        shiftTimeSync1 = SWAPDWORD(shiftTimeSync1);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	607b      	str	r3, [r7, #4]


    SyncType0x1C32 = sSyncManOutPar.u16SyncType;
 80020ae:	4b34      	ldr	r3, [pc, #208]	@ (8002180 <StartInputHandler+0x29c>)
 80020b0:	885b      	ldrh	r3, [r3, #2]
 80020b2:	863b      	strh	r3, [r7, #48]	@ 0x30
    SyncType0x1C33 = sSyncManInPar.u16SyncType;
 80020b4:	4b33      	ldr	r3, [pc, #204]	@ (8002184 <StartInputHandler+0x2a0>)
 80020b6:	885b      	ldrh	r3, [r3, #2]
 80020b8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    /* check general DC register plausibility and if configuration is supported
       - 0x981 DC Active
       - 0x9A0:0x9A3 Sync0 Cycle
       - 0x9A4:0x9A7 Sync1 Cycle
    */
    if((dcControl & (ESC_DC_SYNC_UNIT_ACTIVE_MASK | ESC_DC_SYNC_UNIT_AUTO_ACTIVE_MASK)) != 0)
 80020ba:	7cfb      	ldrb	r3, [r7, #19]
 80020bc:	f003 0309 	and.w	r3, r3, #9
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d079      	beq.n	80021b8 <StartInputHandler+0x2d4>
    {
        /* DC unit is active at least one Sync signal shall be generated */
        if((dcControl & (ESC_DC_SYNC0_ACTIVE_MASK | ESC_DC_SYNC1_ACTIVE_MASK)) == 0)
 80020c4:	7cfb      	ldrb	r3, [r7, #19]
 80020c6:	f003 0306 	and.w	r3, r3, #6
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d101      	bne.n	80020d2 <StartInputHandler+0x1ee>
        {
            return ALSTATUSCODE_DCINVALIDSYNCCFG;
 80020ce:	2330      	movs	r3, #48	@ 0x30
 80020d0:	e2fc      	b.n	80026cc <StartInputHandler+0x7e8>
        }

        /* If Sync1 shall only be active if also Sync0 will be generated*/
        if(((dcControl & ESC_DC_SYNC0_ACTIVE_MASK) == 0)
 80020d2:	7cfb      	ldrb	r3, [r7, #19]
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d106      	bne.n	80020ea <StartInputHandler+0x206>
            && ((dcControl & ESC_DC_SYNC1_ACTIVE_MASK) != 0))
 80020dc:	7cfb      	ldrb	r3, [r7, #19]
 80020de:	f003 0304 	and.w	r3, r3, #4
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <StartInputHandler+0x206>
        {
            return ALSTATUSCODE_DCINVALIDSYNCCFG;
 80020e6:	2330      	movs	r3, #48	@ 0x30
 80020e8:	e2f0      	b.n	80026cc <StartInputHandler+0x7e8>
        }

        if(u16MinSuppSyncType != 0)
 80020ea:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d015      	beq.n	800211c <StartInputHandler+0x238>
        {
            if((((u16MinSuppSyncType & SYNCTYPE_DCSYNC0SUPP) == 0) && ((dcControl & ESC_DC_SYNC0_ACTIVE_MASK) != 0))
 80020f0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80020f2:	f003 0304 	and.w	r3, r3, #4
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d104      	bne.n	8002104 <StartInputHandler+0x220>
 80020fa:	7cfb      	ldrb	r3, [r7, #19]
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d109      	bne.n	8002118 <StartInputHandler+0x234>
                ||(((u16MinSuppSyncType & SYNCTYPE_DCSYNC1SUPP) == 0) && ((dcControl & ESC_DC_SYNC1_ACTIVE_MASK) != 0)))
 8002104:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002106:	f003 0308 	and.w	r3, r3, #8
 800210a:	2b00      	cmp	r3, #0
 800210c:	d106      	bne.n	800211c <StartInputHandler+0x238>
 800210e:	7cfb      	ldrb	r3, [r7, #19]
 8002110:	f003 0304 	and.w	r3, r3, #4
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <StartInputHandler+0x238>
            {
                /* Sync0 is not supported but will be generated*/
                return ALSTATUSCODE_DCINVALIDSYNCCFG;                   
 8002118:	2330      	movs	r3, #48	@ 0x30
 800211a:	e2d7      	b.n	80026cc <StartInputHandler+0x7e8>
    }
        }

        {
            UINT32 curMinCycleTime = MIN_PD_CYCLE_TIME;
 800211c:	4b24      	ldr	r3, [pc, #144]	@ (80021b0 <StartInputHandler+0x2cc>)
 800211e:	627b      	str	r3, [r7, #36]	@ 0x24
            curMinCycleTime = sSyncManOutPar.u32MinCycleTime;
 8002120:	4b17      	ldr	r3, [pc, #92]	@ (8002180 <StartInputHandler+0x29c>)
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	627b      	str	r3, [r7, #36]	@ 0x24

            /*Check if Sync0 cycle time is supported*/
            if (cycleTimeSync0 != 0 && (cycleTimeSync0 < curMinCycleTime || cycleTimeSync0 > MAX_PD_CYCLE_TIME))
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d009      	beq.n	8002140 <StartInputHandler+0x25c>
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002130:	429a      	cmp	r2, r3
 8002132:	d803      	bhi.n	800213c <StartInputHandler+0x258>
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	4a1f      	ldr	r2, [pc, #124]	@ (80021b4 <StartInputHandler+0x2d0>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d901      	bls.n	8002140 <StartInputHandler+0x25c>
            {
                    return ALSTATUSCODE_DCSYNC0CYCLETIME;
 800213c:	2336      	movs	r3, #54	@ 0x36
 800213e:	e2c5      	b.n	80026cc <StartInputHandler+0x7e8>
            }
        }


        /* Check if Subordinated cycles are configured */
        if(((dcControl & ESC_DC_SYNC0_ACTIVE_MASK) != 0) && ((dcControl & ESC_DC_SYNC1_ACTIVE_MASK) != 0))
 8002140:	7cfb      	ldrb	r3, [r7, #19]
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00e      	beq.n	8002168 <StartInputHandler+0x284>
 800214a:	7cfb      	ldrb	r3, [r7, #19]
 800214c:	f003 0304 	and.w	r3, r3, #4
 8002150:	2b00      	cmp	r3, #0
 8002152:	d009      	beq.n	8002168 <StartInputHandler+0x284>
        {
            /* For Subordinated cycles both Sync signals shall be active and Sync0 is not configured in single shot (cycle time == 0)*/
            if((shiftTimeSync1 > 0) && (shiftTimeSync1 >= cycleTimeSync0))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d006      	beq.n	8002168 <StartInputHandler+0x284>
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	429a      	cmp	r2, r3
 8002160:	d302      	bcc.n	8002168 <StartInputHandler+0x284>
            {
                bSubordinatedCycles = TRUE;
 8002162:	2301      	movs	r3, #1
 8002164:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            }
        }

        /* Dump an error if subordinated cycles are configured but not supported */
        if(bSubordinatedCycles && ((u16MinSuppSyncType & SYNCTYPE_SUBCYCLESUPP) == 0))
 8002168:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800216c:	2b00      	cmp	r3, #0
 800216e:	d023      	beq.n	80021b8 <StartInputHandler+0x2d4>
 8002170:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002172:	f003 0310 	and.w	r3, r3, #16
 8002176:	2b00      	cmp	r3, #0
 8002178:	d11e      	bne.n	80021b8 <StartInputHandler+0x2d4>
        {
             return ALSTATUSCODE_DCINVALIDSYNCCFG;
 800217a:	2330      	movs	r3, #48	@ 0x30
 800217c:	e2a6      	b.n	80026cc <StartInputHandler+0x7e8>
 800217e:	bf00      	nop
 8002180:	240005a8 	.word	0x240005a8
 8002184:	240005ec 	.word	0x240005ec
 8002188:	24000504 	.word	0x24000504
 800218c:	240004ca 	.word	0x240004ca
 8002190:	24000500 	.word	0x24000500
 8002194:	24000502 	.word	0x24000502
 8002198:	240004f4 	.word	0x240004f4
 800219c:	24000520 	.word	0x24000520
 80021a0:	2400051a 	.word	0x2400051a
 80021a4:	2400051e 	.word	0x2400051e
 80021a8:	2400051c 	.word	0x2400051c
 80021ac:	240004f6 	.word	0x240004f6
 80021b0:	000186a0 	.word	0x000186a0
 80021b4:	c3500000 	.word	0xc3500000


    /*
        Check if the user configured Sync Type matches the DC register values (if the Sync Type is supported was already checked in the object write function)
    */
    if(bSyncSetByUser)
 80021b8:	4b84      	ldr	r3, [pc, #528]	@ (80023cc <StartInputHandler+0x4e8>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d02c      	beq.n	800221a <StartInputHandler+0x336>
    {
        if((dcControl & (ESC_DC_SYNC_UNIT_ACTIVE_MASK | ESC_DC_SYNC_UNIT_AUTO_ACTIVE_MASK)) == 0)
 80021c0:	7cfb      	ldrb	r3, [r7, #19]
 80021c2:	f003 0309 	and.w	r3, r3, #9
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d10d      	bne.n	80021e6 <StartInputHandler+0x302>
        {
            /* DC out unit not enabled => no DC mode shall be set */
            if((SyncType0x1C32 == SYNCTYPE_DCSYNC0) || (SyncType0x1C32 == SYNCTYPE_DCSYNC1)
 80021ca:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d008      	beq.n	80021e2 <StartInputHandler+0x2fe>
 80021d0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80021d2:	2b03      	cmp	r3, #3
 80021d4:	d005      	beq.n	80021e2 <StartInputHandler+0x2fe>
                ||(SyncType0x1C33 == SYNCTYPE_DCSYNC0) || (SyncType0x1C33 == SYNCTYPE_DCSYNC1))
 80021d6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d002      	beq.n	80021e2 <StartInputHandler+0x2fe>
 80021dc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80021de:	2b03      	cmp	r3, #3
 80021e0:	d15f      	bne.n	80022a2 <StartInputHandler+0x3be>
            {
                return ALSTATUSCODE_DCINVALIDSYNCCFG;
 80021e2:	2330      	movs	r3, #48	@ 0x30
 80021e4:	e272      	b.n	80026cc <StartInputHandler+0x7e8>
            }
        } //if((dcControl & (ESC_DC_SYNC_UNIT_ACTIVE_MASK | ESC_DC_SYNC_UNIT_AUTO_ACTIVE_MASK)) == 0)
    else
    {
            if((dcControl & ESC_DC_SYNC1_ACTIVE_MASK) == 0)
 80021e6:	7cfb      	ldrb	r3, [r7, #19]
 80021e8:	f003 0304 	and.w	r3, r3, #4
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d107      	bne.n	8002200 <StartInputHandler+0x31c>
            {
                /* No Sync 1 is generated => No Sync1 Sync Type shall configured*/
                if((SyncType0x1C32 == (UINT16)SYNCTYPE_DCSYNC1)
 80021f0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80021f2:	2b03      	cmp	r3, #3
 80021f4:	d002      	beq.n	80021fc <StartInputHandler+0x318>
                    ||(SyncType0x1C33 == (UINT16)SYNCTYPE_DCSYNC1))
 80021f6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80021f8:	2b03      	cmp	r3, #3
 80021fa:	d101      	bne.n	8002200 <StartInputHandler+0x31c>
                {
                    return ALSTATUSCODE_DCINVALIDSYNCCFG;
 80021fc:	2330      	movs	r3, #48	@ 0x30
 80021fe:	e265      	b.n	80026cc <StartInputHandler+0x7e8>
                }
            } //if((dcControl & ESC_DC_SYNC1_ACTIVE_MASK) == 0)

            if((dcControl & ESC_DC_SYNC0_ACTIVE_MASK) == 0)
 8002200:	7cfb      	ldrb	r3, [r7, #19]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d14b      	bne.n	80022a2 <StartInputHandler+0x3be>
            {
                /* No Sync 0 is generated => No Sync0 Sync Type shall configured*/
                if((SyncType0x1C32 == (UINT16)SYNCTYPE_DCSYNC0)
 800220a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800220c:	2b02      	cmp	r3, #2
 800220e:	d002      	beq.n	8002216 <StartInputHandler+0x332>
                    ||(SyncType0x1C33 == (UINT16)SYNCTYPE_DCSYNC0))
 8002210:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002212:	2b02      	cmp	r3, #2
 8002214:	d145      	bne.n	80022a2 <StartInputHandler+0x3be>
                {
                    return ALSTATUSCODE_DCINVALIDSYNCCFG;
 8002216:	2330      	movs	r3, #48	@ 0x30
 8002218:	e258      	b.n	80026cc <StartInputHandler+0x7e8>
        }
    } //if(bSyncSetByUser)
    else
    {
        /* No Sync Type selected by user => Configure Sync Type based on DC register values*/
        if((dcControl & (ESC_DC_SYNC_UNIT_ACTIVE_MASK | ESC_DC_SYNC_UNIT_AUTO_ACTIVE_MASK)) == 0)
 800221a:	7cfb      	ldrb	r3, [r7, #19]
 800221c:	f003 0309 	and.w	r3, r3, #9
 8002220:	2b00      	cmp	r3, #0
 8002222:	d11d      	bne.n	8002260 <StartInputHandler+0x37c>
        {
            /* Activation or auto activation of the Sync Out Unit is disabled => Free Run or SM Sync is configured*/

            /* AL Event enabled => Configure SM Sync*/
            if (nPdOutputSize > 0)
 8002224:	4b6a      	ldr	r3, [pc, #424]	@ (80023d0 <StartInputHandler+0x4ec>)
 8002226:	881b      	ldrh	r3, [r3, #0]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d00b      	beq.n	8002244 <StartInputHandler+0x360>
            {
                SyncType0x1C32 = SYNCTYPE_SM_SYNCHRON;
 800222c:	2301      	movs	r3, #1
 800222e:	863b      	strh	r3, [r7, #48]	@ 0x30
                
                if (nPdInputSize > 0)
 8002230:	4b68      	ldr	r3, [pc, #416]	@ (80023d4 <StartInputHandler+0x4f0>)
 8002232:	881b      	ldrh	r3, [r3, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d002      	beq.n	800223e <StartInputHandler+0x35a>
                {
                    SyncType0x1C33 = SYNCTYPE_SM2_SYNCHRON;
 8002238:	2322      	movs	r3, #34	@ 0x22
 800223a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800223c:	e031      	b.n	80022a2 <StartInputHandler+0x3be>
                }
                else
                {
                    SyncType0x1C33 = SYNCTYPE_FREERUN;
 800223e:	2300      	movs	r3, #0
 8002240:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8002242:	e02e      	b.n	80022a2 <StartInputHandler+0x3be>
                }
            }
            else if (nPdInputSize > 0)
 8002244:	4b63      	ldr	r3, [pc, #396]	@ (80023d4 <StartInputHandler+0x4f0>)
 8002246:	881b      	ldrh	r3, [r3, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d004      	beq.n	8002256 <StartInputHandler+0x372>
            {
                SyncType0x1C32 = SYNCTYPE_FREERUN;
 800224c:	2300      	movs	r3, #0
 800224e:	863b      	strh	r3, [r7, #48]	@ 0x30
                SyncType0x1C33 = SYNCTYPE_SM_SYNCHRON;
 8002250:	2301      	movs	r3, #1
 8002252:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8002254:	e025      	b.n	80022a2 <StartInputHandler+0x3be>
            }
            else
            {
                SyncType0x1C32 = SYNCTYPE_FREERUN;
 8002256:	2300      	movs	r3, #0
 8002258:	863b      	strh	r3, [r7, #48]	@ 0x30
                SyncType0x1C33 = SYNCTYPE_FREERUN;
 800225a:	2300      	movs	r3, #0
 800225c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800225e:	e020      	b.n	80022a2 <StartInputHandler+0x3be>
            }

        }
        else
        {
            if (nPdOutputSize > 0)
 8002260:	4b5b      	ldr	r3, [pc, #364]	@ (80023d0 <StartInputHandler+0x4ec>)
 8002262:	881b      	ldrh	r3, [r3, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d009      	beq.n	800227c <StartInputHandler+0x398>
            {
                /* Sync Signal generation is active*/
                if (bSubordinatedCycles)
 8002268:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800226c:	2b00      	cmp	r3, #0
 800226e:	d002      	beq.n	8002276 <StartInputHandler+0x392>
                {
                    SyncType0x1C32 = SYNCTYPE_DCSYNC1;
 8002270:	2303      	movs	r3, #3
 8002272:	863b      	strh	r3, [r7, #48]	@ 0x30
 8002274:	e004      	b.n	8002280 <StartInputHandler+0x39c>
                }
                else
                {
                    SyncType0x1C32 = SYNCTYPE_DCSYNC0;
 8002276:	2302      	movs	r3, #2
 8002278:	863b      	strh	r3, [r7, #48]	@ 0x30
 800227a:	e001      	b.n	8002280 <StartInputHandler+0x39c>
                }
            }
            else
            {
                SyncType0x1C32 = SYNCTYPE_FREERUN;
 800227c:	2300      	movs	r3, #0
 800227e:	863b      	strh	r3, [r7, #48]	@ 0x30
            }


            if (nPdInputSize > 0)
 8002280:	4b54      	ldr	r3, [pc, #336]	@ (80023d4 <StartInputHandler+0x4f0>)
 8002282:	881b      	ldrh	r3, [r3, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00a      	beq.n	800229e <StartInputHandler+0x3ba>
            {
                if ((dcControl & ESC_DC_SYNC1_ACTIVE_MASK) != 0)
 8002288:	7cfb      	ldrb	r3, [r7, #19]
 800228a:	f003 0304 	and.w	r3, r3, #4
 800228e:	2b00      	cmp	r3, #0
 8002290:	d002      	beq.n	8002298 <StartInputHandler+0x3b4>
                {
                    /* If Sync1 is available the inputs will always be mapped with Sync1 */
                    SyncType0x1C33 = SYNCTYPE_DCSYNC1;
 8002292:	2303      	movs	r3, #3
 8002294:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8002296:	e004      	b.n	80022a2 <StartInputHandler+0x3be>
                }
                else
                {
                    /* Map Inputs based on Sync0*/
                    SyncType0x1C33 = SYNCTYPE_DCSYNC0;
 8002298:	2302      	movs	r3, #2
 800229a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800229c:	e001      	b.n	80022a2 <StartInputHandler+0x3be>
                }
            }
            else
            {
                SyncType0x1C33 = SYNCTYPE_FREERUN;
 800229e:	2300      	movs	r3, #0
 80022a0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            }
        }
    }

    /* Update Cycle time entries if DC Sync Mode enabled */
    if(SyncType0x1C32 == SYNCTYPE_DCSYNC1)
 80022a2:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80022a4:	2b03      	cmp	r3, #3
 80022a6:	d10c      	bne.n	80022c2 <StartInputHandler+0x3de>
    {
        sSyncManOutPar.u32Sync0CycleTime = (UINT32)cycleTimeSync0;
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	4a4b      	ldr	r2, [pc, #300]	@ (80023d8 <StartInputHandler+0x4f4>)
 80022ac:	6253      	str	r3, [r2, #36]	@ 0x24
        sSyncManOutPar.u32CycleTime = (UINT32)cycleTimeSync0;
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	4a49      	ldr	r2, [pc, #292]	@ (80023d8 <StartInputHandler+0x4f4>)
 80022b2:	6053      	str	r3, [r2, #4]

        sSyncManInPar.u32Sync0CycleTime = (UINT32)cycleTimeSync0;
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	4a49      	ldr	r2, [pc, #292]	@ (80023dc <StartInputHandler+0x4f8>)
 80022b8:	6253      	str	r3, [r2, #36]	@ 0x24
        sSyncManInPar.u32CycleTime = (UINT32)cycleTimeSync0;
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	4a47      	ldr	r2, [pc, #284]	@ (80023dc <StartInputHandler+0x4f8>)
 80022be:	6053      	str	r3, [r2, #4]
 80022c0:	e00e      	b.n	80022e0 <StartInputHandler+0x3fc>
    }
    else if(SyncType0x1C32 == SYNCTYPE_DCSYNC0)
 80022c2:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d10b      	bne.n	80022e0 <StartInputHandler+0x3fc>
    {
        sSyncManOutPar.u32Sync0CycleTime = (UINT32)cycleTimeSync0;
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	4a43      	ldr	r2, [pc, #268]	@ (80023d8 <StartInputHandler+0x4f4>)
 80022cc:	6253      	str	r3, [r2, #36]	@ 0x24
        sSyncManOutPar.u32CycleTime = (UINT32)cycleTimeSync0;
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	4a41      	ldr	r2, [pc, #260]	@ (80023d8 <StartInputHandler+0x4f4>)
 80022d2:	6053      	str	r3, [r2, #4]

        sSyncManInPar.u32Sync0CycleTime = (UINT32)cycleTimeSync0;
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	4a41      	ldr	r2, [pc, #260]	@ (80023dc <StartInputHandler+0x4f8>)
 80022d8:	6253      	str	r3, [r2, #36]	@ 0x24
        sSyncManInPar.u32CycleTime = (UINT32)cycleTimeSync0;
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	4a3f      	ldr	r2, [pc, #252]	@ (80023dc <StartInputHandler+0x4f8>)
 80022de:	6053      	str	r3, [r2, #4]
    }

    /* Set global flags based on Sync Type */
    if ( !b3BufferMode )
 80022e0:	4b3f      	ldr	r3, [pc, #252]	@ (80023e0 <StartInputHandler+0x4fc>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d107      	bne.n	80022f8 <StartInputHandler+0x414>
    {
        /* 1-Buffer-Mode configured => For free run it shall be 3Buffer mode*/
        if (( SyncType0x1C32 == SYNCTYPE_FREERUN ) || ( SyncType0x1C33 == SYNCTYPE_FREERUN ))
 80022e8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d002      	beq.n	80022f4 <StartInputHandler+0x410>
 80022ee:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d101      	bne.n	80022f8 <StartInputHandler+0x414>
        {
                return ALSTATUSCODE_FREERUNNEEDS3BUFFERMODE;
 80022f4:	2329      	movs	r3, #41	@ 0x29
 80022f6:	e1e9      	b.n	80026cc <StartInputHandler+0x7e8>
        }
    }

    /* If no free run is supported the EscInt is always enabled*/
        if (( SyncType0x1C32 != SYNCTYPE_FREERUN ) || ( SyncType0x1C33 != SYNCTYPE_FREERUN ))
 80022f8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d102      	bne.n	8002304 <StartInputHandler+0x420>
 80022fe:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002300:	2b00      	cmp	r3, #0
 8002302:	d002      	beq.n	800230a <StartInputHandler+0x426>
        {
        /* ECAT Synchron Mode, the ESC interrupt is enabled */
        bEscIntEnabled = TRUE;
 8002304:	4b37      	ldr	r3, [pc, #220]	@ (80023e4 <StartInputHandler+0x500>)
 8002306:	2201      	movs	r2, #1
 8002308:	701a      	strb	r2, [r3, #0]
    }

        /* Update value for AL Event Mask register (0x204) */
        if(bEscIntEnabled)
 800230a:	4b36      	ldr	r3, [pc, #216]	@ (80023e4 <StartInputHandler+0x500>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d010      	beq.n	8002334 <StartInputHandler+0x450>
        {
            if(nPdOutputSize > 0)
 8002312:	4b2f      	ldr	r3, [pc, #188]	@ (80023d0 <StartInputHandler+0x4ec>)
 8002314:	881b      	ldrh	r3, [r3, #0]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d004      	beq.n	8002324 <StartInputHandler+0x440>
            {
                u16ALEventMask = PROCESS_OUTPUT_EVENT;
 800231a:	4b33      	ldr	r3, [pc, #204]	@ (80023e8 <StartInputHandler+0x504>)
 800231c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002320:	801a      	strh	r2, [r3, #0]
 8002322:	e007      	b.n	8002334 <StartInputHandler+0x450>
            }
            else if(nPdInputSize > 0)
 8002324:	4b2b      	ldr	r3, [pc, #172]	@ (80023d4 <StartInputHandler+0x4f0>)
 8002326:	881b      	ldrh	r3, [r3, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d003      	beq.n	8002334 <StartInputHandler+0x450>
            {
                u16ALEventMask = PROCESS_INPUT_EVENT;
 800232c:	4b2e      	ldr	r3, [pc, #184]	@ (80023e8 <StartInputHandler+0x504>)
 800232e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002332:	801a      	strh	r2, [r3, #0]
            }

        }

        if ((SyncType0x1C32 == SYNCTYPE_DCSYNC0) || (SyncType0x1C32 == SYNCTYPE_DCSYNC1)
 8002334:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002336:	2b02      	cmp	r3, #2
 8002338:	d008      	beq.n	800234c <StartInputHandler+0x468>
 800233a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800233c:	2b03      	cmp	r3, #3
 800233e:	d005      	beq.n	800234c <StartInputHandler+0x468>
            || (SyncType0x1C33 == SYNCTYPE_DCSYNC0) || (SyncType0x1C33 == SYNCTYPE_DCSYNC1))/* Sync to Sync0 or Sync1 is enabled*/
 8002340:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002342:	2b02      	cmp	r3, #2
 8002344:	d002      	beq.n	800234c <StartInputHandler+0x468>
 8002346:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002348:	2b03      	cmp	r3, #3
 800234a:	d109      	bne.n	8002360 <StartInputHandler+0x47c>
        {
            /* slave is running in DC-mode */
            bDcSyncActive = TRUE;
 800234c:	4b27      	ldr	r3, [pc, #156]	@ (80023ec <StartInputHandler+0x508>)
 800234e:	2201      	movs	r2, #1
 8002350:	701a      	strb	r2, [r3, #0]

            /*In case of an Input only application with DC no PDI Isr handling is required*/
            if (nPdOutputSize == 0)
 8002352:	4b1f      	ldr	r3, [pc, #124]	@ (80023d0 <StartInputHandler+0x4ec>)
 8002354:	881b      	ldrh	r3, [r3, #0]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d102      	bne.n	8002360 <StartInputHandler+0x47c>
            {
               u16ALEventMask = 0;
 800235a:	4b23      	ldr	r3, [pc, #140]	@ (80023e8 <StartInputHandler+0x504>)
 800235c:	2200      	movs	r2, #0
 800235e:	801a      	strh	r2, [r3, #0]
            }
        }



    sSyncManOutPar.u16SyncType = SyncType0x1C32;
 8002360:	4a1d      	ldr	r2, [pc, #116]	@ (80023d8 <StartInputHandler+0x4f4>)
 8002362:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002364:	8053      	strh	r3, [r2, #2]
    sSyncManInPar.u16SyncType = SyncType0x1C33;
 8002366:	4a1d      	ldr	r2, [pc, #116]	@ (80023dc <StartInputHandler+0x4f8>)
 8002368:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800236a:	8053      	strh	r3, [r2, #2]

    /* Calculate number of Sync0 events within one SM cycle and the Sync0 events on which the inputs has to be latched*/
    LatchInputSync0Value = 0;
 800236c:	4b20      	ldr	r3, [pc, #128]	@ (80023f0 <StartInputHandler+0x50c>)
 800236e:	2200      	movs	r2, #0
 8002370:	801a      	strh	r2, [r3, #0]
    LatchInputSync0Counter = 0;
 8002372:	4b20      	ldr	r3, [pc, #128]	@ (80023f4 <StartInputHandler+0x510>)
 8002374:	2200      	movs	r2, #0
 8002376:	801a      	strh	r2, [r3, #0]
    u16SmSync0Value = 0;
 8002378:	4b1f      	ldr	r3, [pc, #124]	@ (80023f8 <StartInputHandler+0x514>)
 800237a:	2200      	movs	r2, #0
 800237c:	801a      	strh	r2, [r3, #0]
    u16SmSync0Counter = 0;
 800237e:	4b1f      	ldr	r3, [pc, #124]	@ (80023fc <StartInputHandler+0x518>)
 8002380:	2200      	movs	r2, #0
 8002382:	801a      	strh	r2, [r3, #0]


    if(bSubordinatedCycles == TRUE)
 8002384:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002388:	2b01      	cmp	r3, #1
 800238a:	d153      	bne.n	8002434 <StartInputHandler+0x550>
    {
        
        UINT32 cycleTimeSync1 = (shiftTimeSync1 + cycleTimeSync0);
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	4413      	add	r3, r2
 8002392:	623b      	str	r3, [r7, #32]


        /* get the number of Sync0 event within on SM cycle */
        if(shiftTimeSync1 >= cycleTimeSync0)
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	429a      	cmp	r2, r3
 800239a:	d331      	bcc.n	8002400 <StartInputHandler+0x51c>
        {

            u16SmSync0Value = (UINT16)(cycleTimeSync1 / cycleTimeSync0);
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	6a3a      	ldr	r2, [r7, #32]
 80023a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	4b14      	ldr	r3, [pc, #80]	@ (80023f8 <StartInputHandler+0x514>)
 80023a8:	801a      	strh	r2, [r3, #0]
            
            if((cycleTimeSync1 % cycleTimeSync0) == 0)
 80023aa:	68ba      	ldr	r2, [r7, #8]
 80023ac:	6a3b      	ldr	r3, [r7, #32]
 80023ae:	fbb3 f1f2 	udiv	r1, r3, r2
 80023b2:	fb01 f202 	mul.w	r2, r1, r2
 80023b6:	1a9b      	subs	r3, r3, r2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d124      	bne.n	8002406 <StartInputHandler+0x522>
            {
                /* if the Sync1cycletime/Sync0cycletime ratio is even one additional tick */
                u16SmSync0Value ++;
 80023bc:	4b0e      	ldr	r3, [pc, #56]	@ (80023f8 <StartInputHandler+0x514>)
 80023be:	881b      	ldrh	r3, [r3, #0]
 80023c0:	3301      	adds	r3, #1
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	4b0c      	ldr	r3, [pc, #48]	@ (80023f8 <StartInputHandler+0x514>)
 80023c6:	801a      	strh	r2, [r3, #0]
 80023c8:	e01d      	b.n	8002406 <StartInputHandler+0x522>
 80023ca:	bf00      	nop
 80023cc:	240005a1 	.word	0x240005a1
 80023d0:	240004f6 	.word	0x240004f6
 80023d4:	240004f4 	.word	0x240004f4
 80023d8:	240005a8 	.word	0x240005a8
 80023dc:	240005ec 	.word	0x240005ec
 80023e0:	240004ea 	.word	0x240004ea
 80023e4:	240004e9 	.word	0x240004e9
 80023e8:	24000504 	.word	0x24000504
 80023ec:	240004cc 	.word	0x240004cc
 80023f0:	240004e4 	.word	0x240004e4
 80023f4:	240004e6 	.word	0x240004e6
 80023f8:	240004d4 	.word	0x240004d4
 80023fc:	240004d2 	.word	0x240004d2
            }
        }
        else
        {
            u16SmSync0Value = 1;
 8002400:	4b8c      	ldr	r3, [pc, #560]	@ (8002634 <StartInputHandler+0x750>)
 8002402:	2201      	movs	r2, #1
 8002404:	801a      	strh	r2, [r3, #0]
        }

        /* Calculate the Sync0 tick on which the inputs shall be latched (last Sync0 before the next Sync1 event)*/
        LatchInputSync0Value = (UINT16) (cycleTimeSync1 / cycleTimeSync0);
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	6a3a      	ldr	r2, [r7, #32]
 800240a:	fbb2 f3f3 	udiv	r3, r2, r3
 800240e:	b29a      	uxth	r2, r3
 8002410:	4b89      	ldr	r3, [pc, #548]	@ (8002638 <StartInputHandler+0x754>)
 8002412:	801a      	strh	r2, [r3, #0]

        if ((cycleTimeSync1 % cycleTimeSync0) > 0)
 8002414:	68ba      	ldr	r2, [r7, #8]
 8002416:	6a3b      	ldr	r3, [r7, #32]
 8002418:	fbb3 f1f2 	udiv	r1, r3, r2
 800241c:	fb01 f202 	mul.w	r2, r1, r2
 8002420:	1a9b      	subs	r3, r3, r2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d012      	beq.n	800244c <StartInputHandler+0x568>
        {
            LatchInputSync0Value++;
 8002426:	4b84      	ldr	r3, [pc, #528]	@ (8002638 <StartInputHandler+0x754>)
 8002428:	881b      	ldrh	r3, [r3, #0]
 800242a:	3301      	adds	r3, #1
 800242c:	b29a      	uxth	r2, r3
 800242e:	4b82      	ldr	r3, [pc, #520]	@ (8002638 <StartInputHandler+0x754>)
 8002430:	801a      	strh	r2, [r3, #0]
 8002432:	e00b      	b.n	800244c <StartInputHandler+0x568>
        }

    }
    else 
    {
        if(SyncType0x1C32 == SYNCTYPE_DCSYNC0)
 8002434:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002436:	2b02      	cmp	r3, #2
 8002438:	d102      	bne.n	8002440 <StartInputHandler+0x55c>
        {
            /* if SyncType of 0x1C32 is 2 the Sync0 event is trigger once during a SM cycle */
            u16SmSync0Value = 1;
 800243a:	4b7e      	ldr	r3, [pc, #504]	@ (8002634 <StartInputHandler+0x750>)
 800243c:	2201      	movs	r2, #1
 800243e:	801a      	strh	r2, [r3, #0]
        }   

        if(SyncType0x1C33 != SYNCTYPE_DCSYNC1)
 8002440:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002442:	2b03      	cmp	r3, #3
 8002444:	d002      	beq.n	800244c <StartInputHandler+0x568>
        {
            LatchInputSync0Value = 1;
 8002446:	4b7c      	ldr	r3, [pc, #496]	@ (8002638 <StartInputHandler+0x754>)
 8002448:	2201      	movs	r2, #1
 800244a:	801a      	strh	r2, [r3, #0]
    }



    /* reset the error counter indicating synchronization problems */
    sCycleDiag.syncFailedCounter = 0;
 800244c:	4b7b      	ldr	r3, [pc, #492]	@ (800263c <StartInputHandler+0x758>)
 800244e:	2200      	movs	r2, #0
 8002450:	801a      	strh	r2, [r3, #0]
    /*
        --- Check watchdog settings ---
    */

    /*get the watchdog time (register 0x420). if value is > 0 watchdog is active*/
    HW_EscReadWord(wd, ESC_PD_WD_TIME);
 8002452:	f107 030e 	add.w	r3, r7, #14
 8002456:	2202      	movs	r2, #2
 8002458:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 800245c:	4618      	mov	r0, r3
 800245e:	f7fe fa6b 	bl	8000938 <HW_EscRead>
    wd = SWAPWORD(wd);
 8002462:	89fb      	ldrh	r3, [r7, #14]
 8002464:	81fb      	strh	r3, [r7, #14]

    if (nPdOutputSize > 0 &&  wd != 0 )
 8002466:	4b76      	ldr	r3, [pc, #472]	@ (8002640 <StartInputHandler+0x75c>)
 8002468:	881b      	ldrh	r3, [r3, #0]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d02f      	beq.n	80024ce <StartInputHandler+0x5ea>
 800246e:	89fb      	ldrh	r3, [r7, #14]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d02c      	beq.n	80024ce <StartInputHandler+0x5ea>
    {
    /*get watchdog divider (register 0x400)*/
    HW_EscReadWord(wdiv, ESC_WD_DIVIDER_OFFSET);
 8002474:	f107 0310 	add.w	r3, r7, #16
 8002478:	2202      	movs	r2, #2
 800247a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800247e:	4618      	mov	r0, r3
 8002480:	f7fe fa5a 	bl	8000938 <HW_EscRead>
    wdiv = SWAPWORD(wdiv);
 8002484:	8a3b      	ldrh	r3, [r7, #16]
 8002486:	823b      	strh	r3, [r7, #16]
        if ( wdiv != 0 )
 8002488:	8a3b      	ldrh	r3, [r7, #16]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d019      	beq.n	80024c2 <StartInputHandler+0x5de>
        {
            /* the ESC subtracts 2 in register 0x400 so it has to be added here */
            UINT32 d = wdiv+2;
 800248e:	8a3b      	ldrh	r3, [r7, #16]
 8002490:	3302      	adds	r3, #2
 8002492:	61fb      	str	r3, [r7, #28]


            d *= wd;
 8002494:	89fb      	ldrh	r3, [r7, #14]
 8002496:	461a      	mov	r2, r3
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	fb02 f303 	mul.w	r3, r2, r3
 800249e:	61fb      	str	r3, [r7, #28]
            /* store watchdog in ms in variable EcatWdValue */
            /* watchdog value has to be rounded up */
            d = (INT32)(d + 24999);
 80024a0:	69fa      	ldr	r2, [r7, #28]
 80024a2:	f246 13a7 	movw	r3, #24999	@ 0x61a7
 80024a6:	4413      	add	r3, r2
 80024a8:	61fb      	str	r3, [r7, #28]
            d /= 25000;
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	08db      	lsrs	r3, r3, #3
 80024ae:	4a65      	ldr	r2, [pc, #404]	@ (8002644 <StartInputHandler+0x760>)
 80024b0:	fba2 2303 	umull	r2, r3, r2, r3
 80024b4:	0a1b      	lsrs	r3, r3, #8
 80024b6:	61fb      	str	r3, [r7, #28]
            EcatWdValue = (UINT16) d;
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	4b62      	ldr	r3, [pc, #392]	@ (8002648 <StartInputHandler+0x764>)
 80024be:	801a      	strh	r2, [r3, #0]
        if ( wdiv != 0 )
 80024c0:	e00a      	b.n	80024d8 <StartInputHandler+0x5f4>
        }
        else
        {
            wd = 0;
 80024c2:	2300      	movs	r3, #0
 80024c4:	81fb      	strh	r3, [r7, #14]
            /* wd value has to be set to zero, if the wd is 0 */
            EcatWdValue = 0;
 80024c6:	4b60      	ldr	r3, [pc, #384]	@ (8002648 <StartInputHandler+0x764>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	801a      	strh	r2, [r3, #0]
        if ( wdiv != 0 )
 80024cc:	e004      	b.n	80024d8 <StartInputHandler+0x5f4>
        }
    }
    else
    {
        /* the watchdog is deactivated or slave has no output process data*/
        wdiv = 0;
 80024ce:	2300      	movs	r3, #0
 80024d0:	823b      	strh	r3, [r7, #16]
        EcatWdValue = 0;
 80024d2:	4b5d      	ldr	r3, [pc, #372]	@ (8002648 <StartInputHandler+0x764>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	801a      	strh	r2, [r3, #0]
    }

    if((EcatWdValue == 0 && bWdTrigger) || (EcatWdValue != 0 && !bWdTrigger))
 80024d8:	4b5b      	ldr	r3, [pc, #364]	@ (8002648 <StartInputHandler+0x764>)
 80024da:	881b      	ldrh	r3, [r3, #0]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d103      	bne.n	80024e8 <StartInputHandler+0x604>
 80024e0:	4b5a      	ldr	r3, [pc, #360]	@ (800264c <StartInputHandler+0x768>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d107      	bne.n	80024f8 <StartInputHandler+0x614>
 80024e8:	4b57      	ldr	r3, [pc, #348]	@ (8002648 <StartInputHandler+0x764>)
 80024ea:	881b      	ldrh	r3, [r3, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d005      	beq.n	80024fc <StartInputHandler+0x618>
 80024f0:	4b56      	ldr	r3, [pc, #344]	@ (800264c <StartInputHandler+0x768>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d101      	bne.n	80024fc <StartInputHandler+0x618>
    {
        /* if the WD-Trigger in the Sync Manager Channel 2 Control-Byte is set (Bit 6 of Register 0x814)
            an error has to be returned */
        return ALSTATUSCODE_INVALIDWDCFG;
 80024f8:	231f      	movs	r3, #31
 80024fa:	e0e7      	b.n	80026cc <StartInputHandler+0x7e8>
    }

    if ( bEscIntEnabled && nPdOutputSize != 0 )
 80024fc:	4b54      	ldr	r3, [pc, #336]	@ (8002650 <StartInputHandler+0x76c>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00a      	beq.n	800251a <StartInputHandler+0x636>
 8002504:	4b4e      	ldr	r3, [pc, #312]	@ (8002640 <StartInputHandler+0x75c>)
 8002506:	881b      	ldrh	r3, [r3, #0]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d006      	beq.n	800251a <StartInputHandler+0x636>
    {
        /* ECAT synchron Mode is active, the Sync Manager Channel 2 event
           has to activated in the AL-Event mask register */
        u16ALEventMask |= PROCESS_OUTPUT_EVENT;
 800250c:	4b51      	ldr	r3, [pc, #324]	@ (8002654 <StartInputHandler+0x770>)
 800250e:	881b      	ldrh	r3, [r3, #0]
 8002510:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002514:	b29a      	uxth	r2, r3
 8002516:	4b4f      	ldr	r3, [pc, #316]	@ (8002654 <StartInputHandler+0x770>)
 8002518:	801a      	strh	r2, [r3, #0]
    }
/*The application ESM function is separated from this function to handle pending transitions*/

    Sync0WdValue = 0;
 800251a:	4b4f      	ldr	r3, [pc, #316]	@ (8002658 <StartInputHandler+0x774>)
 800251c:	2200      	movs	r2, #0
 800251e:	801a      	strh	r2, [r3, #0]
    Sync0WdCounter = 0;
 8002520:	4b4e      	ldr	r3, [pc, #312]	@ (800265c <StartInputHandler+0x778>)
 8002522:	2200      	movs	r2, #0
 8002524:	801a      	strh	r2, [r3, #0]
    Sync1WdCounter = 0;
 8002526:	4b4e      	ldr	r3, [pc, #312]	@ (8002660 <StartInputHandler+0x77c>)
 8002528:	2200      	movs	r2, #0
 800252a:	801a      	strh	r2, [r3, #0]
    Sync1WdValue = 0;
 800252c:	4b4d      	ldr	r3, [pc, #308]	@ (8002664 <StartInputHandler+0x780>)
 800252e:	2200      	movs	r2, #0
 8002530:	801a      	strh	r2, [r3, #0]
    bDcRunning = FALSE;
 8002532:	4b4d      	ldr	r3, [pc, #308]	@ (8002668 <StartInputHandler+0x784>)
 8002534:	2200      	movs	r2, #0
 8002536:	701a      	strb	r2, [r3, #0]
    bSmSyncSequenceValid = FALSE;
 8002538:	4b4c      	ldr	r3, [pc, #304]	@ (800266c <StartInputHandler+0x788>)
 800253a:	2200      	movs	r2, #0
 800253c:	701a      	strb	r2, [r3, #0]
    i16WaitForPllRunningTimeout = 0;
 800253e:	4b4c      	ldr	r3, [pc, #304]	@ (8002670 <StartInputHandler+0x78c>)
 8002540:	2200      	movs	r2, #0
 8002542:	801a      	strh	r2, [r3, #0]

/*ECATCHANGE_START(V5.13) ECAT1*/
    /*Get Sync mapped to AL Event indication*/
    {
        UINT8 u8TmpVar = 0;
 8002544:	2300      	movs	r3, #0
 8002546:	70fb      	strb	r3, [r7, #3]
        HW_EscReadByte(u8TmpVar, ESC_PDI_CONFIGURATION);
 8002548:	1cfb      	adds	r3, r7, #3
 800254a:	2201      	movs	r2, #1
 800254c:	f240 1151 	movw	r1, #337	@ 0x151
 8002550:	4618      	mov	r0, r3
 8002552:	f7fe f9f1 	bl	8000938 <HW_EscRead>
        if ((u8TmpVar & ESC_SYNC0_MAPPED_TO_ALEVENT) > 0)
 8002556:	78fb      	ldrb	r3, [r7, #3]
 8002558:	f003 0308 	and.w	r3, r3, #8
 800255c:	2b00      	cmp	r3, #0
 800255e:	dd06      	ble.n	800256e <StartInputHandler+0x68a>
        {
            u16ALEventMask |= SYNC0_EVENT;
 8002560:	4b3c      	ldr	r3, [pc, #240]	@ (8002654 <StartInputHandler+0x770>)
 8002562:	881b      	ldrh	r3, [r3, #0]
 8002564:	f043 0304 	orr.w	r3, r3, #4
 8002568:	b29a      	uxth	r2, r3
 800256a:	4b3a      	ldr	r3, [pc, #232]	@ (8002654 <StartInputHandler+0x770>)
 800256c:	801a      	strh	r2, [r3, #0]
        }

        if ((u8TmpVar & ESC_SYNC1_MAPPED_TO_ALEVENT) > 0)
 800256e:	78fb      	ldrb	r3, [r7, #3]
 8002570:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002574:	2b00      	cmp	r3, #0
 8002576:	dd06      	ble.n	8002586 <StartInputHandler+0x6a2>
        {
            u16ALEventMask |= SYNC1_EVENT;
 8002578:	4b36      	ldr	r3, [pc, #216]	@ (8002654 <StartInputHandler+0x770>)
 800257a:	881b      	ldrh	r3, [r3, #0]
 800257c:	f043 0308 	orr.w	r3, r3, #8
 8002580:	b29a      	uxth	r2, r3
 8002582:	4b34      	ldr	r3, [pc, #208]	@ (8002654 <StartInputHandler+0x770>)
 8002584:	801a      	strh	r2, [r3, #0]
        }
    }
/*ECATCHANGE_END(V5.13) ECAT1*/
    sSyncManInPar.u16SmEventMissedCounter = 0;
 8002586:	4b3b      	ldr	r3, [pc, #236]	@ (8002674 <StartInputHandler+0x790>)
 8002588:	2200      	movs	r2, #0
 800258a:	851a      	strh	r2, [r3, #40]	@ 0x28
    sSyncManInPar.u16CycleExceededCounter = 0;
 800258c:	4b39      	ldr	r3, [pc, #228]	@ (8002674 <StartInputHandler+0x790>)
 800258e:	2200      	movs	r2, #0
 8002590:	855a      	strh	r2, [r3, #42]	@ 0x2a
    sSyncManInPar.u8SyncError = 0;
 8002592:	4b38      	ldr	r3, [pc, #224]	@ (8002674 <StartInputHandler+0x790>)
 8002594:	2200      	movs	r2, #0
 8002596:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40


    sSyncManOutPar.u16SmEventMissedCounter = 0;
 800259a:	4b37      	ldr	r3, [pc, #220]	@ (8002678 <StartInputHandler+0x794>)
 800259c:	2200      	movs	r2, #0
 800259e:	851a      	strh	r2, [r3, #40]	@ 0x28
    sSyncManOutPar.u16CycleExceededCounter = 0;
 80025a0:	4b35      	ldr	r3, [pc, #212]	@ (8002678 <StartInputHandler+0x794>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    sSyncManOutPar.u8SyncError = 0;
 80025a6:	4b34      	ldr	r3, [pc, #208]	@ (8002678 <StartInputHandler+0x794>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* calculate the Sync0/Sync1 watchdog timeouts */
    if ( (dcControl & ESC_DC_SYNC0_ACTIVE_MASK) != 0 )
 80025ae:	7cfb      	ldrb	r3, [r7, #19]
 80025b0:	f003 0302 	and.w	r3, r3, #2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d078      	beq.n	80026aa <StartInputHandler+0x7c6>
    {
        /*calculate the Sync0 Watchdog counter value the minimum value is 1 ms
            if the sync0 cycle is greater 500us the Sync0 Wd value is 2*Sycn0 cycle */
        if(cycleTimeSync0 == 0)
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d103      	bne.n	80025c6 <StartInputHandler+0x6e2>
        {
            Sync0WdValue = 0;
 80025be:	4b26      	ldr	r3, [pc, #152]	@ (8002658 <StartInputHandler+0x774>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	801a      	strh	r2, [r3, #0]
 80025c4:	e018      	b.n	80025f8 <StartInputHandler+0x714>
        }
        else
        {
            UINT32 Sync0Cycle = cycleTimeSync0/100000;
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	095b      	lsrs	r3, r3, #5
 80025ca:	4a2c      	ldr	r2, [pc, #176]	@ (800267c <StartInputHandler+0x798>)
 80025cc:	fba2 2303 	umull	r2, r3, r2, r3
 80025d0:	09db      	lsrs	r3, r3, #7
 80025d2:	61bb      	str	r3, [r7, #24]

            if(Sync0Cycle < 5)
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	2b04      	cmp	r3, #4
 80025d8:	d803      	bhi.n	80025e2 <StartInputHandler+0x6fe>
            {
                /*Sync0 cycle less than 500us*/
                Sync0WdValue = 1;
 80025da:	4b1f      	ldr	r3, [pc, #124]	@ (8002658 <StartInputHandler+0x774>)
 80025dc:	2201      	movs	r2, #1
 80025de:	801a      	strh	r2, [r3, #0]
 80025e0:	e00a      	b.n	80025f8 <StartInputHandler+0x714>
            }
            else
            {
                Sync0WdValue = (UINT16)(Sync0Cycle*2)/10;
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	4a25      	ldr	r2, [pc, #148]	@ (8002680 <StartInputHandler+0x79c>)
 80025ec:	fba2 2303 	umull	r2, r3, r2, r3
 80025f0:	08db      	lsrs	r3, r3, #3
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	4b18      	ldr	r3, [pc, #96]	@ (8002658 <StartInputHandler+0x774>)
 80025f6:	801a      	strh	r2, [r3, #0]
            }
        }

        /* Calculate also the watchdog time for Sync1*/
        if ( (dcControl & ESC_DC_SYNC1_ACTIVE_MASK) != 0 )
 80025f8:	7cfb      	ldrb	r3, [r7, #19]
 80025fa:	f003 0304 	and.w	r3, r3, #4
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d053      	beq.n	80026aa <StartInputHandler+0x7c6>
        {
            if(shiftTimeSync1 < cycleTimeSync0)
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	429a      	cmp	r2, r3
 8002608:	d204      	bcs.n	8002614 <StartInputHandler+0x730>
        {
                /* Sync 1 has the same cycle time than Sync0 (maybe with a shift (shiftTimeSync1 > 0))*/
                Sync1WdValue = Sync0WdValue;
 800260a:	4b13      	ldr	r3, [pc, #76]	@ (8002658 <StartInputHandler+0x774>)
 800260c:	881a      	ldrh	r2, [r3, #0]
 800260e:	4b15      	ldr	r3, [pc, #84]	@ (8002664 <StartInputHandler+0x780>)
 8002610:	801a      	strh	r2, [r3, #0]
 8002612:	e04a      	b.n	80026aa <StartInputHandler+0x7c6>
        }
        else
        {
                /* Sync1 cycle is larger than Sync0 (e.g. subordinated Sync0 cycles) */
                UINT32 Sync1Cycle = (shiftTimeSync1  + cycleTimeSync0 )/100000;
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	4413      	add	r3, r2
 800261a:	095b      	lsrs	r3, r3, #5
 800261c:	4a17      	ldr	r2, [pc, #92]	@ (800267c <StartInputHandler+0x798>)
 800261e:	fba2 2303 	umull	r2, r3, r2, r3
 8002622:	09db      	lsrs	r3, r3, #7
 8002624:	617b      	str	r3, [r7, #20]
                if(Sync1Cycle < 5)
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	2b04      	cmp	r3, #4
 800262a:	d82b      	bhi.n	8002684 <StartInputHandler+0x7a0>
                {
                    /*Sync0 cycle less than 500us*/
                    Sync1WdValue = 1;
 800262c:	4b0d      	ldr	r3, [pc, #52]	@ (8002664 <StartInputHandler+0x780>)
 800262e:	2201      	movs	r2, #1
 8002630:	801a      	strh	r2, [r3, #0]
 8002632:	e030      	b.n	8002696 <StartInputHandler+0x7b2>
 8002634:	240004d4 	.word	0x240004d4
 8002638:	240004e4 	.word	0x240004e4
 800263c:	240005a4 	.word	0x240005a4
 8002640:	240004f6 	.word	0x240004f6
 8002644:	14f8b589 	.word	0x14f8b589
 8002648:	240004fe 	.word	0x240004fe
 800264c:	240004cb 	.word	0x240004cb
 8002650:	240004e9 	.word	0x240004e9
 8002654:	24000504 	.word	0x24000504
 8002658:	240004de 	.word	0x240004de
 800265c:	240004dc 	.word	0x240004dc
 8002660:	240004e0 	.word	0x240004e0
 8002664:	240004e2 	.word	0x240004e2
 8002668:	240004d0 	.word	0x240004d0
 800266c:	240004d6 	.word	0x240004d6
 8002670:	240004d8 	.word	0x240004d8
 8002674:	240005ec 	.word	0x240005ec
 8002678:	240005a8 	.word	0x240005a8
 800267c:	0a7c5ac5 	.word	0x0a7c5ac5
 8002680:	cccccccd 	.word	0xcccccccd
                }
                else
                {
                    Sync1WdValue = (UINT16)((Sync1Cycle*2)/10);
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	4a12      	ldr	r2, [pc, #72]	@ (80026d4 <StartInputHandler+0x7f0>)
 800268a:	fba2 2303 	umull	r2, r3, r2, r3
 800268e:	08db      	lsrs	r3, r3, #3
 8002690:	b29a      	uxth	r2, r3
 8002692:	4b11      	ldr	r3, [pc, #68]	@ (80026d8 <StartInputHandler+0x7f4>)
 8002694:	801a      	strh	r2, [r3, #0]
                }

                /* add one Sync0 cycle because the Sync1 cycle starts on the next Sync0 after the Sync1 signal */
                Sync1WdValue += Sync0WdValue/2;
 8002696:	4b11      	ldr	r3, [pc, #68]	@ (80026dc <StartInputHandler+0x7f8>)
 8002698:	881b      	ldrh	r3, [r3, #0]
 800269a:	085b      	lsrs	r3, r3, #1
 800269c:	b29a      	uxth	r2, r3
 800269e:	4b0e      	ldr	r3, [pc, #56]	@ (80026d8 <StartInputHandler+0x7f4>)
 80026a0:	881b      	ldrh	r3, [r3, #0]
 80026a2:	4413      	add	r3, r2
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	4b0c      	ldr	r3, [pc, #48]	@ (80026d8 <StartInputHandler+0x7f4>)
 80026a8:	801a      	strh	r2, [r3, #0]
            }
    }
    }

    if(nPdOutputSize > 0)
 80026aa:	4b0d      	ldr	r3, [pc, #52]	@ (80026e0 <StartInputHandler+0x7fc>)
 80026ac:	881b      	ldrh	r3, [r3, #0]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d002      	beq.n	80026b8 <StartInputHandler+0x7d4>
    {
        EnableSyncManChannel(PROCESS_DATA_OUT);
 80026b2:	2002      	movs	r0, #2
 80026b4:	f7ff fa31 	bl	8001b1a <EnableSyncManChannel>
    }

    if(nPdInputSize > 0)
 80026b8:	4b0a      	ldr	r3, [pc, #40]	@ (80026e4 <StartInputHandler+0x800>)
 80026ba:	881b      	ldrh	r3, [r3, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d002      	beq.n	80026c6 <StartInputHandler+0x7e2>
    {
        EnableSyncManChannel(PROCESS_DATA_IN);
 80026c0:	2003      	movs	r0, #3
 80026c2:	f7ff fa2a 	bl	8001b1a <EnableSyncManChannel>
    }

    /*write initial input data*/
    PDO_InputMapping();
 80026c6:	f7fe fcdf 	bl	8001088 <PDO_InputMapping>

    return ALSTATUSCODE_NOERROR;
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3738      	adds	r7, #56	@ 0x38
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	cccccccd 	.word	0xcccccccd
 80026d8:	240004e2 	.word	0x240004e2
 80026dc:	240004de 	.word	0x240004de
 80026e0:	240004f6 	.word	0x240004f6
 80026e4:	240004f4 	.word	0x240004f4

080026e8 <StartOutputHandler>:
 \brief  and the state transition would be refused if outputs are missing

*////////////////////////////////////////////////////////////////////////////////////////

UINT16 StartOutputHandler(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
    /* by default the SO transition should be completed in AlControlRes().
       required to support also masters which starts to send process data after the SO transition was triggered
       (if the master don't send process data within "SAFEOP2OPTIMEOUT" the transition is rejected)*/
    UINT16 result = NOERROR_INWORK;
 80026ee:	23ff      	movs	r3, #255	@ 0xff
 80026f0:	80fb      	strh	r3, [r7, #6]
    /*ECATCHANGE_START(V5.13) ESM1*/
    if(STATE_VALID(u8LocalErrorState))
 80026f2:	4b1d      	ldr	r3, [pc, #116]	@ (8002768 <StartOutputHandler+0x80>)
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	f003 030f 	and.w	r3, r3, #15
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d011      	beq.n	8002722 <StartOutputHandler+0x3a>
 80026fe:	4b1a      	ldr	r3, [pc, #104]	@ (8002768 <StartOutputHandler+0x80>)
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	f003 030f 	and.w	r3, r3, #15
 8002706:	2b02      	cmp	r3, #2
 8002708:	d00b      	beq.n	8002722 <StartOutputHandler+0x3a>
 800270a:	4b17      	ldr	r3, [pc, #92]	@ (8002768 <StartOutputHandler+0x80>)
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	f003 030f 	and.w	r3, r3, #15
 8002712:	2b04      	cmp	r3, #4
 8002714:	d005      	beq.n	8002722 <StartOutputHandler+0x3a>
 8002716:	4b14      	ldr	r3, [pc, #80]	@ (8002768 <StartOutputHandler+0x80>)
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	f003 030f 	and.w	r3, r3, #15
 800271e:	2b08      	cmp	r3, #8
 8002720:	d102      	bne.n	8002728 <StartOutputHandler+0x40>
/*ECATCHANGE_END(V5.13) ESM1*/
    {
        /*Local error still exists => skip state request to OP and response with "u16LocalErrorCode"*/
        return u16LocalErrorCode;
 8002722:	4b12      	ldr	r3, [pc, #72]	@ (800276c <StartOutputHandler+0x84>)
 8002724:	881b      	ldrh	r3, [r3, #0]
 8002726:	e018      	b.n	800275a <StartOutputHandler+0x72>
    }
/*The application ESM function is separated from this function to handle pending transitions*/


    /*DC synchronisation is active wait until pll is valid*/
    if(bDcSyncActive)
 8002728:	4b11      	ldr	r3, [pc, #68]	@ (8002770 <StartOutputHandler+0x88>)
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d005      	beq.n	800273c <StartOutputHandler+0x54>
    {
        i16WaitForPllRunningTimeout = 200;
 8002730:	4b10      	ldr	r3, [pc, #64]	@ (8002774 <StartOutputHandler+0x8c>)
 8002732:	22c8      	movs	r2, #200	@ 0xc8
 8002734:	801a      	strh	r2, [r3, #0]

        i16WaitForPllRunningCnt = 0;
 8002736:	4b10      	ldr	r3, [pc, #64]	@ (8002778 <StartOutputHandler+0x90>)
 8002738:	2200      	movs	r2, #0
 800273a:	801a      	strh	r2, [r3, #0]
    }



    sSyncManOutPar.u16SmEventMissedCounter = 0;
 800273c:	4b0f      	ldr	r3, [pc, #60]	@ (800277c <StartOutputHandler+0x94>)
 800273e:	2200      	movs	r2, #0
 8002740:	851a      	strh	r2, [r3, #40]	@ 0x28
    sSyncManOutPar.u8SyncError = 0;
 8002742:	4b0e      	ldr	r3, [pc, #56]	@ (800277c <StartOutputHandler+0x94>)
 8002744:	2200      	movs	r2, #0
 8002746:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40


    sSyncManInPar.u16SmEventMissedCounter = 0;
 800274a:	4b0d      	ldr	r3, [pc, #52]	@ (8002780 <StartOutputHandler+0x98>)
 800274c:	2200      	movs	r2, #0
 800274e:	851a      	strh	r2, [r3, #40]	@ 0x28
    sSyncManInPar.u8SyncError = 0;
 8002750:	4b0b      	ldr	r3, [pc, #44]	@ (8002780 <StartOutputHandler+0x98>)
 8002752:	2200      	movs	r2, #0
 8002754:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40


    return result;
 8002758:	88fb      	ldrh	r3, [r7, #6]
}
 800275a:	4618      	mov	r0, r3
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	240004ee 	.word	0x240004ee
 800276c:	240004ec 	.word	0x240004ec
 8002770:	240004cc 	.word	0x240004cc
 8002774:	240004d8 	.word	0x240004d8
 8002778:	240004da 	.word	0x240004da
 800277c:	240005a8 	.word	0x240005a8
 8002780:	240005ec 	.word	0x240005ec

08002784 <StopOutputHandler>:
 \brief  the state transition can be delayed by returning NOERROR_INWORK

*////////////////////////////////////////////////////////////////////////////////////////

void StopOutputHandler(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
    /* reset the flags that outputs were received and that the slave is in OP */
    bEcatFirstOutputsReceived = FALSE;
 8002788:	4b05      	ldr	r3, [pc, #20]	@ (80027a0 <StopOutputHandler+0x1c>)
 800278a:	2200      	movs	r2, #0
 800278c:	701a      	strb	r2, [r3, #0]
    bEcatOutputUpdateRunning = FALSE;
 800278e:	4b05      	ldr	r3, [pc, #20]	@ (80027a4 <StopOutputHandler+0x20>)
 8002790:	2200      	movs	r2, #0
 8002792:	701a      	strb	r2, [r3, #0]
}
 8002794:	bf00      	nop
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	240004ca 	.word	0x240004ca
 80027a4:	240004c8 	.word	0x240004c8

080027a8 <StopInputHandler>:
  \brief    This function is called in case of the state transition from SAFEOP to PREOP

*////////////////////////////////////////////////////////////////////////////////////////

void StopInputHandler(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
    if(nPdOutputSize > 0)
 80027ae:	4b34      	ldr	r3, [pc, #208]	@ (8002880 <StopInputHandler+0xd8>)
 80027b0:	881b      	ldrh	r3, [r3, #0]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d002      	beq.n	80027bc <StopInputHandler+0x14>
    {
        /* disable the Sync Manager Channel 2 (outputs) */
        DisableSyncManChannel(PROCESS_DATA_OUT);
 80027b6:	2002      	movs	r0, #2
 80027b8:	f7ff f988 	bl	8001acc <DisableSyncManChannel>
    }

    if(nPdInputSize > 0)
 80027bc:	4b31      	ldr	r3, [pc, #196]	@ (8002884 <StopInputHandler+0xdc>)
 80027be:	881b      	ldrh	r3, [r3, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d002      	beq.n	80027ca <StopInputHandler+0x22>
    {
        /*disable Sync Manager 3 (inputs) if no outputs available*/
        DisableSyncManChannel(PROCESS_DATA_IN);
 80027c4:	2003      	movs	r0, #3
 80027c6:	f7ff f981 	bl	8001acc <DisableSyncManChannel>

    /* reset the events in the AL Event mask register (0x204) */
/*ECATCHANGE_START(V5.13) ECAT1*/
/*ECATCHANGE_END(V5.13) ECAT1*/
    {
        UINT16 ResetMask = SYNC0_EVENT | SYNC1_EVENT;
 80027ca:	230c      	movs	r3, #12
 80027cc:	80fb      	strh	r3, [r7, #6]
        ResetMask |= PROCESS_OUTPUT_EVENT;
 80027ce:	88fb      	ldrh	r3, [r7, #6]
 80027d0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80027d4:	80fb      	strh	r3, [r7, #6]
        ResetMask |= PROCESS_INPUT_EVENT;
 80027d6:	88fb      	ldrh	r3, [r7, #6]
 80027d8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80027dc:	80fb      	strh	r3, [r7, #6]

    ResetALEventMask( ~(ResetMask) );
 80027de:	88fb      	ldrh	r3, [r7, #6]
 80027e0:	43db      	mvns	r3, r3
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff f8f7 	bl	80019d8 <ResetALEventMask>
    }
    /* reset the flags */
    bEcatFirstOutputsReceived = FALSE;
 80027ea:	4b27      	ldr	r3, [pc, #156]	@ (8002888 <StopInputHandler+0xe0>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	701a      	strb	r2, [r3, #0]
    bEscIntEnabled = FALSE;
 80027f0:	4b26      	ldr	r3, [pc, #152]	@ (800288c <StopInputHandler+0xe4>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	701a      	strb	r2, [r3, #0]
/*The application ESM function is separated from this function to handle pending transitions*/

    bDcSyncActive = FALSE;
 80027f6:	4b26      	ldr	r3, [pc, #152]	@ (8002890 <StopInputHandler+0xe8>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	701a      	strb	r2, [r3, #0]
    bDcRunning = FALSE;
 80027fc:	4b25      	ldr	r3, [pc, #148]	@ (8002894 <StopInputHandler+0xec>)
 80027fe:	2200      	movs	r2, #0
 8002800:	701a      	strb	r2, [r3, #0]
    bSmSyncSequenceValid = FALSE;
 8002802:	4b25      	ldr	r3, [pc, #148]	@ (8002898 <StopInputHandler+0xf0>)
 8002804:	2200      	movs	r2, #0
 8002806:	701a      	strb	r2, [r3, #0]
    u16SmSync0Value = 0;
 8002808:	4b24      	ldr	r3, [pc, #144]	@ (800289c <StopInputHandler+0xf4>)
 800280a:	2200      	movs	r2, #0
 800280c:	801a      	strh	r2, [r3, #0]
    u16SmSync0Counter = 0;
 800280e:	4b24      	ldr	r3, [pc, #144]	@ (80028a0 <StopInputHandler+0xf8>)
 8002810:	2200      	movs	r2, #0
 8002812:	801a      	strh	r2, [r3, #0]

    Sync0WdValue = 0;
 8002814:	4b23      	ldr	r3, [pc, #140]	@ (80028a4 <StopInputHandler+0xfc>)
 8002816:	2200      	movs	r2, #0
 8002818:	801a      	strh	r2, [r3, #0]
    Sync0WdCounter = 0;
 800281a:	4b23      	ldr	r3, [pc, #140]	@ (80028a8 <StopInputHandler+0x100>)
 800281c:	2200      	movs	r2, #0
 800281e:	801a      	strh	r2, [r3, #0]
    Sync1WdCounter = 0;
 8002820:	4b22      	ldr	r3, [pc, #136]	@ (80028ac <StopInputHandler+0x104>)
 8002822:	2200      	movs	r2, #0
 8002824:	801a      	strh	r2, [r3, #0]
    Sync1WdValue = 0;
 8002826:	4b22      	ldr	r3, [pc, #136]	@ (80028b0 <StopInputHandler+0x108>)
 8002828:	2200      	movs	r2, #0
 800282a:	801a      	strh	r2, [r3, #0]
    LatchInputSync0Value = 0;
 800282c:	4b21      	ldr	r3, [pc, #132]	@ (80028b4 <StopInputHandler+0x10c>)
 800282e:	2200      	movs	r2, #0
 8002830:	801a      	strh	r2, [r3, #0]
    LatchInputSync0Counter = 0;
 8002832:	4b21      	ldr	r3, [pc, #132]	@ (80028b8 <StopInputHandler+0x110>)
 8002834:	2200      	movs	r2, #0
 8002836:	801a      	strh	r2, [r3, #0]


    sSyncManOutPar.u16SmEventMissedCounter = 0;
 8002838:	4b20      	ldr	r3, [pc, #128]	@ (80028bc <StopInputHandler+0x114>)
 800283a:	2200      	movs	r2, #0
 800283c:	851a      	strh	r2, [r3, #40]	@ 0x28
    sSyncManOutPar.u16CycleExceededCounter = 0;
 800283e:	4b1f      	ldr	r3, [pc, #124]	@ (80028bc <StopInputHandler+0x114>)
 8002840:	2200      	movs	r2, #0
 8002842:	855a      	strh	r2, [r3, #42]	@ 0x2a
    sSyncManOutPar.u8SyncError = 0;
 8002844:	4b1d      	ldr	r3, [pc, #116]	@ (80028bc <StopInputHandler+0x114>)
 8002846:	2200      	movs	r2, #0
 8002848:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40


    sSyncManInPar.u16SmEventMissedCounter = 0;
 800284c:	4b1c      	ldr	r3, [pc, #112]	@ (80028c0 <StopInputHandler+0x118>)
 800284e:	2200      	movs	r2, #0
 8002850:	851a      	strh	r2, [r3, #40]	@ 0x28
    sSyncManInPar.u16CycleExceededCounter = 0;
 8002852:	4b1b      	ldr	r3, [pc, #108]	@ (80028c0 <StopInputHandler+0x118>)
 8002854:	2200      	movs	r2, #0
 8002856:	855a      	strh	r2, [r3, #42]	@ 0x2a
    sSyncManInPar.u8SyncError = 0;
 8002858:	4b19      	ldr	r3, [pc, #100]	@ (80028c0 <StopInputHandler+0x118>)
 800285a:	2200      	movs	r2, #0
 800285c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    i16WaitForPllRunningTimeout = 0;
 8002860:	4b18      	ldr	r3, [pc, #96]	@ (80028c4 <StopInputHandler+0x11c>)
 8002862:	2200      	movs	r2, #0
 8002864:	801a      	strh	r2, [r3, #0]

    bWdTrigger = FALSE;
 8002866:	4b18      	ldr	r3, [pc, #96]	@ (80028c8 <StopInputHandler+0x120>)
 8002868:	2200      	movs	r2, #0
 800286a:	701a      	strb	r2, [r3, #0]
    bEcatInputUpdateRunning = FALSE;
 800286c:	4b17      	ldr	r3, [pc, #92]	@ (80028cc <StopInputHandler+0x124>)
 800286e:	2200      	movs	r2, #0
 8002870:	701a      	strb	r2, [r3, #0]

    /*Indicate no user specified Sync mode*/
    bSyncSetByUser = FALSE;
 8002872:	4b17      	ldr	r3, [pc, #92]	@ (80028d0 <StopInputHandler+0x128>)
 8002874:	2200      	movs	r2, #0
 8002876:	701a      	strb	r2, [r3, #0]
}
 8002878:	bf00      	nop
 800287a:	3708      	adds	r7, #8
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	240004f6 	.word	0x240004f6
 8002884:	240004f4 	.word	0x240004f4
 8002888:	240004ca 	.word	0x240004ca
 800288c:	240004e9 	.word	0x240004e9
 8002890:	240004cc 	.word	0x240004cc
 8002894:	240004d0 	.word	0x240004d0
 8002898:	240004d6 	.word	0x240004d6
 800289c:	240004d4 	.word	0x240004d4
 80028a0:	240004d2 	.word	0x240004d2
 80028a4:	240004de 	.word	0x240004de
 80028a8:	240004dc 	.word	0x240004dc
 80028ac:	240004e0 	.word	0x240004e0
 80028b0:	240004e2 	.word	0x240004e2
 80028b4:	240004e4 	.word	0x240004e4
 80028b8:	240004e6 	.word	0x240004e6
 80028bc:	240005a8 	.word	0x240005a8
 80028c0:	240005ec 	.word	0x240005ec
 80028c4:	240004d8 	.word	0x240004d8
 80028c8:	240004cb 	.word	0x240004cb
 80028cc:	240004c9 	.word	0x240004c9
 80028d0:	240005a1 	.word	0x240005a1

080028d4 <BackToInitTransition>:
\brief    This function is called when a X to Init transition is completed

*////////////////////////////////////////////////////////////////////////////////////////

void BackToInitTransition(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
    /* Reset indication that the user has written a sync mode*/
    bSyncSetByUser = FALSE;
 80028d8:	4b03      	ldr	r3, [pc, #12]	@ (80028e8 <BackToInitTransition+0x14>)
 80028da:	2200      	movs	r2, #0
 80028dc:	701a      	strb	r2, [r3, #0]
}
 80028de:	bf00      	nop
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	240005a1 	.word	0x240005a1

080028ec <SetALStatus>:
 \param alStatusCode    New AL Status Code (written to register 0x134)

  \brief  The function changes the state of the EtherCAT ASIC to the requested.
*////////////////////////////////////////////////////////////////////////////////////////
void SetALStatus(UINT8 alStatus, UINT16 alStatusCode)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	4603      	mov	r3, r0
 80028f4:	460a      	mov	r2, r1
 80028f6:	71fb      	strb	r3, [r7, #7]
 80028f8:	4613      	mov	r3, r2
 80028fa:	80bb      	strh	r3, [r7, #4]
    UINT16 Value = alStatusCode;
 80028fc:	88bb      	ldrh	r3, [r7, #4]
 80028fe:	81fb      	strh	r3, [r7, #14]

    /*update global status variable if required*/
    if(nAlStatus != alStatus)
 8002900:	4b26      	ldr	r3, [pc, #152]	@ (800299c <SetALStatus+0xb0>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	79fa      	ldrb	r2, [r7, #7]
 8002906:	429a      	cmp	r2, r3
 8002908:	d002      	beq.n	8002910 <SetALStatus+0x24>
    {
        nAlStatus = alStatus;
 800290a:	4a24      	ldr	r2, [pc, #144]	@ (800299c <SetALStatus+0xb0>)
 800290c:	79fb      	ldrb	r3, [r7, #7]
 800290e:	7013      	strb	r3, [r2, #0]
    }

    /*Handle Explicit Device ID is requested*/
    if(bExplicitDevIdRequested && !(nAlStatus & STATE_CHANGE) && alStatusCode == 0 && ((nAlStatus & STATE_MASK) != STATE_BOOT))
 8002910:	4b23      	ldr	r3, [pc, #140]	@ (80029a0 <SetALStatus+0xb4>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d019      	beq.n	800294c <SetALStatus+0x60>
 8002918:	4b20      	ldr	r3, [pc, #128]	@ (800299c <SetALStatus+0xb0>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	f003 0310 	and.w	r3, r3, #16
 8002920:	2b00      	cmp	r3, #0
 8002922:	d113      	bne.n	800294c <SetALStatus+0x60>
 8002924:	88bb      	ldrh	r3, [r7, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d110      	bne.n	800294c <SetALStatus+0x60>
 800292a:	4b1c      	ldr	r3, [pc, #112]	@ (800299c <SetALStatus+0xb0>)
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	f003 030f 	and.w	r3, r3, #15
 8002932:	2b03      	cmp	r3, #3
 8002934:	d00a      	beq.n	800294c <SetALStatus+0x60>
    {
/*ECATCHANGE_START(V5.13) ECAT2*/
        Value = u16IdValue;
 8002936:	4b1b      	ldr	r3, [pc, #108]	@ (80029a4 <SetALStatus+0xb8>)
 8002938:	881b      	ldrh	r3, [r3, #0]
 800293a:	81fb      	strh	r3, [r7, #14]
/*ECATCHANGE_END(V5.13) ECAT2*/
        nAlStatus |= STATE_DEVID;
 800293c:	4b17      	ldr	r3, [pc, #92]	@ (800299c <SetALStatus+0xb0>)
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	f043 0320 	orr.w	r3, r3, #32
 8002944:	b2da      	uxtb	r2, r3
 8002946:	4b15      	ldr	r3, [pc, #84]	@ (800299c <SetALStatus+0xb0>)
 8002948:	701a      	strb	r2, [r3, #0]
 800294a:	e006      	b.n	800295a <SetALStatus+0x6e>
    }
    else
    {
        nAlStatus &= ~STATE_DEVID;
 800294c:	4b13      	ldr	r3, [pc, #76]	@ (800299c <SetALStatus+0xb0>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	f023 0320 	bic.w	r3, r3, #32
 8002954:	b2da      	uxtb	r2, r3
 8002956:	4b11      	ldr	r3, [pc, #68]	@ (800299c <SetALStatus+0xb0>)
 8002958:	701a      	strb	r2, [r3, #0]
    }

    if (alStatusCode != 0xFFFF)
 800295a:	88bb      	ldrh	r3, [r7, #4]
 800295c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002960:	4293      	cmp	r3, r2
 8002962:	d009      	beq.n	8002978 <SetALStatus+0x8c>
    {
        Value = SWAPWORD(Value);
 8002964:	89fb      	ldrh	r3, [r7, #14]
 8002966:	81fb      	strh	r3, [r7, #14]

        HW_EscWriteWord(Value,ESC_AL_STATUS_CODE_OFFSET);
 8002968:	f107 030e 	add.w	r3, r7, #14
 800296c:	2202      	movs	r2, #2
 800296e:	f44f 719a 	mov.w	r1, #308	@ 0x134
 8002972:	4618      	mov	r0, r3
 8002974:	f7fe f810 	bl	8000998 <HW_EscWrite>
    }

    Value = nAlStatus;
 8002978:	4b08      	ldr	r3, [pc, #32]	@ (800299c <SetALStatus+0xb0>)
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	81fb      	strh	r3, [r7, #14]
    Value = SWAPWORD(Value);
 800297e:	89fb      	ldrh	r3, [r7, #14]
 8002980:	81fb      	strh	r3, [r7, #14]
    HW_EscWriteWord(Value,ESC_AL_STATUS_OFFSET);
 8002982:	f107 030e 	add.w	r3, r7, #14
 8002986:	2202      	movs	r2, #2
 8002988:	f44f 7198 	mov.w	r1, #304	@ 0x130
 800298c:	4618      	mov	r0, r3
 800298e:	f7fe f803 	bl	8000998 <HW_EscWrite>

}
 8002992:	bf00      	nop
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	240004fc 	.word	0x240004fc
 80029a0:	240004fd 	.word	0x240004fd
 80029a4:	24000506 	.word	0x24000506

080029a8 <AL_ControlInd>:
              alControl contains the requested new state (INIT, PRE_OP or SAFE_OP)

*////////////////////////////////////////////////////////////////////////////////////////

void AL_ControlInd(UINT8 alControl, UINT16 alStatusCode)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	4603      	mov	r3, r0
 80029b0:	460a      	mov	r2, r1
 80029b2:	71fb      	strb	r3, [r7, #7]
 80029b4:	4613      	mov	r3, r2
 80029b6:	80bb      	strh	r3, [r7, #4]
    UINT16        result = 0;
 80029b8:	2300      	movs	r3, #0
 80029ba:	81fb      	strh	r3, [r7, #14]
    UINT8            bErrAck = 0;
 80029bc:	2300      	movs	r3, #0
 80029be:	737b      	strb	r3, [r7, #13]
    UINT8         stateTrans;
    /*deactivate ESM timeout counter*/
    EsmTimeoutCounter = -1;
 80029c0:	4bdb      	ldr	r3, [pc, #876]	@ (8002d30 <AL_ControlInd+0x388>)
 80029c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80029c6:	801a      	strh	r2, [r3, #0]
    bApplEsmPending = TRUE;
 80029c8:	4bda      	ldr	r3, [pc, #872]	@ (8002d34 <AL_ControlInd+0x38c>)
 80029ca:	2201      	movs	r2, #1
 80029cc:	701a      	strb	r2, [r3, #0]

    /* reset the Error Flag in case of acknowledge by the Master */
    if ( alControl & STATE_CHANGE )
 80029ce:	79fb      	ldrb	r3, [r7, #7]
 80029d0:	f003 0310 	and.w	r3, r3, #16
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d009      	beq.n	80029ec <AL_ControlInd+0x44>
    {
        bErrAck = 1;
 80029d8:	2301      	movs	r3, #1
 80029da:	737b      	strb	r3, [r7, #13]
        nAlStatus &= ~STATE_CHANGE;
 80029dc:	4bd6      	ldr	r3, [pc, #856]	@ (8002d38 <AL_ControlInd+0x390>)
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	f023 0310 	bic.w	r3, r3, #16
 80029e4:	b2da      	uxtb	r2, r3
 80029e6:	4bd4      	ldr	r3, [pc, #848]	@ (8002d38 <AL_ControlInd+0x390>)
 80029e8:	701a      	strb	r2, [r3, #0]
 80029ea:	e012      	b.n	8002a12 <AL_ControlInd+0x6a>
        /*enable SM2 is moved to state transition block. First check SM Settings.*/
    }
    else if ((nAlStatus & STATE_CHANGE)
 80029ec:	4bd2      	ldr	r3, [pc, #840]	@ (8002d38 <AL_ControlInd+0x390>)
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	f003 0310 	and.w	r3, r3, #16
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d005      	beq.n	8002a04 <AL_ControlInd+0x5c>
        // HBu 17.04.08: the error has to be acknowledged before when sending the same (or a higher) state
        //               (the error was acknowledged with the same state before independent of the acknowledge flag)
        /*Error Acknowledge with 0xX1 is allowed*/
        && (alControl & STATE_MASK) != STATE_INIT)
 80029f8:	79fb      	ldrb	r3, [r7, #7]
 80029fa:	f003 030f 	and.w	r3, r3, #15
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	f040 8392 	bne.w	8003128 <AL_ControlInd+0x780>
           and the new state request will be ignored */
        return;
    }
    else
    {
        nAlStatus &= STATE_MASK;
 8002a04:	4bcc      	ldr	r3, [pc, #816]	@ (8002d38 <AL_ControlInd+0x390>)
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	f003 030f 	and.w	r3, r3, #15
 8002a0c:	b2da      	uxtb	r2, r3
 8002a0e:	4bca      	ldr	r3, [pc, #808]	@ (8002d38 <AL_ControlInd+0x390>)
 8002a10:	701a      	strb	r2, [r3, #0]

    

    /* generate a variable for the state transition
      (Bit 0-3: new state (AL Control), Bit 4-7: old state (AL Status) */
    alControl &= STATE_MASK;
 8002a12:	79fb      	ldrb	r3, [r7, #7]
 8002a14:	f003 030f 	and.w	r3, r3, #15
 8002a18:	71fb      	strb	r3, [r7, #7]
    stateTrans = nAlStatus;
 8002a1a:	4bc7      	ldr	r3, [pc, #796]	@ (8002d38 <AL_ControlInd+0x390>)
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	733b      	strb	r3, [r7, #12]
    stateTrans <<= 4;
 8002a20:	7b3b      	ldrb	r3, [r7, #12]
 8002a22:	011b      	lsls	r3, r3, #4
 8002a24:	733b      	strb	r3, [r7, #12]
    stateTrans += alControl;
 8002a26:	7b3a      	ldrb	r2, [r7, #12]
 8002a28:	79fb      	ldrb	r3, [r7, #7]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	733b      	strb	r3, [r7, #12]

    /* check the SYNCM settings depending on the state transition */
    switch ( stateTrans )
 8002a2e:	7b3b      	ldrb	r3, [r7, #12]
 8002a30:	2b88      	cmp	r3, #136	@ 0x88
 8002a32:	d074      	beq.n	8002b1e <AL_ControlInd+0x176>
 8002a34:	2b88      	cmp	r3, #136	@ 0x88
 8002a36:	dc7b      	bgt.n	8002b30 <AL_ControlInd+0x188>
 8002a38:	2b84      	cmp	r3, #132	@ 0x84
 8002a3a:	d070      	beq.n	8002b1e <AL_ControlInd+0x176>
 8002a3c:	2b84      	cmp	r3, #132	@ 0x84
 8002a3e:	dc77      	bgt.n	8002b30 <AL_ControlInd+0x188>
 8002a40:	2b82      	cmp	r3, #130	@ 0x82
 8002a42:	d05d      	beq.n	8002b00 <AL_ControlInd+0x158>
 8002a44:	2b82      	cmp	r3, #130	@ 0x82
 8002a46:	dc73      	bgt.n	8002b30 <AL_ControlInd+0x188>
 8002a48:	2b12      	cmp	r3, #18
 8002a4a:	d059      	beq.n	8002b00 <AL_ControlInd+0x158>
 8002a4c:	2b12      	cmp	r3, #18
 8002a4e:	db6f      	blt.n	8002b30 <AL_ControlInd+0x188>
 8002a50:	2b48      	cmp	r3, #72	@ 0x48
 8002a52:	dc6d      	bgt.n	8002b30 <AL_ControlInd+0x188>
 8002a54:	2b22      	cmp	r3, #34	@ 0x22
 8002a56:	db6b      	blt.n	8002b30 <AL_ControlInd+0x188>
 8002a58:	3b22      	subs	r3, #34	@ 0x22
 8002a5a:	2b26      	cmp	r3, #38	@ 0x26
 8002a5c:	d868      	bhi.n	8002b30 <AL_ControlInd+0x188>
 8002a5e:	a201      	add	r2, pc, #4	@ (adr r2, 8002a64 <AL_ControlInd+0xbc>)
 8002a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a64:	08002b01 	.word	0x08002b01
 8002a68:	08002b31 	.word	0x08002b31
 8002a6c:	08002b0d 	.word	0x08002b0d
 8002a70:	08002b31 	.word	0x08002b31
 8002a74:	08002b31 	.word	0x08002b31
 8002a78:	08002b31 	.word	0x08002b31
 8002a7c:	08002b31 	.word	0x08002b31
 8002a80:	08002b31 	.word	0x08002b31
 8002a84:	08002b31 	.word	0x08002b31
 8002a88:	08002b31 	.word	0x08002b31
 8002a8c:	08002b31 	.word	0x08002b31
 8002a90:	08002b31 	.word	0x08002b31
 8002a94:	08002b31 	.word	0x08002b31
 8002a98:	08002b31 	.word	0x08002b31
 8002a9c:	08002b31 	.word	0x08002b31
 8002aa0:	08002b31 	.word	0x08002b31
 8002aa4:	08002b31 	.word	0x08002b31
 8002aa8:	08002b31 	.word	0x08002b31
 8002aac:	08002b31 	.word	0x08002b31
 8002ab0:	08002b31 	.word	0x08002b31
 8002ab4:	08002b31 	.word	0x08002b31
 8002ab8:	08002b31 	.word	0x08002b31
 8002abc:	08002b31 	.word	0x08002b31
 8002ac0:	08002b31 	.word	0x08002b31
 8002ac4:	08002b31 	.word	0x08002b31
 8002ac8:	08002b31 	.word	0x08002b31
 8002acc:	08002b31 	.word	0x08002b31
 8002ad0:	08002b31 	.word	0x08002b31
 8002ad4:	08002b31 	.word	0x08002b31
 8002ad8:	08002b31 	.word	0x08002b31
 8002adc:	08002b31 	.word	0x08002b31
 8002ae0:	08002b31 	.word	0x08002b31
 8002ae4:	08002b01 	.word	0x08002b01
 8002ae8:	08002b31 	.word	0x08002b31
 8002aec:	08002b1f 	.word	0x08002b1f
 8002af0:	08002b31 	.word	0x08002b31
 8002af4:	08002b31 	.word	0x08002b31
 8002af8:	08002b31 	.word	0x08002b31
 8002afc:	08002b1f 	.word	0x08002b1f
    case SAFEOP_2_PREOP:
    case PREOP_2_PREOP:
        /* in PREOP only the SYNCM settings for SYNCM0 and SYNCM1 (mailbox)
           are checked, if result is unequal 0, the slave will stay in or
           switch to INIT and set the ErrorInd Bit (bit 4) of the AL-Status */
        result = CheckSmSettings(MAILBOX_READ+1);
 8002b00:	2002      	movs	r0, #2
 8002b02:	f7ff f831 	bl	8001b68 <CheckSmSettings>
 8002b06:	4603      	mov	r3, r0
 8002b08:	81fb      	strh	r3, [r7, #14]
        break;
 8002b0a:	e011      	b.n	8002b30 <AL_ControlInd+0x188>
        /* before checking the SYNCM settings for SYNCM2 and SYNCM3 (process data)
           the expected length of input data (nPdInputSize) and output data (nPdOutputSize)
            could be adapted (changed by PDO-Assign and/or PDO-Mapping)
            if result is unequal 0, the slave will stay in PREOP and set
            the ErrorInd Bit (bit 4) of the AL-Status */
        result = APPL_GenerateMapping(&nPdInputSize,&nPdOutputSize);
 8002b0c:	498b      	ldr	r1, [pc, #556]	@ (8002d3c <AL_ControlInd+0x394>)
 8002b0e:	488c      	ldr	r0, [pc, #560]	@ (8002d40 <AL_ControlInd+0x398>)
 8002b10:	f7fd fc28 	bl	8000364 <APPL_GenerateMapping>
 8002b14:	4603      	mov	r3, r0
 8002b16:	81fb      	strh	r3, [r7, #14]

            if (result != 0)
 8002b18:	89fb      	ldrh	r3, [r7, #14]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d107      	bne.n	8002b2e <AL_ControlInd+0x186>
    case SAFEOP_2_SAFEOP:
    case OP_2_OP:
        /* in SAFEOP or OP the SYNCM settings for all SYNCM are checked
           if result is unequal 0, the slave will stay in or
           switch to PREOP and set the ErrorInd Bit (bit 4) of the AL-Status */
        result = CheckSmSettings(nMaxSyncMan);
 8002b1e:	4b89      	ldr	r3, [pc, #548]	@ (8002d44 <AL_ControlInd+0x39c>)
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7ff f820 	bl	8001b68 <CheckSmSettings>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	81fb      	strh	r3, [r7, #14]
        break;
 8002b2c:	e000      	b.n	8002b30 <AL_ControlInd+0x188>
                break;
 8002b2e:	bf00      	nop

    }

    if ( result == 0 )
 8002b30:	89fb      	ldrh	r3, [r7, #14]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f040 8211 	bne.w	8002f5a <AL_ControlInd+0x5b2>
    {
        /* execute the corresponding local management service(s) depending on the state transition */
        nEcatStateTrans = 0;
 8002b38:	4b83      	ldr	r3, [pc, #524]	@ (8002d48 <AL_ControlInd+0x3a0>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	801a      	strh	r2, [r3, #0]
        switch ( stateTrans )
 8002b3e:	7b3b      	ldrb	r3, [r7, #12]
 8002b40:	3b11      	subs	r3, #17
 8002b42:	2b77      	cmp	r3, #119	@ 0x77
 8002b44:	f200 8206 	bhi.w	8002f54 <AL_ControlInd+0x5ac>
 8002b48:	a201      	add	r2, pc, #4	@ (adr r2, 8002b50 <AL_ControlInd+0x1a8>)
 8002b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b4e:	bf00      	nop
 8002b50:	08002f0b 	.word	0x08002f0b
 8002b54:	08002d5d 	.word	0x08002d5d
 8002b58:	08002d4d 	.word	0x08002d4d
 8002b5c:	08002f4f 	.word	0x08002f4f
 8002b60:	08002f55 	.word	0x08002f55
 8002b64:	08002f55 	.word	0x08002f55
 8002b68:	08002f55 	.word	0x08002f55
 8002b6c:	08002f4f 	.word	0x08002f4f
 8002b70:	08002f55 	.word	0x08002f55
 8002b74:	08002f55 	.word	0x08002f55
 8002b78:	08002f55 	.word	0x08002f55
 8002b7c:	08002f55 	.word	0x08002f55
 8002b80:	08002f55 	.word	0x08002f55
 8002b84:	08002f55 	.word	0x08002f55
 8002b88:	08002f55 	.word	0x08002f55
 8002b8c:	08002f55 	.word	0x08002f55
 8002b90:	08002ef9 	.word	0x08002ef9
 8002b94:	08002f0f 	.word	0x08002f0f
 8002b98:	08002f4f 	.word	0x08002f4f
 8002b9c:	08002dbf 	.word	0x08002dbf
 8002ba0:	08002f55 	.word	0x08002f55
 8002ba4:	08002f55 	.word	0x08002f55
 8002ba8:	08002f55 	.word	0x08002f55
 8002bac:	08002f4f 	.word	0x08002f4f
 8002bb0:	08002f55 	.word	0x08002f55
 8002bb4:	08002f55 	.word	0x08002f55
 8002bb8:	08002f55 	.word	0x08002f55
 8002bbc:	08002f55 	.word	0x08002f55
 8002bc0:	08002f55 	.word	0x08002f55
 8002bc4:	08002f55 	.word	0x08002f55
 8002bc8:	08002f55 	.word	0x08002f55
 8002bcc:	08002f55 	.word	0x08002f55
 8002bd0:	08002d53 	.word	0x08002d53
 8002bd4:	08002f4f 	.word	0x08002f4f
 8002bd8:	08002f55 	.word	0x08002f55
 8002bdc:	08002f4f 	.word	0x08002f4f
 8002be0:	08002f55 	.word	0x08002f55
 8002be4:	08002f55 	.word	0x08002f55
 8002be8:	08002f55 	.word	0x08002f55
 8002bec:	08002f4f 	.word	0x08002f4f
 8002bf0:	08002f55 	.word	0x08002f55
 8002bf4:	08002f55 	.word	0x08002f55
 8002bf8:	08002f55 	.word	0x08002f55
 8002bfc:	08002f55 	.word	0x08002f55
 8002c00:	08002f55 	.word	0x08002f55
 8002c04:	08002f55 	.word	0x08002f55
 8002c08:	08002f55 	.word	0x08002f55
 8002c0c:	08002f55 	.word	0x08002f55
 8002c10:	08002edd 	.word	0x08002edd
 8002c14:	08002eb1 	.word	0x08002eb1
 8002c18:	08002f4f 	.word	0x08002f4f
 8002c1c:	08002f0f 	.word	0x08002f0f
 8002c20:	08002f55 	.word	0x08002f55
 8002c24:	08002f55 	.word	0x08002f55
 8002c28:	08002f55 	.word	0x08002f55
 8002c2c:	08002e15 	.word	0x08002e15
 8002c30:	08002f55 	.word	0x08002f55
 8002c34:	08002f55 	.word	0x08002f55
 8002c38:	08002f55 	.word	0x08002f55
 8002c3c:	08002f55 	.word	0x08002f55
 8002c40:	08002f55 	.word	0x08002f55
 8002c44:	08002f55 	.word	0x08002f55
 8002c48:	08002f55 	.word	0x08002f55
 8002c4c:	08002f55 	.word	0x08002f55
 8002c50:	08002f55 	.word	0x08002f55
 8002c54:	08002f55 	.word	0x08002f55
 8002c58:	08002f55 	.word	0x08002f55
 8002c5c:	08002f55 	.word	0x08002f55
 8002c60:	08002f55 	.word	0x08002f55
 8002c64:	08002f55 	.word	0x08002f55
 8002c68:	08002f55 	.word	0x08002f55
 8002c6c:	08002f55 	.word	0x08002f55
 8002c70:	08002f55 	.word	0x08002f55
 8002c74:	08002f55 	.word	0x08002f55
 8002c78:	08002f55 	.word	0x08002f55
 8002c7c:	08002f55 	.word	0x08002f55
 8002c80:	08002f55 	.word	0x08002f55
 8002c84:	08002f55 	.word	0x08002f55
 8002c88:	08002f55 	.word	0x08002f55
 8002c8c:	08002f55 	.word	0x08002f55
 8002c90:	08002f55 	.word	0x08002f55
 8002c94:	08002f55 	.word	0x08002f55
 8002c98:	08002f55 	.word	0x08002f55
 8002c9c:	08002f55 	.word	0x08002f55
 8002ca0:	08002f55 	.word	0x08002f55
 8002ca4:	08002f55 	.word	0x08002f55
 8002ca8:	08002f55 	.word	0x08002f55
 8002cac:	08002f55 	.word	0x08002f55
 8002cb0:	08002f55 	.word	0x08002f55
 8002cb4:	08002f55 	.word	0x08002f55
 8002cb8:	08002f55 	.word	0x08002f55
 8002cbc:	08002f55 	.word	0x08002f55
 8002cc0:	08002f55 	.word	0x08002f55
 8002cc4:	08002f55 	.word	0x08002f55
 8002cc8:	08002f55 	.word	0x08002f55
 8002ccc:	08002f55 	.word	0x08002f55
 8002cd0:	08002f55 	.word	0x08002f55
 8002cd4:	08002f55 	.word	0x08002f55
 8002cd8:	08002f55 	.word	0x08002f55
 8002cdc:	08002f55 	.word	0x08002f55
 8002ce0:	08002f55 	.word	0x08002f55
 8002ce4:	08002f55 	.word	0x08002f55
 8002ce8:	08002f55 	.word	0x08002f55
 8002cec:	08002f55 	.word	0x08002f55
 8002cf0:	08002f55 	.word	0x08002f55
 8002cf4:	08002f55 	.word	0x08002f55
 8002cf8:	08002f55 	.word	0x08002f55
 8002cfc:	08002f55 	.word	0x08002f55
 8002d00:	08002f55 	.word	0x08002f55
 8002d04:	08002f55 	.word	0x08002f55
 8002d08:	08002f55 	.word	0x08002f55
 8002d0c:	08002f55 	.word	0x08002f55
 8002d10:	08002ec1 	.word	0x08002ec1
 8002d14:	08002e93 	.word	0x08002e93
 8002d18:	08002f4f 	.word	0x08002f4f
 8002d1c:	08002e83 	.word	0x08002e83
 8002d20:	08002f55 	.word	0x08002f55
 8002d24:	08002f55 	.word	0x08002f55
 8002d28:	08002f55 	.word	0x08002f55
 8002d2c:	08002f0f 	.word	0x08002f0f
 8002d30:	240004ce 	.word	0x240004ce
 8002d34:	240004ef 	.word	0x240004ef
 8002d38:	240004fc 	.word	0x240004fc
 8002d3c:	240004f6 	.word	0x240004f6
 8002d40:	240004f4 	.word	0x240004f4
 8002d44:	240004f8 	.word	0x240004f8
 8002d48:	240004f2 	.word	0x240004f2
        {
        case INIT_2_BOOT    :
            result = ALSTATUSCODE_BOOTNOTSUPP;
 8002d4c:	2313      	movs	r3, #19
 8002d4e:	81fb      	strh	r3, [r7, #14]



            break;
 8002d50:	e136      	b.n	8002fc0 <AL_ControlInd+0x618>

        case BOOT_2_INIT    :
            result = ALSTATUSCODE_BOOTNOTSUPP;
 8002d52:	2313      	movs	r3, #19
 8002d54:	81fb      	strh	r3, [r7, #14]

            BackToInitTransition();
 8002d56:	f7ff fdbd 	bl	80028d4 <BackToInitTransition>



            break;
 8002d5a:	e131      	b.n	8002fc0 <AL_ControlInd+0x618>
        case INIT_2_PREOP :

           UpdateEEPROMLoadedState();
 8002d5c:	f7fe fe78 	bl	8001a50 <UpdateEEPROMLoadedState>

            if (EepromLoaded == FALSE)
 8002d60:	4ba6      	ldr	r3, [pc, #664]	@ (8002ffc <AL_ControlInd+0x654>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d101      	bne.n	8002d6c <AL_ControlInd+0x3c4>
            {
                //return an error if the EEPROM was not loaded correct  (device restart is required after the new EEPORM update)
                result = ALSTATUSCODE_EE_ERROR;
 8002d68:	2351      	movs	r3, #81	@ 0x51
 8002d6a:	81fb      	strh	r3, [r7, #14]
            }
            if (result == 0)
 8002d6c:	89fb      	ldrh	r3, [r7, #14]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f040 811b 	bne.w	8002faa <AL_ControlInd+0x602>
            {
            /* MBX_StartMailboxHandler (in mailbox.c) checks if the areas of the mailbox
               sync managers SYNCM0 and SYNCM1 overlap each other
              if result is unequal 0, the slave will stay in INIT
              and sets the ErrorInd Bit (bit 4) of the AL-Status */
            result = MBX_StartMailboxHandler();
 8002d74:	f000 feb0 	bl	8003ad8 <MBX_StartMailboxHandler>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	81fb      	strh	r3, [r7, #14]
            if (result == 0)
 8002d7c:	89fb      	ldrh	r3, [r7, #14]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d10c      	bne.n	8002d9c <AL_ControlInd+0x3f4>
            {
                bApplEsmPending = FALSE;
 8002d82:	4b9f      	ldr	r3, [pc, #636]	@ (8003000 <AL_ControlInd+0x658>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	701a      	strb	r2, [r3, #0]
                /* additionally there could be an application specific check (in ecatappl.c)
                   if the state transition from INIT to PREOP should be done
                 if result is unequal 0, the slave will stay in INIT
                 and sets the ErrorInd Bit (bit 4) of the AL-Status */
                result = APPL_StartMailboxHandler();
 8002d88:	f7fd fab9 	bl	80002fe <APPL_StartMailboxHandler>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	81fb      	strh	r3, [r7, #14]
                if ( result == 0 )
 8002d90:	89fb      	ldrh	r3, [r7, #14]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d102      	bne.n	8002d9c <AL_ControlInd+0x3f4>
                {
                    bMbxRunning = TRUE;
 8002d96:	4b9b      	ldr	r3, [pc, #620]	@ (8003004 <AL_ControlInd+0x65c>)
 8002d98:	2201      	movs	r2, #1
 8002d9a:	701a      	strb	r2, [r3, #0]
                }
            }

            if(result != 0 && result != NOERROR_INWORK)
 8002d9c:	89fb      	ldrh	r3, [r7, #14]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f000 8103 	beq.w	8002faa <AL_ControlInd+0x602>
 8002da4:	89fb      	ldrh	r3, [r7, #14]
 8002da6:	2bff      	cmp	r3, #255	@ 0xff
 8002da8:	f000 80ff 	beq.w	8002faa <AL_ControlInd+0x602>
            {
                /*Stop APPL Mbx handler if APPL Start Mbx handler was called before*/
                    if (!bApplEsmPending)
 8002dac:	4b94      	ldr	r3, [pc, #592]	@ (8003000 <AL_ControlInd+0x658>)
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d101      	bne.n	8002db8 <AL_ControlInd+0x410>
                    {
                        APPL_StopMailboxHandler();
 8002db4:	f7fd faab 	bl	800030e <APPL_StopMailboxHandler>
                    }

                 MBX_StopMailboxHandler();
 8002db8:	f000 ff0a 	bl	8003bd0 <MBX_StopMailboxHandler>
            }

            }
            break;
 8002dbc:	e0f5      	b.n	8002faa <AL_ControlInd+0x602>

        case PREOP_2_SAFEOP:
            /* start the input handler (function is defined above) */
            result = StartInputHandler();
 8002dbe:	f7ff f891 	bl	8001ee4 <StartInputHandler>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	81fb      	strh	r3, [r7, #14]
            if ( result == 0 )
 8002dc6:	89fb      	ldrh	r3, [r7, #14]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d112      	bne.n	8002df2 <AL_ControlInd+0x44a>
            {
                bApplEsmPending = FALSE;
 8002dcc:	4b8c      	ldr	r3, [pc, #560]	@ (8003000 <AL_ControlInd+0x658>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	701a      	strb	r2, [r3, #0]
                result = APPL_StartInputHandler(&u16ALEventMask);
 8002dd2:	488d      	ldr	r0, [pc, #564]	@ (8003008 <AL_ControlInd+0x660>)
 8002dd4:	f7fd faa3 	bl	800031e <APPL_StartInputHandler>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	81fb      	strh	r3, [r7, #14]

                if(result == 0)
 8002ddc:	89fb      	ldrh	r3, [r7, #14]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d107      	bne.n	8002df2 <AL_ControlInd+0x44a>
                {
/*ECATCHANGE_START(V5.13) ECAT1*/
/*ECATCHANGE_END(V5.13) ECAT1*/
                    /* initialize the AL Event Mask register (0x204) */
                    SetALEventMask( u16ALEventMask );
 8002de2:	4b89      	ldr	r3, [pc, #548]	@ (8003008 <AL_ControlInd+0x660>)
 8002de4:	881b      	ldrh	r3, [r3, #0]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7fe fe14 	bl	8001a14 <SetALEventMask>

                    bEcatInputUpdateRunning = TRUE;
 8002dec:	4b87      	ldr	r3, [pc, #540]	@ (800300c <AL_ControlInd+0x664>)
 8002dee:	2201      	movs	r2, #1
 8002df0:	701a      	strb	r2, [r3, #0]
                }
            }

            /*if one start input handler returned an error stop the input handler*/
            if(result != 0 && result != NOERROR_INWORK)
 8002df2:	89fb      	ldrh	r3, [r7, #14]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f000 80da 	beq.w	8002fae <AL_ControlInd+0x606>
 8002dfa:	89fb      	ldrh	r3, [r7, #14]
 8002dfc:	2bff      	cmp	r3, #255	@ 0xff
 8002dfe:	f000 80d6 	beq.w	8002fae <AL_ControlInd+0x606>
            {
                if(!bApplEsmPending)
 8002e02:	4b7f      	ldr	r3, [pc, #508]	@ (8003000 <AL_ControlInd+0x658>)
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <AL_ControlInd+0x466>
                {
                    /*Call only the APPL stop handler if the APPL start handler was called before*/
                    /*The application can react to the state transition in the function APPL_StopInputHandler */
                    APPL_StopInputHandler();
 8002e0a:	f7fd fa93 	bl	8000334 <APPL_StopInputHandler>
                }

                StopInputHandler();
 8002e0e:	f7ff fccb 	bl	80027a8 <StopInputHandler>
            }
            break;
 8002e12:	e0cc      	b.n	8002fae <AL_ControlInd+0x606>

        case SAFEOP_2_OP:
/*ECATCHANGE_START(V5.13) ESM2*/
            /*enable SM if error was acknowledged*/
            if (bErrAck)
 8002e14:	7b7b      	ldrb	r3, [r7, #13]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00e      	beq.n	8002e38 <AL_ControlInd+0x490>
            {
                if (nPdOutputSize > 0)
 8002e1a:	4b7d      	ldr	r3, [pc, #500]	@ (8003010 <AL_ControlInd+0x668>)
 8002e1c:	881b      	ldrh	r3, [r3, #0]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d003      	beq.n	8002e2a <AL_ControlInd+0x482>
                {
                    EnableSyncManChannel(PROCESS_DATA_OUT);
 8002e22:	2002      	movs	r0, #2
 8002e24:	f7fe fe79 	bl	8001b1a <EnableSyncManChannel>
 8002e28:	e006      	b.n	8002e38 <AL_ControlInd+0x490>
                }
                else
                    if (nPdInputSize > 0)
 8002e2a:	4b7a      	ldr	r3, [pc, #488]	@ (8003014 <AL_ControlInd+0x66c>)
 8002e2c:	881b      	ldrh	r3, [r3, #0]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d002      	beq.n	8002e38 <AL_ControlInd+0x490>
                    {
                        EnableSyncManChannel(PROCESS_DATA_IN);
 8002e32:	2003      	movs	r0, #3
 8002e34:	f7fe fe71 	bl	8001b1a <EnableSyncManChannel>
                    }
            }
            /*ECATCHANGE_END(V5.13) ESM2*/

            /* start the output handler (function is defined above) */
            result = StartOutputHandler();
 8002e38:	f7ff fc56 	bl	80026e8 <StartOutputHandler>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	81fb      	strh	r3, [r7, #14]
            if(result == 0)
 8002e40:	89fb      	ldrh	r3, [r7, #14]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10c      	bne.n	8002e60 <AL_ControlInd+0x4b8>
            {
                bApplEsmPending = FALSE;
 8002e46:	4b6e      	ldr	r3, [pc, #440]	@ (8003000 <AL_ControlInd+0x658>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	701a      	strb	r2, [r3, #0]
                result = APPL_StartOutputHandler();
 8002e4c:	f7fd fa7a 	bl	8000344 <APPL_StartOutputHandler>
 8002e50:	4603      	mov	r3, r0
 8002e52:	81fb      	strh	r3, [r7, #14]

                if(result == 0)
 8002e54:	89fb      	ldrh	r3, [r7, #14]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d102      	bne.n	8002e60 <AL_ControlInd+0x4b8>
                {
                    /*Device is in OPERATINAL*/
                    bEcatOutputUpdateRunning = TRUE;
 8002e5a:	4b6f      	ldr	r3, [pc, #444]	@ (8003018 <AL_ControlInd+0x670>)
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	701a      	strb	r2, [r3, #0]
                }

            }

            if ( result != 0 && result != NOERROR_INWORK)
 8002e60:	89fb      	ldrh	r3, [r7, #14]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	f000 80a5 	beq.w	8002fb2 <AL_ControlInd+0x60a>
 8002e68:	89fb      	ldrh	r3, [r7, #14]
 8002e6a:	2bff      	cmp	r3, #255	@ 0xff
 8002e6c:	f000 80a1 	beq.w	8002fb2 <AL_ControlInd+0x60a>
            {
                    if (!bApplEsmPending)
 8002e70:	4b63      	ldr	r3, [pc, #396]	@ (8003000 <AL_ControlInd+0x658>)
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d101      	bne.n	8002e7c <AL_ControlInd+0x4d4>
                    {
                        APPL_StopOutputHandler();
 8002e78:	f7fd fa6c 	bl	8000354 <APPL_StopOutputHandler>
                    }

                StopOutputHandler();
 8002e7c:	f7ff fc82 	bl	8002784 <StopOutputHandler>
            }

            break;
 8002e80:	e097      	b.n	8002fb2 <AL_ControlInd+0x60a>

        case OP_2_SAFEOP:
            /* stop the output handler (function is defined above) */
            APPL_StopOutputHandler();
 8002e82:	f7fd fa67 	bl	8000354 <APPL_StopOutputHandler>

            StopOutputHandler();
 8002e86:	f7ff fc7d 	bl	8002784 <StopOutputHandler>

            bApplEsmPending = FALSE;
 8002e8a:	4b5d      	ldr	r3, [pc, #372]	@ (8003000 <AL_ControlInd+0x658>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	701a      	strb	r2, [r3, #0]

            break;
 8002e90:	e096      	b.n	8002fc0 <AL_ControlInd+0x618>

        case OP_2_PREOP:
            /* stop the output handler (function is defined above) */
            result = APPL_StopOutputHandler();
 8002e92:	f7fd fa5f 	bl	8000354 <APPL_StopOutputHandler>
 8002e96:	4603      	mov	r3, r0
 8002e98:	81fb      	strh	r3, [r7, #14]

            StopOutputHandler();
 8002e9a:	f7ff fc73 	bl	8002784 <StopOutputHandler>

            bApplEsmPending = FALSE;
 8002e9e:	4b58      	ldr	r3, [pc, #352]	@ (8003000 <AL_ControlInd+0x658>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	701a      	strb	r2, [r3, #0]

            if (result != 0)
 8002ea4:	89fb      	ldrh	r3, [r7, #14]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f040 8085 	bne.w	8002fb6 <AL_ControlInd+0x60e>
            {
                break;
            }

            stateTrans = SAFEOP_2_PREOP;
 8002eac:	2342      	movs	r3, #66	@ 0x42
 8002eae:	733b      	strb	r3, [r7, #12]

        case SAFEOP_2_PREOP:
            /* stop the input handler (function is defined above) */
            APPL_StopInputHandler();
 8002eb0:	f7fd fa40 	bl	8000334 <APPL_StopInputHandler>
           
            StopInputHandler();
 8002eb4:	f7ff fc78 	bl	80027a8 <StopInputHandler>

            bApplEsmPending = FALSE;
 8002eb8:	4b51      	ldr	r3, [pc, #324]	@ (8003000 <AL_ControlInd+0x658>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	701a      	strb	r2, [r3, #0]

            break;
 8002ebe:	e07f      	b.n	8002fc0 <AL_ControlInd+0x618>

        case OP_2_INIT:
            /* stop the output handler (function is defined above) */
            result = APPL_StopOutputHandler();
 8002ec0:	f7fd fa48 	bl	8000354 <APPL_StopOutputHandler>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	81fb      	strh	r3, [r7, #14]

            StopOutputHandler();
 8002ec8:	f7ff fc5c 	bl	8002784 <StopOutputHandler>

            bApplEsmPending = FALSE;
 8002ecc:	4b4c      	ldr	r3, [pc, #304]	@ (8003000 <AL_ControlInd+0x658>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	701a      	strb	r2, [r3, #0]

            if (result != 0)
 8002ed2:	89fb      	ldrh	r3, [r7, #14]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d170      	bne.n	8002fba <AL_ControlInd+0x612>
            {
                break;
            }
            
            stateTrans = SAFEOP_2_INIT;
 8002ed8:	2341      	movs	r3, #65	@ 0x41
 8002eda:	733b      	strb	r3, [r7, #12]

        case SAFEOP_2_INIT:
            /* stop the input handler (function is defined above) */
            result = APPL_StopInputHandler();
 8002edc:	f7fd fa2a 	bl	8000334 <APPL_StopInputHandler>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	81fb      	strh	r3, [r7, #14]
            
            StopInputHandler();
 8002ee4:	f7ff fc60 	bl	80027a8 <StopInputHandler>

            bApplEsmPending = FALSE;
 8002ee8:	4b45      	ldr	r3, [pc, #276]	@ (8003000 <AL_ControlInd+0x658>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	701a      	strb	r2, [r3, #0]

            if (result != 0)
 8002eee:	89fb      	ldrh	r3, [r7, #14]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d164      	bne.n	8002fbe <AL_ControlInd+0x616>
            {
                break;
            }
            stateTrans = PREOP_2_INIT;
 8002ef4:	2321      	movs	r3, #33	@ 0x21
 8002ef6:	733b      	strb	r3, [r7, #12]

        case PREOP_2_INIT:
            MBX_StopMailboxHandler();
 8002ef8:	f000 fe6a 	bl	8003bd0 <MBX_StopMailboxHandler>
            result = APPL_StopMailboxHandler();
 8002efc:	f7fd fa07 	bl	800030e <APPL_StopMailboxHandler>
 8002f00:	4603      	mov	r3, r0
 8002f02:	81fb      	strh	r3, [r7, #14]

            BackToInitTransition();
 8002f04:	f7ff fce6 	bl	80028d4 <BackToInitTransition>
            break;
 8002f08:	e05a      	b.n	8002fc0 <AL_ControlInd+0x618>
        case INIT_2_INIT:
            BackToInitTransition();
 8002f0a:	f7ff fce3 	bl	80028d4 <BackToInitTransition>
        case PREOP_2_PREOP:
        case SAFEOP_2_SAFEOP:
        case OP_2_OP:
            if(bErrAck)
 8002f0e:	7b7b      	ldrb	r3, [r7, #13]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d004      	beq.n	8002f1e <AL_ControlInd+0x576>
            {
                APPL_AckErrorInd(stateTrans);
 8002f14:	7b3b      	ldrb	r3, [r7, #12]
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7fd f9e5 	bl	80002e8 <APPL_AckErrorInd>
            }


                /*no local error flag is currently active, enable SM*/
                if ( nAlStatus & (STATE_SAFEOP | STATE_OP))
 8002f1e:	4b3f      	ldr	r3, [pc, #252]	@ (800301c <AL_ControlInd+0x674>)
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	f003 030c 	and.w	r3, r3, #12
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00e      	beq.n	8002f48 <AL_ControlInd+0x5a0>
                {
                    if(nPdOutputSize > 0)
 8002f2a:	4b39      	ldr	r3, [pc, #228]	@ (8003010 <AL_ControlInd+0x668>)
 8002f2c:	881b      	ldrh	r3, [r3, #0]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d003      	beq.n	8002f3a <AL_ControlInd+0x592>
                    {
                        EnableSyncManChannel(PROCESS_DATA_OUT);
 8002f32:	2002      	movs	r0, #2
 8002f34:	f7fe fdf1 	bl	8001b1a <EnableSyncManChannel>
 8002f38:	e006      	b.n	8002f48 <AL_ControlInd+0x5a0>
                    }
                    else 
                    if(nPdInputSize > 0)
 8002f3a:	4b36      	ldr	r3, [pc, #216]	@ (8003014 <AL_ControlInd+0x66c>)
 8002f3c:	881b      	ldrh	r3, [r3, #0]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d002      	beq.n	8002f48 <AL_ControlInd+0x5a0>
                    {
                        EnableSyncManChannel(PROCESS_DATA_IN);
 8002f42:	2003      	movs	r0, #3
 8002f44:	f7fe fde9 	bl	8001b1a <EnableSyncManChannel>
                    }
                }
            
            result = NOERROR_NOSTATECHANGE;
 8002f48:	23fe      	movs	r3, #254	@ 0xfe
 8002f4a:	81fb      	strh	r3, [r7, #14]
            break;
 8002f4c:	e038      	b.n	8002fc0 <AL_ControlInd+0x618>
        case SAFEOP_2_BOOT:
        case OP_2_BOOT:
        case BOOT_2_PREOP:
        case BOOT_2_SAFEOP:
        case BOOT_2_OP:
            result = ALSTATUSCODE_INVALIDALCONTROL;
 8002f4e:	2311      	movs	r3, #17
 8002f50:	81fb      	strh	r3, [r7, #14]
            break;
 8002f52:	e035      	b.n	8002fc0 <AL_ControlInd+0x618>

        default:
            result = ALSTATUSCODE_UNKNOWNALCONTROL;
 8002f54:	2312      	movs	r3, #18
 8002f56:	81fb      	strh	r3, [r7, #14]
            break;
 8002f58:	e032      	b.n	8002fc0 <AL_ControlInd+0x618>
    }
    else
    {
        /* the checking of the sync manager settings was not successful
            switch back the state to PREOP or INIT */
        switch (nAlStatus)
 8002f5a:	4b30      	ldr	r3, [pc, #192]	@ (800301c <AL_ControlInd+0x674>)
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	2b08      	cmp	r3, #8
 8002f60:	d006      	beq.n	8002f70 <AL_ControlInd+0x5c8>
 8002f62:	2b08      	cmp	r3, #8
 8002f64:	dc2c      	bgt.n	8002fc0 <AL_ControlInd+0x618>
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d00a      	beq.n	8002f80 <AL_ControlInd+0x5d8>
 8002f6a:	2b04      	cmp	r3, #4
 8002f6c:	d004      	beq.n	8002f78 <AL_ControlInd+0x5d0>
 8002f6e:	e027      	b.n	8002fc0 <AL_ControlInd+0x618>
        {
        case STATE_OP:
            /* stop the output handler (function is defined above) */
            APPL_StopOutputHandler();
 8002f70:	f7fd f9f0 	bl	8000354 <APPL_StopOutputHandler>
            StopOutputHandler();
 8002f74:	f7ff fc06 	bl	8002784 <StopOutputHandler>
        case STATE_SAFEOP:
            /* stop the input handler (function is defined above) */
            APPL_StopInputHandler();
 8002f78:	f7fd f9dc 	bl	8000334 <APPL_StopInputHandler>

            StopInputHandler();
 8002f7c:	f7ff fc14 	bl	80027a8 <StopInputHandler>
        case STATE_PREOP:
            if ( result == ALSTATUSCODE_INVALIDMBXCFGINPREOP )
 8002f80:	89fb      	ldrh	r3, [r7, #14]
 8002f82:	2b16      	cmp	r3, #22
 8002f84:	d10d      	bne.n	8002fa2 <AL_ControlInd+0x5fa>
            {
                /* the mailbox sync manager settings were wrong, switch back to INIT */
                MBX_StopMailboxHandler();
 8002f86:	f000 fe23 	bl	8003bd0 <MBX_StopMailboxHandler>
                APPL_StopMailboxHandler();
 8002f8a:	f7fd f9c0 	bl	800030e <APPL_StopMailboxHandler>

                /*Disable SM0 (MBX Out)*/
                DisableSyncManChannel(MAILBOX_WRITE);
 8002f8e:	2000      	movs	r0, #0
 8002f90:	f7fe fd9c 	bl	8001acc <DisableSyncManChannel>

                /*Disable SM1 (MBX In)*/
                DisableSyncManChannel(MAILBOX_READ);
 8002f94:	2001      	movs	r0, #1
 8002f96:	f7fe fd99 	bl	8001acc <DisableSyncManChannel>

                nAlStatus = STATE_INIT;
 8002f9a:	4b20      	ldr	r3, [pc, #128]	@ (800301c <AL_ControlInd+0x674>)
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	701a      	strb	r2, [r3, #0]
 8002fa0:	e00e      	b.n	8002fc0 <AL_ControlInd+0x618>
            }
            else
            {
                nAlStatus = STATE_PREOP;
 8002fa2:	4b1e      	ldr	r3, [pc, #120]	@ (800301c <AL_ControlInd+0x674>)
 8002fa4:	2202      	movs	r2, #2
 8002fa6:	701a      	strb	r2, [r3, #0]
 8002fa8:	e00a      	b.n	8002fc0 <AL_ControlInd+0x618>
            break;
 8002faa:	bf00      	nop
 8002fac:	e008      	b.n	8002fc0 <AL_ControlInd+0x618>
            break;
 8002fae:	bf00      	nop
 8002fb0:	e006      	b.n	8002fc0 <AL_ControlInd+0x618>
            break;
 8002fb2:	bf00      	nop
 8002fb4:	e004      	b.n	8002fc0 <AL_ControlInd+0x618>
                break;
 8002fb6:	bf00      	nop
 8002fb8:	e002      	b.n	8002fc0 <AL_ControlInd+0x618>
                break;
 8002fba:	bf00      	nop
 8002fbc:	e000      	b.n	8002fc0 <AL_ControlInd+0x618>
                break;
 8002fbe:	bf00      	nop
            }
        }
    }

    if ( result == NOERROR_INWORK )
 8002fc0:	89fb      	ldrh	r3, [r7, #14]
 8002fc2:	2bff      	cmp	r3, #255	@ 0xff
 8002fc4:	d150      	bne.n	8003068 <AL_ControlInd+0x6c0>
    {
        /* state transition is still in work
            ECAT_StateChange must be called from the application */
        bEcatWaitForAlControlRes = TRUE;
 8002fc6:	4b16      	ldr	r3, [pc, #88]	@ (8003020 <AL_ControlInd+0x678>)
 8002fc8:	2201      	movs	r2, #1
 8002fca:	701a      	strb	r2, [r3, #0]
        /* state transition has to be stored */
        nEcatStateTrans = stateTrans;
 8002fcc:	7b3b      	ldrb	r3, [r7, #12]
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	4b14      	ldr	r3, [pc, #80]	@ (8003024 <AL_ControlInd+0x67c>)
 8002fd2:	801a      	strh	r2, [r3, #0]

        /*Init ESM timeout counter (will be decremented with the local 1ms timer)*/
        switch(nEcatStateTrans)
 8002fd4:	4b13      	ldr	r3, [pc, #76]	@ (8003024 <AL_ControlInd+0x67c>)
 8002fd6:	881b      	ldrh	r3, [r3, #0]
 8002fd8:	2b48      	cmp	r3, #72	@ 0x48
 8002fda:	d027      	beq.n	800302c <AL_ControlInd+0x684>
 8002fdc:	2b48      	cmp	r3, #72	@ 0x48
 8002fde:	dc2a      	bgt.n	8003036 <AL_ControlInd+0x68e>
 8002fe0:	2b13      	cmp	r3, #19
 8002fe2:	dc02      	bgt.n	8002fea <AL_ControlInd+0x642>
 8002fe4:	2b12      	cmp	r3, #18
 8002fe6:	da03      	bge.n	8002ff0 <AL_ControlInd+0x648>
 8002fe8:	e025      	b.n	8003036 <AL_ControlInd+0x68e>
 8002fea:	2b24      	cmp	r3, #36	@ 0x24
 8002fec:	d01e      	beq.n	800302c <AL_ControlInd+0x684>
 8002fee:	e022      	b.n	8003036 <AL_ControlInd+0x68e>
        {
            case INIT_2_PREOP:
            case INIT_2_BOOT:
                EsmTimeoutCounter = PREOPTIMEOUT;
 8002ff0:	4b0d      	ldr	r3, [pc, #52]	@ (8003028 <AL_ControlInd+0x680>)
 8002ff2:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002ff6:	801a      	strh	r2, [r3, #0]
            break;
 8002ff8:	e021      	b.n	800303e <AL_ControlInd+0x696>
 8002ffa:	bf00      	nop
 8002ffc:	24000514 	.word	0x24000514
 8003000:	240004ef 	.word	0x240004ef
 8003004:	24000517 	.word	0x24000517
 8003008:	24000504 	.word	0x24000504
 800300c:	240004c9 	.word	0x240004c9
 8003010:	240004f6 	.word	0x240004f6
 8003014:	240004f4 	.word	0x240004f4
 8003018:	240004c8 	.word	0x240004c8
 800301c:	240004fc 	.word	0x240004fc
 8003020:	240004f0 	.word	0x240004f0
 8003024:	240004f2 	.word	0x240004f2
 8003028:	240004ce 	.word	0x240004ce
            case PREOP_2_SAFEOP:
            case SAFEOP_2_OP:
                EsmTimeoutCounter = SAFEOP2OPTIMEOUT;
 800302c:	4b40      	ldr	r3, [pc, #256]	@ (8003130 <AL_ControlInd+0x788>)
 800302e:	f242 3228 	movw	r2, #9000	@ 0x2328
 8003032:	801a      	strh	r2, [r3, #0]
                break;
 8003034:	e003      	b.n	800303e <AL_ControlInd+0x696>
           default:
                EsmTimeoutCounter = 200; //Set default timeout value to 200ms
 8003036:	4b3e      	ldr	r3, [pc, #248]	@ (8003130 <AL_ControlInd+0x788>)
 8003038:	22c8      	movs	r2, #200	@ 0xc8
 800303a:	801a      	strh	r2, [r3, #0]
                break;
 800303c:	bf00      	nop
        }
        EsmTimeoutCounter -= (INT16) (EsmTimeoutCounter / 10); //subtract 10% from the timeout to react before the master runs into a timeout.
 800303e:	4b3c      	ldr	r3, [pc, #240]	@ (8003130 <AL_ControlInd+0x788>)
 8003040:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003044:	b29a      	uxth	r2, r3
 8003046:	4b3a      	ldr	r3, [pc, #232]	@ (8003130 <AL_ControlInd+0x788>)
 8003048:	f9b3 3000 	ldrsh.w	r3, [r3]
 800304c:	4939      	ldr	r1, [pc, #228]	@ (8003134 <AL_ControlInd+0x78c>)
 800304e:	fb81 0103 	smull	r0, r1, r1, r3
 8003052:	1089      	asrs	r1, r1, #2
 8003054:	17db      	asrs	r3, r3, #31
 8003056:	1acb      	subs	r3, r1, r3
 8003058:	b21b      	sxth	r3, r3
 800305a:	b29b      	uxth	r3, r3
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	b29b      	uxth	r3, r3
 8003060:	b21a      	sxth	r2, r3
 8003062:	4b33      	ldr	r3, [pc, #204]	@ (8003130 <AL_ControlInd+0x788>)
 8003064:	801a      	strh	r2, [r3, #0]
 8003066:	e060      	b.n	800312a <AL_ControlInd+0x782>

    }
    else if ( alControl != (nAlStatus & STATE_MASK) )
 8003068:	79fa      	ldrb	r2, [r7, #7]
 800306a:	4b33      	ldr	r3, [pc, #204]	@ (8003138 <AL_ControlInd+0x790>)
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	f003 030f 	and.w	r3, r3, #15
 8003072:	429a      	cmp	r2, r3
 8003074:	d04e      	beq.n	8003114 <AL_ControlInd+0x76c>
    {
        /* The slave state has changed */

        if ( (result != 0 || alStatusCode != 0) && ((alControl | nAlStatus) & STATE_OP) )
 8003076:	89fb      	ldrh	r3, [r7, #14]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d102      	bne.n	8003082 <AL_ControlInd+0x6da>
 800307c:	88bb      	ldrh	r3, [r7, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d01f      	beq.n	80030c2 <AL_ControlInd+0x71a>
 8003082:	4b2d      	ldr	r3, [pc, #180]	@ (8003138 <AL_ControlInd+0x790>)
 8003084:	781a      	ldrb	r2, [r3, #0]
 8003086:	79fb      	ldrb	r3, [r7, #7]
 8003088:	4313      	orrs	r3, r2
 800308a:	b2db      	uxtb	r3, r3
 800308c:	f003 0308 	and.w	r3, r3, #8
 8003090:	2b00      	cmp	r3, #0
 8003092:	d016      	beq.n	80030c2 <AL_ControlInd+0x71a>
        {
            /* the local application requested to leave the state OP so we have to disable the SM2
               and make the state change from OP to SAFEOP by calling StopOutputHandler */

            //only execute StopOutputHandler() if Output update is still running
            if(bEcatOutputUpdateRunning)
 8003094:	4b29      	ldr	r3, [pc, #164]	@ (800313c <AL_ControlInd+0x794>)
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d003      	beq.n	80030a4 <AL_ControlInd+0x6fc>
            {
                APPL_StopOutputHandler();
 800309c:	f7fd f95a 	bl	8000354 <APPL_StopOutputHandler>

                StopOutputHandler();
 80030a0:	f7ff fb70 	bl	8002784 <StopOutputHandler>
            }

            if(nPdOutputSize > 0)
 80030a4:	4b26      	ldr	r3, [pc, #152]	@ (8003140 <AL_ControlInd+0x798>)
 80030a6:	881b      	ldrh	r3, [r3, #0]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d003      	beq.n	80030b4 <AL_ControlInd+0x70c>
            {
                /* disable the Sync Manager Channel 2 (outputs) */
                DisableSyncManChannel(PROCESS_DATA_OUT);
 80030ac:	2002      	movs	r0, #2
 80030ae:	f7fe fd0d 	bl	8001acc <DisableSyncManChannel>
 80030b2:	e006      	b.n	80030c2 <AL_ControlInd+0x71a>
            }
            else
                if(nPdInputSize > 0)
 80030b4:	4b23      	ldr	r3, [pc, #140]	@ (8003144 <AL_ControlInd+0x79c>)
 80030b6:	881b      	ldrh	r3, [r3, #0]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d002      	beq.n	80030c2 <AL_ControlInd+0x71a>
            {
                /*disable Sync Manager 3 (inputs) if no outputs available*/
                DisableSyncManChannel(PROCESS_DATA_IN);
 80030bc:	2003      	movs	r0, #3
 80030be:	f7fe fd05 	bl	8001acc <DisableSyncManChannel>
            }

        }
        if ( result != 0 )
 80030c2:	89fb      	ldrh	r3, [r7, #14]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d00e      	beq.n	80030e6 <AL_ControlInd+0x73e>
        {
                if (nAlStatus == STATE_OP)
 80030c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003138 <AL_ControlInd+0x790>)
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	2b08      	cmp	r3, #8
 80030ce:	d102      	bne.n	80030d6 <AL_ControlInd+0x72e>
                {
                    nAlStatus = STATE_SAFEOP;
 80030d0:	4b19      	ldr	r3, [pc, #100]	@ (8003138 <AL_ControlInd+0x790>)
 80030d2:	2204      	movs	r2, #4
 80030d4:	701a      	strb	r2, [r3, #0]
                }
            /* save the failed status to be able to decide, if the AL Status Code shall be
               reset in case of a coming successful state transition */
            nAlStatus |= STATE_CHANGE;
 80030d6:	4b18      	ldr	r3, [pc, #96]	@ (8003138 <AL_ControlInd+0x790>)
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	f043 0310 	orr.w	r3, r3, #16
 80030de:	b2da      	uxtb	r2, r3
 80030e0:	4b15      	ldr	r3, [pc, #84]	@ (8003138 <AL_ControlInd+0x790>)
 80030e2:	701a      	strb	r2, [r3, #0]
 80030e4:	e00b      	b.n	80030fe <AL_ControlInd+0x756>
        }
        else
        {
            /* state transition was successful */
            if ( alStatusCode != 0 )
 80030e6:	88bb      	ldrh	r3, [r7, #4]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d005      	beq.n	80030f8 <AL_ControlInd+0x750>
            {
                /* state change request from the user */
                result = alStatusCode;
 80030ec:	88bb      	ldrh	r3, [r7, #4]
 80030ee:	81fb      	strh	r3, [r7, #14]
                alControl |= STATE_CHANGE;
 80030f0:	79fb      	ldrb	r3, [r7, #7]
 80030f2:	f043 0310 	orr.w	r3, r3, #16
 80030f6:	71fb      	strb	r3, [r7, #7]
            }
            /* acknowledge the new state */
            nAlStatus = alControl;
 80030f8:	4a0f      	ldr	r2, [pc, #60]	@ (8003138 <AL_ControlInd+0x790>)
 80030fa:	79fb      	ldrb	r3, [r7, #7]
 80030fc:	7013      	strb	r3, [r2, #0]
        }

        bEcatWaitForAlControlRes = FALSE;
 80030fe:	4b12      	ldr	r3, [pc, #72]	@ (8003148 <AL_ControlInd+0x7a0>)
 8003100:	2200      	movs	r2, #0
 8003102:	701a      	strb	r2, [r3, #0]

        /* write the AL Status register */
        SetALStatus(nAlStatus, result);
 8003104:	4b0c      	ldr	r3, [pc, #48]	@ (8003138 <AL_ControlInd+0x790>)
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	89fa      	ldrh	r2, [r7, #14]
 800310a:	4611      	mov	r1, r2
 800310c:	4618      	mov	r0, r3
 800310e:	f7ff fbed 	bl	80028ec <SetALStatus>
 8003112:	e00a      	b.n	800312a <AL_ControlInd+0x782>
    }
    else
    {
        /* Error acknowledgement without a state transition */

         bEcatWaitForAlControlRes = FALSE;
 8003114:	4b0c      	ldr	r3, [pc, #48]	@ (8003148 <AL_ControlInd+0x7a0>)
 8003116:	2200      	movs	r2, #0
 8003118:	701a      	strb	r2, [r3, #0]

        /* AL-Status has to be updated and AL-Status-Code has to be reset
           if the the error bit was acknowledged */
        SetALStatus(nAlStatus, 0);
 800311a:	4b07      	ldr	r3, [pc, #28]	@ (8003138 <AL_ControlInd+0x790>)
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	2100      	movs	r1, #0
 8003120:	4618      	mov	r0, r3
 8003122:	f7ff fbe3 	bl	80028ec <SetALStatus>
 8003126:	e000      	b.n	800312a <AL_ControlInd+0x782>
        return;
 8003128:	bf00      	nop
    }
    /*ECATCHANGE_START(V5.13) CIA402 4*/
    /*decouple CIA402 state machine from ESM*/
    /*ECATCHANGE_END(V5.13) CIA402 4*/

}
 800312a:	3710      	adds	r7, #16
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	240004ce 	.word	0x240004ce
 8003134:	66666667 	.word	0x66666667
 8003138:	240004fc 	.word	0x240004fc
 800313c:	240004c8 	.word	0x240004c8
 8003140:	240004f6 	.word	0x240004f6
 8003144:	240004f4 	.word	0x240004f4
 8003148:	240004f0 	.word	0x240004f0

0800314c <AL_ControlRes>:
 \brief    This function is called cyclic if a state transition is pending (bEcatWaitForAlControlRes == TRUE)
 \brief    If the ESM timeout is expired the state transition will be rejected. Otherwise the application specific state transition function is called.
 \brief    If the pending state transition is triggered by the application the transition need to be completed by the application (ECAT_StateChange())
  *////////////////////////////////////////////////////////////////////////////////////////
void AL_ControlRes(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
    if(bEcatWaitForAlControlRes)
 8003152:	4b98      	ldr	r3, [pc, #608]	@ (80033b4 <AL_ControlRes+0x268>)
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	2b00      	cmp	r3, #0
 8003158:	f000 8162 	beq.w	8003420 <AL_ControlRes+0x2d4>
    {
        UINT16 result = 0;
 800315c:	2300      	movs	r3, #0
 800315e:	807b      	strh	r3, [r7, #2]
        UINT8 Status = 0;
 8003160:	2300      	movs	r3, #0
 8003162:	71fb      	strb	r3, [r7, #7]
        UINT16 StatusCode = 0;
 8003164:	2300      	movs	r3, #0
 8003166:	80bb      	strh	r3, [r7, #4]

        if(EsmTimeoutCounter == 0)
 8003168:	4b93      	ldr	r3, [pc, #588]	@ (80033b8 <AL_ControlRes+0x26c>)
 800316a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800316e:	2b00      	cmp	r3, #0
 8003170:	f040 8081 	bne.w	8003276 <AL_ControlRes+0x12a>
        {
            Status =  (UINT8)(nEcatStateTrans >> 4);
 8003174:	4b91      	ldr	r3, [pc, #580]	@ (80033bc <AL_ControlRes+0x270>)
 8003176:	881b      	ldrh	r3, [r3, #0]
 8003178:	091b      	lsrs	r3, r3, #4
 800317a:	b29b      	uxth	r3, r3
 800317c:	71fb      	strb	r3, [r7, #7]

            /* ESM timeout expired*/
            switch(nEcatStateTrans)
 800317e:	4b8f      	ldr	r3, [pc, #572]	@ (80033bc <AL_ControlRes+0x270>)
 8003180:	881b      	ldrh	r3, [r3, #0]
 8003182:	2b48      	cmp	r3, #72	@ 0x48
 8003184:	d034      	beq.n	80031f0 <AL_ControlRes+0xa4>
 8003186:	2b48      	cmp	r3, #72	@ 0x48
 8003188:	f300 8137 	bgt.w	80033fa <AL_ControlRes+0x2ae>
 800318c:	2b13      	cmp	r3, #19
 800318e:	dc02      	bgt.n	8003196 <AL_ControlRes+0x4a>
 8003190:	2b12      	cmp	r3, #18
 8003192:	da03      	bge.n	800319c <AL_ControlRes+0x50>
 8003194:	e131      	b.n	80033fa <AL_ControlRes+0x2ae>
 8003196:	2b24      	cmp	r3, #36	@ 0x24
 8003198:	d015      	beq.n	80031c6 <AL_ControlRes+0x7a>
 800319a:	e12e      	b.n	80033fa <AL_ControlRes+0x2ae>
            {
                case INIT_2_PREOP:
                case INIT_2_BOOT:

                        if (!bApplEsmPending)
 800319c:	4b88      	ldr	r3, [pc, #544]	@ (80033c0 <AL_ControlRes+0x274>)
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d101      	bne.n	80031a8 <AL_ControlRes+0x5c>
                        {
                            APPL_StopMailboxHandler();
 80031a4:	f7fd f8b3 	bl	800030e <APPL_StopMailboxHandler>
                        }

                    MBX_StopMailboxHandler();
 80031a8:	f000 fd12 	bl	8003bd0 <MBX_StopMailboxHandler>
                    /*ECATCHANGE_START(V5.13) ESM1*/
                    if((u8LocalErrorState & STATE_MASK) == STATE_INIT)
 80031ac:	4b85      	ldr	r3, [pc, #532]	@ (80033c4 <AL_ControlRes+0x278>)
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	f003 030f 	and.w	r3, r3, #15
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d103      	bne.n	80031c0 <AL_ControlRes+0x74>
                        /*ECATCHANGE_END(V5.13) ESM1*/
                    {
                        /*Set application specified error*/
                        StatusCode = u16LocalErrorCode;
 80031b8:	4b83      	ldr	r3, [pc, #524]	@ (80033c8 <AL_ControlRes+0x27c>)
 80031ba:	881b      	ldrh	r3, [r3, #0]
 80031bc:	80bb      	strh	r3, [r7, #4]
                    else
                    {
                        /*Set unspecified error*/
                        StatusCode = ALSTATUSCODE_UNSPECIFIEDERROR;
                    }
                break;
 80031be:	e11c      	b.n	80033fa <AL_ControlRes+0x2ae>
                        StatusCode = ALSTATUSCODE_UNSPECIFIEDERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	80bb      	strh	r3, [r7, #4]
                break;
 80031c4:	e119      	b.n	80033fa <AL_ControlRes+0x2ae>
                case PREOP_2_SAFEOP:

                        if (!bApplEsmPending)
 80031c6:	4b7e      	ldr	r3, [pc, #504]	@ (80033c0 <AL_ControlRes+0x274>)
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <AL_ControlRes+0x86>
                        {
                            APPL_StopInputHandler();
 80031ce:	f7fd f8b1 	bl	8000334 <APPL_StopInputHandler>
                        }

                    StopInputHandler();
 80031d2:	f7ff fae9 	bl	80027a8 <StopInputHandler>
                    
                    /*ECATCHANGE_START(V5.13) ESM1*/
                    if ((u8LocalErrorState & STATE_MASK) == STATE_PREOP)
 80031d6:	4b7b      	ldr	r3, [pc, #492]	@ (80033c4 <AL_ControlRes+0x278>)
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	f003 030f 	and.w	r3, r3, #15
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d103      	bne.n	80031ea <AL_ControlRes+0x9e>
                        /*ECATCHANGE_END(V5.13) ESM1*/
                    {
                        /*Set application specified error*/
                        StatusCode = u16LocalErrorCode;
 80031e2:	4b79      	ldr	r3, [pc, #484]	@ (80033c8 <AL_ControlRes+0x27c>)
 80031e4:	881b      	ldrh	r3, [r3, #0]
 80031e6:	80bb      	strh	r3, [r7, #4]
                    else
                    {
                        /*Set unspecified error*/
                        StatusCode = ALSTATUSCODE_UNSPECIFIEDERROR;
                    }
                break;
 80031e8:	e107      	b.n	80033fa <AL_ControlRes+0x2ae>
                        StatusCode = ALSTATUSCODE_UNSPECIFIEDERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	80bb      	strh	r3, [r7, #4]
                break;
 80031ee:	e104      	b.n	80033fa <AL_ControlRes+0x2ae>
                case SAFEOP_2_OP:
                    if(bDcSyncActive)
 80031f0:	4b76      	ldr	r3, [pc, #472]	@ (80033cc <AL_ControlRes+0x280>)
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d020      	beq.n	800323a <AL_ControlRes+0xee>
                    {
                        /*SafeOP to OP timeout expired check which AL status code need to be written*/
                        if(!bDcRunning)
 80031f8:	4b75      	ldr	r3, [pc, #468]	@ (80033d0 <AL_ControlRes+0x284>)
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d102      	bne.n	8003206 <AL_ControlRes+0xba>
                        {
                            /*no Sync0 signal received*/
                            StatusCode = ALSTATUSCODE_NOSYNCERROR;
 8003200:	232d      	movs	r3, #45	@ 0x2d
 8003202:	80bb      	strh	r3, [r7, #4]
 8003204:	e02a      	b.n	800325c <AL_ControlRes+0x110>
                        }
                        else if(!bEcatFirstOutputsReceived && (nPdOutputSize > 0))
 8003206:	4b73      	ldr	r3, [pc, #460]	@ (80033d4 <AL_ControlRes+0x288>)
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d106      	bne.n	800321c <AL_ControlRes+0xd0>
 800320e:	4b72      	ldr	r3, [pc, #456]	@ (80033d8 <AL_ControlRes+0x28c>)
 8003210:	881b      	ldrh	r3, [r3, #0]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d002      	beq.n	800321c <AL_ControlRes+0xd0>
                        {
                            /*no process data received*/
                            StatusCode = ALSTATUSCODE_SMWATCHDOG;
 8003216:	231b      	movs	r3, #27
 8003218:	80bb      	strh	r3, [r7, #4]
 800321a:	e01f      	b.n	800325c <AL_ControlRes+0x110>
                        }
/*ECATCHANGE_START(V5.13) ESM3*/
                        else if (!bSmSyncSequenceValid)
 800321c:	4b6f      	ldr	r3, [pc, #444]	@ (80033dc <AL_ControlRes+0x290>)
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d102      	bne.n	800322a <AL_ControlRes+0xde>
                        {
                            /*SM/Sync Sequence is not valid*/
                            StatusCode = ALSTATUSCODE_SYNCERROR;
 8003224:	231a      	movs	r3, #26
 8003226:	80bb      	strh	r3, [r7, #4]
 8003228:	e018      	b.n	800325c <AL_ControlRes+0x110>
                        }
                        else
                        {
                            /*Set valid state transition even if timeout expired*/
                            Status = STATE_OP;
 800322a:	2308      	movs	r3, #8
 800322c:	71fb      	strb	r3, [r7, #7]
                            StatusCode = 0;
 800322e:	2300      	movs	r3, #0
 8003230:	80bb      	strh	r3, [r7, #4]
                            /* Slave is OPERATIONAL */
                            bEcatOutputUpdateRunning = TRUE;
 8003232:	4b6b      	ldr	r3, [pc, #428]	@ (80033e0 <AL_ControlRes+0x294>)
 8003234:	2201      	movs	r2, #1
 8003236:	701a      	strb	r2, [r3, #0]
 8003238:	e010      	b.n	800325c <AL_ControlRes+0x110>
                    }
                    else
                    {
                        {
                            /*ECATCHANGE_START(V5.13) ESM1*/
                            if ((u8LocalErrorState & STATE_MASK) == STATE_SAFEOP)
 800323a:	4b62      	ldr	r3, [pc, #392]	@ (80033c4 <AL_ControlRes+0x278>)
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	f003 030f 	and.w	r3, r3, #15
 8003242:	2b04      	cmp	r3, #4
 8003244:	d103      	bne.n	800324e <AL_ControlRes+0x102>
                            {
                                /*Set application specified error*/
                                StatusCode = u16LocalErrorCode;
 8003246:	4b60      	ldr	r3, [pc, #384]	@ (80033c8 <AL_ControlRes+0x27c>)
 8003248:	881b      	ldrh	r3, [r3, #0]
 800324a:	80bb      	strh	r3, [r7, #4]
 800324c:	e006      	b.n	800325c <AL_ControlRes+0x110>
                            }
                            else
                                /*ECATCHANGE_END(V5.13) ESM1*/
                            {
                                /*Set valid state transition even if timeout expired*/
                                Status = STATE_OP;
 800324e:	2308      	movs	r3, #8
 8003250:	71fb      	strb	r3, [r7, #7]
                                StatusCode = 0;
 8003252:	2300      	movs	r3, #0
 8003254:	80bb      	strh	r3, [r7, #4]
                                /* Slave is OPERATIONAL */
                                bEcatOutputUpdateRunning = TRUE;
 8003256:	4b62      	ldr	r3, [pc, #392]	@ (80033e0 <AL_ControlRes+0x294>)
 8003258:	2201      	movs	r2, #1
 800325a:	701a      	strb	r2, [r3, #0]
                            }
                        }
                    }

                    /*Stop handler on failed transition*/
                    if(StatusCode != 0)
 800325c:	88bb      	ldrh	r3, [r7, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	f000 80a1 	beq.w	80033a6 <AL_ControlRes+0x25a>
                    {
                            if (!bApplEsmPending)
 8003264:	4b56      	ldr	r3, [pc, #344]	@ (80033c0 <AL_ControlRes+0x274>)
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d101      	bne.n	8003270 <AL_ControlRes+0x124>
                            {
                                APPL_StopOutputHandler();
 800326c:	f7fd f872 	bl	8000354 <APPL_StopOutputHandler>
                            }

                        StopOutputHandler();
 8003270:	f7ff fa88 	bl	8002784 <StopOutputHandler>
                    }
                break;
 8003274:	e097      	b.n	80033a6 <AL_ControlRes+0x25a>
            }
        } //ESM timeout
        else
        {
            /*Call application specific transition function and complete transition it the function returns 0*/
            switch(nEcatStateTrans)
 8003276:	4b51      	ldr	r3, [pc, #324]	@ (80033bc <AL_ControlRes+0x270>)
 8003278:	881b      	ldrh	r3, [r3, #0]
 800327a:	2b48      	cmp	r3, #72	@ 0x48
 800327c:	d048      	beq.n	8003310 <AL_ControlRes+0x1c4>
 800327e:	2b48      	cmp	r3, #72	@ 0x48
 8003280:	f300 80bb 	bgt.w	80033fa <AL_ControlRes+0x2ae>
 8003284:	2b13      	cmp	r3, #19
 8003286:	dc02      	bgt.n	800328e <AL_ControlRes+0x142>
 8003288:	2b12      	cmp	r3, #18
 800328a:	da03      	bge.n	8003294 <AL_ControlRes+0x148>
 800328c:	e0b5      	b.n	80033fa <AL_ControlRes+0x2ae>
 800328e:	2b24      	cmp	r3, #36	@ 0x24
 8003290:	d021      	beq.n	80032d6 <AL_ControlRes+0x18a>
 8003292:	e0b2      	b.n	80033fa <AL_ControlRes+0x2ae>
            {
                case INIT_2_PREOP:
                case INIT_2_BOOT:
                    if(bApplEsmPending)
 8003294:	4b4a      	ldr	r3, [pc, #296]	@ (80033c0 <AL_ControlRes+0x274>)
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	f000 8086 	beq.w	80033aa <AL_ControlRes+0x25e>
                    {
                        bApplEsmPending = FALSE;
 800329e:	4b48      	ldr	r3, [pc, #288]	@ (80033c0 <AL_ControlRes+0x274>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	701a      	strb	r2, [r3, #0]
                        /*APPL_StartMailboxHandler() need to be called*/
                        result = APPL_StartMailboxHandler();
 80032a4:	f7fd f82b 	bl	80002fe <APPL_StartMailboxHandler>
 80032a8:	4603      	mov	r3, r0
 80032aa:	807b      	strh	r3, [r7, #2]

                        if(result == 0)
 80032ac:	887b      	ldrh	r3, [r7, #2]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d109      	bne.n	80032c6 <AL_ControlRes+0x17a>
                        {
                            /*The application specific transition was successful => set active mailbox handler indication*/
                            bMbxRunning = TRUE;
 80032b2:	4b4c      	ldr	r3, [pc, #304]	@ (80033e4 <AL_ControlRes+0x298>)
 80032b4:	2201      	movs	r2, #1
 80032b6:	701a      	strb	r2, [r3, #0]
                            Status =  (UINT8)(nEcatStateTrans & STATE_MASK);
 80032b8:	4b40      	ldr	r3, [pc, #256]	@ (80033bc <AL_ControlRes+0x270>)
 80032ba:	881b      	ldrh	r3, [r3, #0]
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	f003 030f 	and.w	r3, r3, #15
 80032c2:	71fb      	strb	r3, [r7, #7]
                                APPL_StopMailboxHandler();
                                MBX_StopMailboxHandler();
                            }
                        }
                    }
                break;
 80032c4:	e071      	b.n	80033aa <AL_ControlRes+0x25e>
                            if(result != NOERROR_INWORK)
 80032c6:	887b      	ldrh	r3, [r7, #2]
 80032c8:	2bff      	cmp	r3, #255	@ 0xff
 80032ca:	d06e      	beq.n	80033aa <AL_ControlRes+0x25e>
                                APPL_StopMailboxHandler();
 80032cc:	f7fd f81f 	bl	800030e <APPL_StopMailboxHandler>
                                MBX_StopMailboxHandler();
 80032d0:	f000 fc7e 	bl	8003bd0 <MBX_StopMailboxHandler>
                break;
 80032d4:	e069      	b.n	80033aa <AL_ControlRes+0x25e>
                case PREOP_2_SAFEOP:
                    if(bApplEsmPending)
 80032d6:	4b3a      	ldr	r3, [pc, #232]	@ (80033c0 <AL_ControlRes+0x274>)
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d067      	beq.n	80033ae <AL_ControlRes+0x262>
                    {
                        bApplEsmPending = FALSE;
 80032de:	4b38      	ldr	r3, [pc, #224]	@ (80033c0 <AL_ControlRes+0x274>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	701a      	strb	r2, [r3, #0]
                        result = APPL_StartInputHandler(&u16ALEventMask);
 80032e4:	4840      	ldr	r0, [pc, #256]	@ (80033e8 <AL_ControlRes+0x29c>)
 80032e6:	f7fd f81a 	bl	800031e <APPL_StartInputHandler>
 80032ea:	4603      	mov	r3, r0
 80032ec:	807b      	strh	r3, [r7, #2]

                        if(result == 0)
 80032ee:	887b      	ldrh	r3, [r7, #2]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d105      	bne.n	8003300 <AL_ControlRes+0x1b4>
                        {
                            bEcatInputUpdateRunning = TRUE;
 80032f4:	4b3d      	ldr	r3, [pc, #244]	@ (80033ec <AL_ControlRes+0x2a0>)
 80032f6:	2201      	movs	r2, #1
 80032f8:	701a      	strb	r2, [r3, #0]
                            Status = STATE_SAFEOP;
 80032fa:	2304      	movs	r3, #4
 80032fc:	71fb      	strb	r3, [r7, #7]
                                APPL_StopInputHandler();
                                StopInputHandler();
                            }
                        }
                    }
                break;
 80032fe:	e056      	b.n	80033ae <AL_ControlRes+0x262>
                            if(result != NOERROR_INWORK)
 8003300:	887b      	ldrh	r3, [r7, #2]
 8003302:	2bff      	cmp	r3, #255	@ 0xff
 8003304:	d053      	beq.n	80033ae <AL_ControlRes+0x262>
                                APPL_StopInputHandler();
 8003306:	f7fd f815 	bl	8000334 <APPL_StopInputHandler>
                                StopInputHandler();
 800330a:	f7ff fa4d 	bl	80027a8 <StopInputHandler>
                break;
 800330e:	e04e      	b.n	80033ae <AL_ControlRes+0x262>
                case SAFEOP_2_OP:
                   if(bApplEsmPending)
 8003310:	4b2b      	ldr	r3, [pc, #172]	@ (80033c0 <AL_ControlRes+0x274>)
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d06f      	beq.n	80033f8 <AL_ControlRes+0x2ac>
                    {
                        if(bDcSyncActive)
 8003318:	4b2c      	ldr	r3, [pc, #176]	@ (80033cc <AL_ControlRes+0x280>)
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d02a      	beq.n	8003376 <AL_ControlRes+0x22a>
                        {
                            if(i16WaitForPllRunningTimeout > 0 && i16WaitForPllRunningTimeout <= i16WaitForPllRunningCnt)
 8003320:	4b33      	ldr	r3, [pc, #204]	@ (80033f0 <AL_ControlRes+0x2a4>)
 8003322:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003326:	2b00      	cmp	r3, #0
 8003328:	dd66      	ble.n	80033f8 <AL_ControlRes+0x2ac>
 800332a:	4b31      	ldr	r3, [pc, #196]	@ (80033f0 <AL_ControlRes+0x2a4>)
 800332c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003330:	4b30      	ldr	r3, [pc, #192]	@ (80033f4 <AL_ControlRes+0x2a8>)
 8003332:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003336:	429a      	cmp	r2, r3
 8003338:	dc5e      	bgt.n	80033f8 <AL_ControlRes+0x2ac>
                            {
                                /*Pll sequence valid for 200ms (set in APPL_StartOutputHandler() )
                                acknowledge state transition to OP */

                                i16WaitForPllRunningTimeout = 0;
 800333a:	4b2d      	ldr	r3, [pc, #180]	@ (80033f0 <AL_ControlRes+0x2a4>)
 800333c:	2200      	movs	r2, #0
 800333e:	801a      	strh	r2, [r3, #0]
                                i16WaitForPllRunningCnt = 0;
 8003340:	4b2c      	ldr	r3, [pc, #176]	@ (80033f4 <AL_ControlRes+0x2a8>)
 8003342:	2200      	movs	r2, #0
 8003344:	801a      	strh	r2, [r3, #0]

                                bApplEsmPending = FALSE;
 8003346:	4b1e      	ldr	r3, [pc, #120]	@ (80033c0 <AL_ControlRes+0x274>)
 8003348:	2200      	movs	r2, #0
 800334a:	701a      	strb	r2, [r3, #0]
                                result = APPL_StartOutputHandler();
 800334c:	f7fc fffa 	bl	8000344 <APPL_StartOutputHandler>
 8003350:	4603      	mov	r3, r0
 8003352:	807b      	strh	r3, [r7, #2]

                                if(result == 0)
 8003354:	887b      	ldrh	r3, [r7, #2]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d105      	bne.n	8003366 <AL_ControlRes+0x21a>
                                {
                                    /* Slave is OPERATIONAL */
                                    bEcatOutputUpdateRunning = TRUE;
 800335a:	4b21      	ldr	r3, [pc, #132]	@ (80033e0 <AL_ControlRes+0x294>)
 800335c:	2201      	movs	r2, #1
 800335e:	701a      	strb	r2, [r3, #0]
                                    Status = STATE_OP;
 8003360:	2308      	movs	r3, #8
 8003362:	71fb      	strb	r3, [r7, #7]
                                    }
                                }
                            }
                        }       
                    }             
                break;
 8003364:	e048      	b.n	80033f8 <AL_ControlRes+0x2ac>
                                    if(result != NOERROR_INWORK)
 8003366:	887b      	ldrh	r3, [r7, #2]
 8003368:	2bff      	cmp	r3, #255	@ 0xff
 800336a:	d045      	beq.n	80033f8 <AL_ControlRes+0x2ac>
                                        APPL_StopOutputHandler();
 800336c:	f7fc fff2 	bl	8000354 <APPL_StopOutputHandler>
                                        StopOutputHandler();
 8003370:	f7ff fa08 	bl	8002784 <StopOutputHandler>
                break;
 8003374:	e040      	b.n	80033f8 <AL_ControlRes+0x2ac>
                                bApplEsmPending = FALSE;  
 8003376:	4b12      	ldr	r3, [pc, #72]	@ (80033c0 <AL_ControlRes+0x274>)
 8003378:	2200      	movs	r2, #0
 800337a:	701a      	strb	r2, [r3, #0]
                                result = APPL_StartOutputHandler();
 800337c:	f7fc ffe2 	bl	8000344 <APPL_StartOutputHandler>
 8003380:	4603      	mov	r3, r0
 8003382:	807b      	strh	r3, [r7, #2]
                                if(result == 0)
 8003384:	887b      	ldrh	r3, [r7, #2]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d105      	bne.n	8003396 <AL_ControlRes+0x24a>
                                    bEcatOutputUpdateRunning = TRUE;
 800338a:	4b15      	ldr	r3, [pc, #84]	@ (80033e0 <AL_ControlRes+0x294>)
 800338c:	2201      	movs	r2, #1
 800338e:	701a      	strb	r2, [r3, #0]
                                    Status = STATE_OP;
 8003390:	2308      	movs	r3, #8
 8003392:	71fb      	strb	r3, [r7, #7]
                break;
 8003394:	e030      	b.n	80033f8 <AL_ControlRes+0x2ac>
                                    if(result != NOERROR_INWORK)
 8003396:	887b      	ldrh	r3, [r7, #2]
 8003398:	2bff      	cmp	r3, #255	@ 0xff
 800339a:	d02d      	beq.n	80033f8 <AL_ControlRes+0x2ac>
                                        APPL_StopOutputHandler();
 800339c:	f7fc ffda 	bl	8000354 <APPL_StopOutputHandler>
                                        StopOutputHandler();
 80033a0:	f7ff f9f0 	bl	8002784 <StopOutputHandler>
                break;
 80033a4:	e028      	b.n	80033f8 <AL_ControlRes+0x2ac>
                break;
 80033a6:	bf00      	nop
 80033a8:	e027      	b.n	80033fa <AL_ControlRes+0x2ae>
                break;
 80033aa:	bf00      	nop
 80033ac:	e025      	b.n	80033fa <AL_ControlRes+0x2ae>
                break;
 80033ae:	bf00      	nop
 80033b0:	e023      	b.n	80033fa <AL_ControlRes+0x2ae>
 80033b2:	bf00      	nop
 80033b4:	240004f0 	.word	0x240004f0
 80033b8:	240004ce 	.word	0x240004ce
 80033bc:	240004f2 	.word	0x240004f2
 80033c0:	240004ef 	.word	0x240004ef
 80033c4:	240004ee 	.word	0x240004ee
 80033c8:	240004ec 	.word	0x240004ec
 80033cc:	240004cc 	.word	0x240004cc
 80033d0:	240004d0 	.word	0x240004d0
 80033d4:	240004ca 	.word	0x240004ca
 80033d8:	240004f6 	.word	0x240004f6
 80033dc:	240004d6 	.word	0x240004d6
 80033e0:	240004c8 	.word	0x240004c8
 80033e4:	24000517 	.word	0x24000517
 80033e8:	24000504 	.word	0x24000504
 80033ec:	240004c9 	.word	0x240004c9
 80033f0:	240004d8 	.word	0x240004d8
 80033f4:	240004da 	.word	0x240004da
                break;
 80033f8:	bf00      	nop
            }//Switch - transition
        }

        if(Status != 0)
 80033fa:	79fb      	ldrb	r3, [r7, #7]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00f      	beq.n	8003420 <AL_ControlRes+0x2d4>
        {
            /*Pending state transition finished => write AL Status and AL Status Code*/
            bEcatWaitForAlControlRes = FALSE;
 8003400:	4b09      	ldr	r3, [pc, #36]	@ (8003428 <AL_ControlRes+0x2dc>)
 8003402:	2200      	movs	r2, #0
 8003404:	701a      	strb	r2, [r3, #0]

            if (StatusCode != 0)
 8003406:	88bb      	ldrh	r3, [r7, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d003      	beq.n	8003414 <AL_ControlRes+0x2c8>
            {
                Status |= STATE_CHANGE;
 800340c:	79fb      	ldrb	r3, [r7, #7]
 800340e:	f043 0310 	orr.w	r3, r3, #16
 8003412:	71fb      	strb	r3, [r7, #7]
            }

            SetALStatus(Status,StatusCode);
 8003414:	88ba      	ldrh	r2, [r7, #4]
 8003416:	79fb      	ldrb	r3, [r7, #7]
 8003418:	4611      	mov	r1, r2
 800341a:	4618      	mov	r0, r3
 800341c:	f7ff fa66 	bl	80028ec <SetALStatus>
        }
    }// Pending state transition (bEcatWaitForAlControlRes == true)
}
 8003420:	bf00      	nop
 8003422:	3708      	adds	r7, #8
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	240004f0 	.word	0x240004f0

0800342c <DC_CheckWatchdog>:
 \brief    This function checks the current Sync state and set the local flags
 The analyse of the local flags is handled in "CheckIfEcatError"

*////////////////////////////////////////////////////////////////////////////////////////
void DC_CheckWatchdog(void)
{
 800342c:	b480      	push	{r7}
 800342e:	af00      	add	r7, sp, #0

    if(bDcSyncActive && bEcatInputUpdateRunning)
 8003430:	4b3c      	ldr	r3, [pc, #240]	@ (8003524 <DC_CheckWatchdog+0xf8>)
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d070      	beq.n	800351a <DC_CheckWatchdog+0xee>
 8003438:	4b3b      	ldr	r3, [pc, #236]	@ (8003528 <DC_CheckWatchdog+0xfc>)
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d06c      	beq.n	800351a <DC_CheckWatchdog+0xee>
    {
        /*If Sync0 watchdog is enabled and expired*/
        if((Sync0WdValue > 0) && (Sync0WdCounter >= Sync0WdValue))
 8003440:	4b3a      	ldr	r3, [pc, #232]	@ (800352c <DC_CheckWatchdog+0x100>)
 8003442:	881b      	ldrh	r3, [r3, #0]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d009      	beq.n	800345c <DC_CheckWatchdog+0x30>
 8003448:	4b39      	ldr	r3, [pc, #228]	@ (8003530 <DC_CheckWatchdog+0x104>)
 800344a:	881a      	ldrh	r2, [r3, #0]
 800344c:	4b37      	ldr	r3, [pc, #220]	@ (800352c <DC_CheckWatchdog+0x100>)
 800344e:	881b      	ldrh	r3, [r3, #0]
 8003450:	429a      	cmp	r2, r3
 8003452:	d303      	bcc.n	800345c <DC_CheckWatchdog+0x30>
        {
                /*Sync0 watchdog expired*/
                bDcRunning = FALSE;        
 8003454:	4b37      	ldr	r3, [pc, #220]	@ (8003534 <DC_CheckWatchdog+0x108>)
 8003456:	2200      	movs	r2, #0
 8003458:	701a      	strb	r2, [r3, #0]
 800345a:	e00e      	b.n	800347a <DC_CheckWatchdog+0x4e>
        }
        else
        {
            if(Sync0WdCounter < Sync0WdValue)
 800345c:	4b34      	ldr	r3, [pc, #208]	@ (8003530 <DC_CheckWatchdog+0x104>)
 800345e:	881a      	ldrh	r2, [r3, #0]
 8003460:	4b32      	ldr	r3, [pc, #200]	@ (800352c <DC_CheckWatchdog+0x100>)
 8003462:	881b      	ldrh	r3, [r3, #0]
 8003464:	429a      	cmp	r2, r3
 8003466:	d205      	bcs.n	8003474 <DC_CheckWatchdog+0x48>
            {
                Sync0WdCounter ++;
 8003468:	4b31      	ldr	r3, [pc, #196]	@ (8003530 <DC_CheckWatchdog+0x104>)
 800346a:	881b      	ldrh	r3, [r3, #0]
 800346c:	3301      	adds	r3, #1
 800346e:	b29a      	uxth	r2, r3
 8003470:	4b2f      	ldr	r3, [pc, #188]	@ (8003530 <DC_CheckWatchdog+0x104>)
 8003472:	801a      	strh	r2, [r3, #0]
            }

            bDcRunning = TRUE;
 8003474:	4b2f      	ldr	r3, [pc, #188]	@ (8003534 <DC_CheckWatchdog+0x108>)
 8003476:	2201      	movs	r2, #1
 8003478:	701a      	strb	r2, [r3, #0]
        }

        if(bDcRunning)
 800347a:	4b2e      	ldr	r3, [pc, #184]	@ (8003534 <DC_CheckWatchdog+0x108>)
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d013      	beq.n	80034aa <DC_CheckWatchdog+0x7e>
        {
            /*Check the Sync1 cycle if Sync1 Wd is enabled*/
            if(Sync1WdValue > 0)
 8003482:	4b2d      	ldr	r3, [pc, #180]	@ (8003538 <DC_CheckWatchdog+0x10c>)
 8003484:	881b      	ldrh	r3, [r3, #0]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00f      	beq.n	80034aa <DC_CheckWatchdog+0x7e>
            {
                if(Sync1WdCounter < Sync1WdValue)
 800348a:	4b2c      	ldr	r3, [pc, #176]	@ (800353c <DC_CheckWatchdog+0x110>)
 800348c:	881a      	ldrh	r2, [r3, #0]
 800348e:	4b2a      	ldr	r3, [pc, #168]	@ (8003538 <DC_CheckWatchdog+0x10c>)
 8003490:	881b      	ldrh	r3, [r3, #0]
 8003492:	429a      	cmp	r2, r3
 8003494:	d206      	bcs.n	80034a4 <DC_CheckWatchdog+0x78>
                {
                    Sync1WdCounter ++;
 8003496:	4b29      	ldr	r3, [pc, #164]	@ (800353c <DC_CheckWatchdog+0x110>)
 8003498:	881b      	ldrh	r3, [r3, #0]
 800349a:	3301      	adds	r3, #1
 800349c:	b29a      	uxth	r2, r3
 800349e:	4b27      	ldr	r3, [pc, #156]	@ (800353c <DC_CheckWatchdog+0x110>)
 80034a0:	801a      	strh	r2, [r3, #0]
 80034a2:	e002      	b.n	80034aa <DC_CheckWatchdog+0x7e>
                }
                else
                {
                    /*Sync1 watchdog expired*/
                    bDcRunning = FALSE;
 80034a4:	4b23      	ldr	r3, [pc, #140]	@ (8003534 <DC_CheckWatchdog+0x108>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	701a      	strb	r2, [r3, #0]
                }
            }
        }
        if(bDcRunning)
 80034aa:	4b22      	ldr	r3, [pc, #136]	@ (8003534 <DC_CheckWatchdog+0x108>)
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d02b      	beq.n	800350a <DC_CheckWatchdog+0xde>
        {
/*ECATCHANGE_START(V5.13) ESM4*/
           if((sErrorSettings.u16SyncErrorCounterLimit == 0) || (sSyncManOutPar.u16SmEventMissedCounter < sErrorSettings.u16SyncErrorCounterLimit))
 80034b2:	4b23      	ldr	r3, [pc, #140]	@ (8003540 <DC_CheckWatchdog+0x114>)
 80034b4:	891b      	ldrh	r3, [r3, #8]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d005      	beq.n	80034c6 <DC_CheckWatchdog+0x9a>
 80034ba:	4b22      	ldr	r3, [pc, #136]	@ (8003544 <DC_CheckWatchdog+0x118>)
 80034bc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80034be:	4b20      	ldr	r3, [pc, #128]	@ (8003540 <DC_CheckWatchdog+0x114>)
 80034c0:	891b      	ldrh	r3, [r3, #8]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d211      	bcs.n	80034ea <DC_CheckWatchdog+0xbe>
/*ECATCHANGE_END(V5.13) ESM4*/
            {
                bSmSyncSequenceValid = TRUE;
 80034c6:	4b20      	ldr	r3, [pc, #128]	@ (8003548 <DC_CheckWatchdog+0x11c>)
 80034c8:	2201      	movs	r2, #1
 80034ca:	701a      	strb	r2, [r3, #0]

                /*Wait for PLL is active increment the Pll valid counter*/
                if (i16WaitForPllRunningTimeout > 0)
 80034cc:	4b1f      	ldr	r3, [pc, #124]	@ (800354c <DC_CheckWatchdog+0x120>)
 80034ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	dd21      	ble.n	800351a <DC_CheckWatchdog+0xee>
                {
                    i16WaitForPllRunningCnt++;
 80034d6:	4b1e      	ldr	r3, [pc, #120]	@ (8003550 <DC_CheckWatchdog+0x124>)
 80034d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034dc:	b29b      	uxth	r3, r3
 80034de:	3301      	adds	r3, #1
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	b21a      	sxth	r2, r3
 80034e4:	4b1a      	ldr	r3, [pc, #104]	@ (8003550 <DC_CheckWatchdog+0x124>)
 80034e6:	801a      	strh	r2, [r3, #0]
                if (i16WaitForPllRunningTimeout > 0)
 80034e8:	e017      	b.n	800351a <DC_CheckWatchdog+0xee>
                }
            }
            else if (bSmSyncSequenceValid)
 80034ea:	4b17      	ldr	r3, [pc, #92]	@ (8003548 <DC_CheckWatchdog+0x11c>)
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d013      	beq.n	800351a <DC_CheckWatchdog+0xee>
            {
                    bSmSyncSequenceValid = FALSE;
 80034f2:	4b15      	ldr	r3, [pc, #84]	@ (8003548 <DC_CheckWatchdog+0x11c>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	701a      	strb	r2, [r3, #0]

                /*Wait for PLL is active reset the Pll valid counter*/
                if (i16WaitForPllRunningTimeout > 0)
 80034f8:	4b14      	ldr	r3, [pc, #80]	@ (800354c <DC_CheckWatchdog+0x120>)
 80034fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	dd0b      	ble.n	800351a <DC_CheckWatchdog+0xee>
                {
                    i16WaitForPllRunningCnt = 0;
 8003502:	4b13      	ldr	r3, [pc, #76]	@ (8003550 <DC_CheckWatchdog+0x124>)
 8003504:	2200      	movs	r2, #0
 8003506:	801a      	strh	r2, [r3, #0]
        else if(bSmSyncSequenceValid)
        {
           bSmSyncSequenceValid = FALSE;
        }
    }
}
 8003508:	e007      	b.n	800351a <DC_CheckWatchdog+0xee>
        else if(bSmSyncSequenceValid)
 800350a:	4b0f      	ldr	r3, [pc, #60]	@ (8003548 <DC_CheckWatchdog+0x11c>)
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d003      	beq.n	800351a <DC_CheckWatchdog+0xee>
           bSmSyncSequenceValid = FALSE;
 8003512:	4b0d      	ldr	r3, [pc, #52]	@ (8003548 <DC_CheckWatchdog+0x11c>)
 8003514:	2200      	movs	r2, #0
 8003516:	701a      	strb	r2, [r3, #0]
}
 8003518:	e7ff      	b.n	800351a <DC_CheckWatchdog+0xee>
 800351a:	bf00      	nop
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr
 8003524:	240004cc 	.word	0x240004cc
 8003528:	240004c9 	.word	0x240004c9
 800352c:	240004de 	.word	0x240004de
 8003530:	240004dc 	.word	0x240004dc
 8003534:	240004d0 	.word	0x240004d0
 8003538:	240004e2 	.word	0x240004e2
 800353c:	240004e0 	.word	0x240004e0
 8003540:	24000390 	.word	0x24000390
 8003544:	240005a8 	.word	0x240005a8
 8003548:	240004d6 	.word	0x240004d6
 800354c:	240004d8 	.word	0x240004d8
 8003550:	240004da 	.word	0x240004da

08003554 <CheckIfEcatError>:

 \brief    Checks communication and synchronisation variables and update AL status / AL status code if an error has occurred

*////////////////////////////////////////////////////////////////////////////////////////
void CheckIfEcatError(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
   /*if the watchdog is enabled check the process data watchdog in the ESC
   and set the AL status code 0x1B if the watchdog expired*/
   if (EcatWdValue != 0)
 800355a:	4b22      	ldr	r3, [pc, #136]	@ (80035e4 <CheckIfEcatError+0x90>)
 800355c:	881b      	ldrh	r3, [r3, #0]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d023      	beq.n	80035aa <CheckIfEcatError+0x56>
   {
      /*watchdog time is set => watchdog is active*/
      UINT16 WdStatusOK = 0;
 8003562:	2300      	movs	r3, #0
 8003564:	80fb      	strh	r3, [r7, #6]

      HW_EscReadWord(WdStatusOK, ESC_PD_WD_STATE);
 8003566:	1dbb      	adds	r3, r7, #6
 8003568:	2202      	movs	r2, #2
 800356a:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 800356e:	4618      	mov	r0, r3
 8003570:	f7fd f9e2 	bl	8000938 <HW_EscRead>
      WdStatusOK = SWAPWORD(WdStatusOK);
 8003574:	88fb      	ldrh	r3, [r7, #6]
 8003576:	80fb      	strh	r3, [r7, #6]

      if (!(WdStatusOK & ESC_PD_WD_TRIGGER_MASK) && (nPdOutputSize > 0))
 8003578:	88fb      	ldrh	r3, [r7, #6]
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b00      	cmp	r3, #0
 8003580:	d113      	bne.n	80035aa <CheckIfEcatError+0x56>
 8003582:	4b19      	ldr	r3, [pc, #100]	@ (80035e8 <CheckIfEcatError+0x94>)
 8003584:	881b      	ldrh	r3, [r3, #0]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00f      	beq.n	80035aa <CheckIfEcatError+0x56>
      {
         /*The device is in OP state*/

         if (bEcatOutputUpdateRunning
 800358a:	4b18      	ldr	r3, [pc, #96]	@ (80035ec <CheckIfEcatError+0x98>)
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d008      	beq.n	80035a4 <CheckIfEcatError+0x50>
            && bEcatFirstOutputsReceived
 8003592:	4b17      	ldr	r3, [pc, #92]	@ (80035f0 <CheckIfEcatError+0x9c>)
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d004      	beq.n	80035a4 <CheckIfEcatError+0x50>
            )
         {
            AL_ControlInd(STATE_SAFEOP, ALSTATUSCODE_SMWATCHDOG);
 800359a:	211b      	movs	r1, #27
 800359c:	2004      	movs	r0, #4
 800359e:	f7ff fa03 	bl	80029a8 <AL_ControlInd>
 80035a2:	e01c      	b.n	80035de <CheckIfEcatError+0x8a>
            return;
         }

         else
         {
            bEcatFirstOutputsReceived = FALSE;
 80035a4:	4b12      	ldr	r3, [pc, #72]	@ (80035f0 <CheckIfEcatError+0x9c>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	701a      	strb	r2, [r3, #0]
         }
      }
   }

   if(bDcSyncActive)
 80035aa:	4b12      	ldr	r3, [pc, #72]	@ (80035f4 <CheckIfEcatError+0xa0>)
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d015      	beq.n	80035de <CheckIfEcatError+0x8a>
   {
       if(bEcatOutputUpdateRunning)
 80035b2:	4b0e      	ldr	r3, [pc, #56]	@ (80035ec <CheckIfEcatError+0x98>)
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d011      	beq.n	80035de <CheckIfEcatError+0x8a>
       {
           /*Slave is in OP state*/
           if(!bDcRunning)
 80035ba:	4b0f      	ldr	r3, [pc, #60]	@ (80035f8 <CheckIfEcatError+0xa4>)
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d104      	bne.n	80035cc <CheckIfEcatError+0x78>
           {
               AL_ControlInd(STATE_SAFEOP, ALSTATUSCODE_FATALSYNCERROR);
 80035c2:	212c      	movs	r1, #44	@ 0x2c
 80035c4:	2004      	movs	r0, #4
 80035c6:	f7ff f9ef 	bl	80029a8 <AL_ControlInd>
               return;
 80035ca:	e008      	b.n	80035de <CheckIfEcatError+0x8a>
           }
           else if(!bSmSyncSequenceValid)
 80035cc:	4b0b      	ldr	r3, [pc, #44]	@ (80035fc <CheckIfEcatError+0xa8>)
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d104      	bne.n	80035de <CheckIfEcatError+0x8a>
           {
               AL_ControlInd(STATE_SAFEOP, ALSTATUSCODE_SYNCERROR);
 80035d4:	211a      	movs	r1, #26
 80035d6:	2004      	movs	r0, #4
 80035d8:	f7ff f9e6 	bl	80029a8 <AL_ControlInd>
               return;
 80035dc:	bf00      	nop
           }
        
       }
   }
}
 80035de:	3708      	adds	r7, #8
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	240004fe 	.word	0x240004fe
 80035e8:	240004f6 	.word	0x240004f6
 80035ec:	240004c8 	.word	0x240004c8
 80035f0:	240004ca 	.word	0x240004ca
 80035f4:	240004cc 	.word	0x240004cc
 80035f8:	240004d0 	.word	0x240004d0
 80035fc:	240004d6 	.word	0x240004d6

08003600 <ECAT_Init>:

 \brief    This function initialize the EtherCAT Slave Interface.
*////////////////////////////////////////////////////////////////////////////////////////

void ECAT_Init(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
    UINT8 i;
    /*Get Maximum Number of SyncManagers and supported DPRAM size*/
    HW_EscReadByte(nMaxSyncMan, ESC_SM_CHANNELS_OFFSET);
 8003606:	2201      	movs	r2, #1
 8003608:	2105      	movs	r1, #5
 800360a:	483a      	ldr	r0, [pc, #232]	@ (80036f4 <ECAT_Init+0xf4>)
 800360c:	f7fd f994 	bl	8000938 <HW_EscRead>

    HW_EscReadWord(nMaxEscAddress, ESC_DPRAM_SIZE_OFFSET);
 8003610:	2202      	movs	r2, #2
 8003612:	2106      	movs	r1, #6
 8003614:	4838      	ldr	r0, [pc, #224]	@ (80036f8 <ECAT_Init+0xf8>)
 8003616:	f7fd f98f 	bl	8000938 <HW_EscRead>
    //get max address (register + DPRAM size in Byte (in the register it is stored in KB))
    nMaxEscAddress = (nMaxEscAddress << 10) + 0xFFF;
 800361a:	4b37      	ldr	r3, [pc, #220]	@ (80036f8 <ECAT_Init+0xf8>)
 800361c:	881b      	ldrh	r3, [r3, #0]
 800361e:	029b      	lsls	r3, r3, #10
 8003620:	b29b      	uxth	r3, r3
 8003622:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8003626:	b29a      	uxth	r2, r3
 8003628:	4b33      	ldr	r3, [pc, #204]	@ (80036f8 <ECAT_Init+0xf8>)
 800362a:	801a      	strh	r2, [r3, #0]

/*ECATCHANGE_START(V5.13) ECAT2*/
    u16IdValue = 0;
 800362c:	4b33      	ldr	r3, [pc, #204]	@ (80036fc <ECAT_Init+0xfc>)
 800362e:	2200      	movs	r2, #0
 8003630:	801a      	strh	r2, [r3, #0]
/*ECATCHANGE_END(V5.13) ECAT2*/

    /* Get EEPROM loaded information */
    UpdateEEPROMLoadedState();
 8003632:	f7fe fa0d 	bl	8001a50 <UpdateEEPROMLoadedState>

    /* disable all Sync Manager channels */
    for (i = 0; i < nMaxSyncMan; i++)
 8003636:	2300      	movs	r3, #0
 8003638:	71fb      	strb	r3, [r7, #7]
 800363a:	e006      	b.n	800364a <ECAT_Init+0x4a>
    {
        DisableSyncManChannel(i);
 800363c:	79fb      	ldrb	r3, [r7, #7]
 800363e:	4618      	mov	r0, r3
 8003640:	f7fe fa44 	bl	8001acc <DisableSyncManChannel>
    for (i = 0; i < nMaxSyncMan; i++)
 8003644:	79fb      	ldrb	r3, [r7, #7]
 8003646:	3301      	adds	r3, #1
 8003648:	71fb      	strb	r3, [r7, #7]
 800364a:	4b2a      	ldr	r3, [pc, #168]	@ (80036f4 <ECAT_Init+0xf4>)
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	79fa      	ldrb	r2, [r7, #7]
 8003650:	429a      	cmp	r2, r3
 8003652:	d3f3      	bcc.n	800363c <ECAT_Init+0x3c>
    }

    /* initialize the mailbox handler */
    MBX_Init();
 8003654:	f000 f9c0 	bl	80039d8 <MBX_Init>

    /* initialize variables */
    bApplEsmPending = FALSE;
 8003658:	4b29      	ldr	r3, [pc, #164]	@ (8003700 <ECAT_Init+0x100>)
 800365a:	2200      	movs	r2, #0
 800365c:	701a      	strb	r2, [r3, #0]
    bEcatWaitForAlControlRes = FALSE;
 800365e:	4b29      	ldr	r3, [pc, #164]	@ (8003704 <ECAT_Init+0x104>)
 8003660:	2200      	movs	r2, #0
 8003662:	701a      	strb	r2, [r3, #0]
    bEcatFirstOutputsReceived = FALSE;
 8003664:	4b28      	ldr	r3, [pc, #160]	@ (8003708 <ECAT_Init+0x108>)
 8003666:	2200      	movs	r2, #0
 8003668:	701a      	strb	r2, [r3, #0]
     bEcatOutputUpdateRunning = FALSE;
 800366a:	4b28      	ldr	r3, [pc, #160]	@ (800370c <ECAT_Init+0x10c>)
 800366c:	2200      	movs	r2, #0
 800366e:	701a      	strb	r2, [r3, #0]
     bEcatInputUpdateRunning = FALSE;
 8003670:	4b27      	ldr	r3, [pc, #156]	@ (8003710 <ECAT_Init+0x110>)
 8003672:	2200      	movs	r2, #0
 8003674:	701a      	strb	r2, [r3, #0]
     bExplicitDevIdRequested = FALSE;
 8003676:	4b27      	ldr	r3, [pc, #156]	@ (8003714 <ECAT_Init+0x114>)
 8003678:	2200      	movs	r2, #0
 800367a:	701a      	strb	r2, [r3, #0]
    bWdTrigger = FALSE;
 800367c:	4b26      	ldr	r3, [pc, #152]	@ (8003718 <ECAT_Init+0x118>)
 800367e:	2200      	movs	r2, #0
 8003680:	701a      	strb	r2, [r3, #0]
    EcatWdValue = 0;
 8003682:	4b26      	ldr	r3, [pc, #152]	@ (800371c <ECAT_Init+0x11c>)
 8003684:	2200      	movs	r2, #0
 8003686:	801a      	strh	r2, [r3, #0]
    Sync0WdCounter = 0;
 8003688:	4b25      	ldr	r3, [pc, #148]	@ (8003720 <ECAT_Init+0x120>)
 800368a:	2200      	movs	r2, #0
 800368c:	801a      	strh	r2, [r3, #0]
    Sync0WdValue = 0;
 800368e:	4b25      	ldr	r3, [pc, #148]	@ (8003724 <ECAT_Init+0x124>)
 8003690:	2200      	movs	r2, #0
 8003692:	801a      	strh	r2, [r3, #0]
    Sync1WdCounter = 0;
 8003694:	4b24      	ldr	r3, [pc, #144]	@ (8003728 <ECAT_Init+0x128>)
 8003696:	2200      	movs	r2, #0
 8003698:	801a      	strh	r2, [r3, #0]
    Sync1WdValue = 0;
 800369a:	4b24      	ldr	r3, [pc, #144]	@ (800372c <ECAT_Init+0x12c>)
 800369c:	2200      	movs	r2, #0
 800369e:	801a      	strh	r2, [r3, #0]
    bDcSyncActive = FALSE;
 80036a0:	4b23      	ldr	r3, [pc, #140]	@ (8003730 <ECAT_Init+0x130>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	701a      	strb	r2, [r3, #0]

    /*ECATCHANGE_START(V5.13) ESM1*/
    u8LocalErrorState = 0;
 80036a6:	4b23      	ldr	r3, [pc, #140]	@ (8003734 <ECAT_Init+0x134>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	701a      	strb	r2, [r3, #0]
    /*ECATCHANGE_END(V5.13) ESM1*/
    u16LocalErrorCode = 0x00;
 80036ac:	4b22      	ldr	r3, [pc, #136]	@ (8003738 <ECAT_Init+0x138>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	801a      	strh	r2, [r3, #0]

    u16ALEventMask = 0;
 80036b2:	4b22      	ldr	r3, [pc, #136]	@ (800373c <ECAT_Init+0x13c>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	801a      	strh	r2, [r3, #0]
    nPdOutputSize = 0;
 80036b8:	4b21      	ldr	r3, [pc, #132]	@ (8003740 <ECAT_Init+0x140>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	801a      	strh	r2, [r3, #0]
    nPdInputSize = 0;
 80036be:	4b21      	ldr	r3, [pc, #132]	@ (8003744 <ECAT_Init+0x144>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	801a      	strh	r2, [r3, #0]

    /* initialize the AL Status register */
    nAlStatus    = STATE_INIT;
 80036c4:	4b20      	ldr	r3, [pc, #128]	@ (8003748 <ECAT_Init+0x148>)
 80036c6:	2201      	movs	r2, #1
 80036c8:	701a      	strb	r2, [r3, #0]
    SetALStatus(nAlStatus, 0);
 80036ca:	4b1f      	ldr	r3, [pc, #124]	@ (8003748 <ECAT_Init+0x148>)
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	2100      	movs	r1, #0
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7ff f90b 	bl	80028ec <SetALStatus>
    nEcatStateTrans = 0;
 80036d6:	4b1d      	ldr	r3, [pc, #116]	@ (800374c <ECAT_Init+0x14c>)
 80036d8:	2200      	movs	r2, #0
 80036da:	801a      	strh	r2, [r3, #0]

    bEscIntEnabled = FALSE;
 80036dc:	4b1c      	ldr	r3, [pc, #112]	@ (8003750 <ECAT_Init+0x150>)
 80036de:	2200      	movs	r2, #0
 80036e0:	701a      	strb	r2, [r3, #0]

    /* initialize the COE part */
    COE_Init();
 80036e2:	f7fe f8ff 	bl	80018e4 <COE_Init>

/*ECATCHANGE_START(V5.13) ECAT1*/
/*ECATCHANGE_END(V5.13) ECAT1*/
    /*reset AL event mask*/
    ResetALEventMask(0);
 80036e6:	2000      	movs	r0, #0
 80036e8:	f7fe f976 	bl	80019d8 <ResetALEventMask>
}
 80036ec:	bf00      	nop
 80036ee:	3708      	adds	r7, #8
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	240004f8 	.word	0x240004f8
 80036f8:	240004fa 	.word	0x240004fa
 80036fc:	24000506 	.word	0x24000506
 8003700:	240004ef 	.word	0x240004ef
 8003704:	240004f0 	.word	0x240004f0
 8003708:	240004ca 	.word	0x240004ca
 800370c:	240004c8 	.word	0x240004c8
 8003710:	240004c9 	.word	0x240004c9
 8003714:	240004fd 	.word	0x240004fd
 8003718:	240004cb 	.word	0x240004cb
 800371c:	240004fe 	.word	0x240004fe
 8003720:	240004dc 	.word	0x240004dc
 8003724:	240004de 	.word	0x240004de
 8003728:	240004e0 	.word	0x240004e0
 800372c:	240004e2 	.word	0x240004e2
 8003730:	240004cc 	.word	0x240004cc
 8003734:	240004ee 	.word	0x240004ee
 8003738:	240004ec 	.word	0x240004ec
 800373c:	24000504 	.word	0x24000504
 8003740:	240004f6 	.word	0x240004f6
 8003744:	240004f4 	.word	0x240004f4
 8003748:	240004fc 	.word	0x240004fc
 800374c:	240004f2 	.word	0x240004f2
 8003750:	240004e9 	.word	0x240004e9

08003754 <ECAT_Main>:
/**
 \brief        This function has to be called cyclically.
*////////////////////////////////////////////////////////////////////////////////////////

void ECAT_Main(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
    UINT16 ALEventReg;
    UINT16 EscAlControl = 0x0000;
 800375a:	2300      	movs	r3, #0
 800375c:	80bb      	strh	r3, [r7, #4]
/*ECATCHANGE_START(V5.13) MBX1*/
    UINT8 sm1Activate = SM_SETTING_ENABLE_VALUE;
 800375e:	2301      	movs	r3, #1
 8003760:	70fb      	strb	r3, [r7, #3]
    UINT8 sm1Status = 0; /*SM1 status need to be read (not MBX_READ_EVENT) to handle readframes with invalid CRCs*/
 8003762:	2300      	movs	r3, #0
 8003764:	70bb      	strb	r3, [r7, #2]
/*ECATCHANGE_END(V5.13) MBX1*/


    /* check if services are stored in the mailbox */
    MBX_Main();
 8003766:	f000 fd9d 	bl	80042a4 <MBX_Main>


    if ( bMbxRunning )
 800376a:	4b67      	ldr	r3, [pc, #412]	@ (8003908 <ECAT_Main+0x1b4>)
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00d      	beq.n	800378e <ECAT_Main+0x3a>
    {
        /* Slave is at least in PREOP, Mailbox is running */

/*ECATCHANGE_START(V5.13) MBX1*/
        /* get the Activate-Byte of SM 1 (Register 0x80E) to check if a mailbox repeat request was received */
        HW_EscReadByte(sm1Activate,(ESC_SYNCMAN_ACTIVE_OFFSET + SIZEOF_SM_REGISTER));
 8003772:	1cfb      	adds	r3, r7, #3
 8003774:	2201      	movs	r2, #1
 8003776:	f640 010e 	movw	r1, #2062	@ 0x80e
 800377a:	4618      	mov	r0, r3
 800377c:	f7fd f8dc 	bl	8000938 <HW_EscRead>

        HW_EscReadByte(sm1Status, (ESC_SYNCMAN_STATUS_OFFSET + SIZEOF_SM_REGISTER));
 8003780:	1cbb      	adds	r3, r7, #2
 8003782:	2201      	movs	r2, #1
 8003784:	f640 010d 	movw	r1, #2061	@ 0x80d
 8003788:	4618      	mov	r0, r3
 800378a:	f7fd f8d5 	bl	8000938 <HW_EscRead>
/*ECATCHANGE_END(V5.13) MBX1*/
    }

    /* Read AL Event-Register from ESC */
    ALEventReg = HW_GetALEventRegister();
 800378e:	f7fd f8bf 	bl	8000910 <HW_GetALEventRegister>
 8003792:	4603      	mov	r3, r0
 8003794:	80fb      	strh	r3, [r7, #6]
    ALEventReg = SWAPWORD(ALEventReg);


    if ((ALEventReg & AL_CONTROL_EVENT) && !bEcatWaitForAlControlRes)
 8003796:	88fb      	ldrh	r3, [r7, #6]
 8003798:	f003 0301 	and.w	r3, r3, #1
 800379c:	2b00      	cmp	r3, #0
 800379e:	d02c      	beq.n	80037fa <ECAT_Main+0xa6>
 80037a0:	4b5a      	ldr	r3, [pc, #360]	@ (800390c <ECAT_Main+0x1b8>)
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d128      	bne.n	80037fa <ECAT_Main+0xa6>
    {
        /* AL Control event is set, get the AL Control register sent by the Master to acknowledge the event
          (that the corresponding bit in the AL Event register will be reset) */

        HW_EscReadByte( EscAlControl, ESC_AL_CONTROL_OFFSET);
 80037a8:	1d3b      	adds	r3, r7, #4
 80037aa:	2201      	movs	r2, #1
 80037ac:	f44f 7190 	mov.w	r1, #288	@ 0x120
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7fd f8c1 	bl	8000938 <HW_EscRead>
        EscAlControl = SWAPWORD(EscAlControl);
 80037b6:	88bb      	ldrh	r3, [r7, #4]
 80037b8:	80bb      	strh	r3, [r7, #4]


            /*ECATCHANGE_START(V5.13) ECAT2*/
                /*Evaluate if register 0x120 Bit5 (Request Explicit DeviceID) is set*/
            if ((EscAlControl & (UINT16)STATE_DEVID) == STATE_DEVID)
 80037ba:	88bb      	ldrh	r3, [r7, #4]
 80037bc:	f003 0320 	and.w	r3, r3, #32
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00d      	beq.n	80037e0 <ECAT_Main+0x8c>
            {
                if (bExplicitDevIdRequested == FALSE)
 80037c4:	4b52      	ldr	r3, [pc, #328]	@ (8003910 <ECAT_Main+0x1bc>)
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d105      	bne.n	80037d8 <ECAT_Main+0x84>
                {
                    u16IdValue = APPL_GetDeviceID();
 80037cc:	f7fc fee8 	bl	80005a0 <APPL_GetDeviceID>
 80037d0:	4603      	mov	r3, r0
 80037d2:	461a      	mov	r2, r3
 80037d4:	4b4f      	ldr	r3, [pc, #316]	@ (8003914 <ECAT_Main+0x1c0>)
 80037d6:	801a      	strh	r2, [r3, #0]
                }

                bExplicitDevIdRequested = TRUE;
 80037d8:	4b4d      	ldr	r3, [pc, #308]	@ (8003910 <ECAT_Main+0x1bc>)
 80037da:	2201      	movs	r2, #1
 80037dc:	701a      	strb	r2, [r3, #0]
 80037de:	e002      	b.n	80037e6 <ECAT_Main+0x92>
            }
            else
            {
                bExplicitDevIdRequested = FALSE;
 80037e0:	4b4b      	ldr	r3, [pc, #300]	@ (8003910 <ECAT_Main+0x1bc>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	701a      	strb	r2, [r3, #0]
            }
            /*ECATCHANGE_END(V5.13) ECAT2*/

        /* reset AL Control event and the SM Change event (because the Sync Manager settings will be checked
           in AL_ControlInd, too)*/
            ALEventReg &= ~((AL_CONTROL_EVENT) | (SM_CHANGE_EVENT));
 80037e6:	88fb      	ldrh	r3, [r7, #6]
 80037e8:	f023 0311 	bic.w	r3, r3, #17
 80037ec:	80fb      	strh	r3, [r7, #6]

            AL_ControlInd((UINT8)EscAlControl, 0); /* in AL_ControlInd the state transition will be checked and done */
 80037ee:	88bb      	ldrh	r3, [r7, #4]
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2100      	movs	r1, #0
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7ff f8d7 	bl	80029a8 <AL_ControlInd>

            /* SM-Change-Event was handled too */

    }

    if ( (ALEventReg & SM_CHANGE_EVENT) && !bEcatWaitForAlControlRes && (nAlStatus & STATE_CHANGE) == 0 && (nAlStatus & ~STATE_CHANGE) != STATE_INIT )
 80037fa:	88fb      	ldrh	r3, [r7, #6]
 80037fc:	f003 0310 	and.w	r3, r3, #16
 8003800:	2b00      	cmp	r3, #0
 8003802:	d01c      	beq.n	800383e <ECAT_Main+0xea>
 8003804:	4b41      	ldr	r3, [pc, #260]	@ (800390c <ECAT_Main+0x1b8>)
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d118      	bne.n	800383e <ECAT_Main+0xea>
 800380c:	4b42      	ldr	r3, [pc, #264]	@ (8003918 <ECAT_Main+0x1c4>)
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	f003 0310 	and.w	r3, r3, #16
 8003814:	2b00      	cmp	r3, #0
 8003816:	d112      	bne.n	800383e <ECAT_Main+0xea>
 8003818:	4b3f      	ldr	r3, [pc, #252]	@ (8003918 <ECAT_Main+0x1c4>)
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	f023 0310 	bic.w	r3, r3, #16
 8003820:	2b01      	cmp	r3, #1
 8003822:	d00c      	beq.n	800383e <ECAT_Main+0xea>
    {
        /* the SM Change event is set (Bit 4 of Register 0x220), when the Byte 6 (Enable, Lo-Byte of Register 0x806, 0x80E, 0x816,...)
           of a Sync Manager channel was written */
        ALEventReg &= ~(SM_CHANGE_EVENT);
 8003824:	88fb      	ldrh	r3, [r7, #6]
 8003826:	f023 0310 	bic.w	r3, r3, #16
 800382a:	80fb      	strh	r3, [r7, #6]

        /* AL_ControlInd is called with the actual state, so that the correct SM settings will be checked */
        AL_ControlInd(nAlStatus & STATE_MASK, 0);
 800382c:	4b3a      	ldr	r3, [pc, #232]	@ (8003918 <ECAT_Main+0x1c4>)
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	f003 030f 	and.w	r3, r3, #15
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2100      	movs	r1, #0
 8003838:	4618      	mov	r0, r3
 800383a:	f7ff f8b5 	bl	80029a8 <AL_ControlInd>
    }

    if(bEcatWaitForAlControlRes)
 800383e:	4b33      	ldr	r3, [pc, #204]	@ (800390c <ECAT_Main+0x1b8>)
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d001      	beq.n	800384a <ECAT_Main+0xf6>
    {
        AL_ControlRes();
 8003846:	f7ff fc81 	bl	800314c <AL_ControlRes>
        The SM1 activate Byte (Register 0x80E) was read before reading AL Event register.
        1. Handle Mailbox Read event
        2. Handle repeat toggle request
        3. Handle Mailbox write event
    */
    if ( bMbxRunning )
 800384a:	4b2f      	ldr	r3, [pc, #188]	@ (8003908 <ECAT_Main+0x1b4>)
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d055      	beq.n	80038fe <ECAT_Main+0x1aa>
    {
        /*SnycManger change event (0x220:4) could be acknowledged by reading the SM1 control register without notification to the local application
        => check if the SyncManger 1 is still enabled*/
            if (!(sm1Activate & SM_SETTING_ENABLE_VALUE))
 8003852:	78fb      	ldrb	r3, [r7, #3]
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	2b00      	cmp	r3, #0
 800385a:	d108      	bne.n	800386e <ECAT_Main+0x11a>
            {
                AL_ControlInd(nAlStatus & STATE_MASK, 0);
 800385c:	4b2e      	ldr	r3, [pc, #184]	@ (8003918 <ECAT_Main+0x1c4>)
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	f003 030f 	and.w	r3, r3, #15
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2100      	movs	r1, #0
 8003868:	4618      	mov	r0, r3
 800386a:	f7ff f89d 	bl	80029a8 <AL_ControlInd>
            }

/*ECATCHANGE_START(V5.13) MBX1*/
        if (((sm1Status & SM_STATUS_MBX_BUFFER_FULL) == 0)
 800386e:	78bb      	ldrb	r3, [r7, #2]
 8003870:	f003 0308 	and.w	r3, r3, #8
 8003874:	2b00      	cmp	r3, #0
 8003876:	d113      	bne.n	80038a0 <ECAT_Main+0x14c>
            && bSendMbxIsFull) 
 8003878:	4b28      	ldr	r3, [pc, #160]	@ (800391c <ECAT_Main+0x1c8>)
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d00f      	beq.n	80038a0 <ECAT_Main+0x14c>
/*ECATCHANGE_END(V5.13) MBX1*/
        {
            /* SM 1 (Mailbox Read) event is set, when the mailbox was read from the master,
               to acknowledge the event the first byte of the mailbox has to be written,
               by writing the first byte the mailbox is locked, too */
            u8dummy = 0;
 8003880:	4b27      	ldr	r3, [pc, #156]	@ (8003920 <ECAT_Main+0x1cc>)
 8003882:	2200      	movs	r2, #0
 8003884:	701a      	strb	r2, [r3, #0]
            HW_EscWriteByte(u8dummy,u16EscAddrSendMbx);
 8003886:	4b27      	ldr	r3, [pc, #156]	@ (8003924 <ECAT_Main+0x1d0>)
 8003888:	881b      	ldrh	r3, [r3, #0]
 800388a:	2201      	movs	r2, #1
 800388c:	4619      	mov	r1, r3
 800388e:	4824      	ldr	r0, [pc, #144]	@ (8003920 <ECAT_Main+0x1cc>)
 8003890:	f7fd f882 	bl	8000998 <HW_EscWrite>

            /* the Mailbox Read event in the variable ALEventReg shall be reset before calling
               MBX_MailboxReadInd, where a new mailbox datagram (if available) could be stored in the send mailbox */
            ALEventReg &= ~(MAILBOX_READ_EVENT);
 8003894:	88fb      	ldrh	r3, [r7, #6]
 8003896:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800389a:	80fb      	strh	r3, [r7, #6]
            MBX_MailboxReadInd();
 800389c:	f000 fab8 	bl	8003e10 <MBX_MailboxReadInd>
        }

            /* bMbxRepeatToggle holds the last state of the Repeat Bit (Bit 1) */

            if (((sm1Activate & SM_SETTING_REPAET_REQ_MASK) && !bMbxRepeatToggle)
 80038a0:	78fb      	ldrb	r3, [r7, #3]
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d003      	beq.n	80038b2 <ECAT_Main+0x15e>
 80038aa:	4b1f      	ldr	r3, [pc, #124]	@ (8003928 <ECAT_Main+0x1d4>)
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d008      	beq.n	80038c4 <ECAT_Main+0x170>
                || (!(sm1Activate & SM_SETTING_REPAET_REQ_MASK) && bMbxRepeatToggle))
 80038b2:	78fb      	ldrb	r3, [r7, #3]
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d111      	bne.n	80038e0 <ECAT_Main+0x18c>
 80038bc:	4b1a      	ldr	r3, [pc, #104]	@ (8003928 <ECAT_Main+0x1d4>)
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d00d      	beq.n	80038e0 <ECAT_Main+0x18c>
            {
                /* Repeat Bit (Bit 1) has toggled, there is a repeat request, in MBX_MailboxRepeatReq the correct
                   response will put in the send mailbox again */
                MBX_MailboxRepeatReq();
 80038c4:	f000 fb12 	bl	8003eec <MBX_MailboxRepeatReq>
                /* acknowledge the repeat request after the send mailbox was updated by writing the Repeat Bit
                   in the Repeat Ack Bit (Bit 1) of the PDI Ctrl-Byte of SM 1 (Register 0x80F) */
                sm1Activate &= SM_SETTING_REPEAT_ACK;
 80038c8:	78fb      	ldrb	r3, [r7, #3]
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	70fb      	strb	r3, [r7, #3]
                HW_EscWriteByte(sm1Activate, (ESC_SM_PDICONTROL_OFFSET + SIZEOF_SM_REGISTER));
 80038d2:	1cfb      	adds	r3, r7, #3
 80038d4:	2201      	movs	r2, #1
 80038d6:	f640 010f 	movw	r1, #2063	@ 0x80f
 80038da:	4618      	mov	r0, r3
 80038dc:	f7fd f85c 	bl	8000998 <HW_EscWrite>
            }


        /* Reload the AlEvent because it may be changed due to a SM disable, enable in case of an repeat request */
        ALEventReg = HW_GetALEventRegister();
 80038e0:	f7fd f816 	bl	8000910 <HW_GetALEventRegister>
 80038e4:	4603      	mov	r3, r0
 80038e6:	80fb      	strh	r3, [r7, #6]
        ALEventReg = SWAPWORD(ALEventReg);

        if ( ALEventReg & (MAILBOX_WRITE_EVENT) )
 80038e8:	88fb      	ldrh	r3, [r7, #6]
 80038ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d005      	beq.n	80038fe <ECAT_Main+0x1aa>
            /* SM 0 (Mailbox Write) event is set, when the mailbox was written from the master,
               to acknowledge the event the first byte of the mailbox has to be read,
               which will be done in MBX_CheckAndCopyMailbox */
            /* the Mailbox Write event in the variable ALEventReg shall be reset before calling
               MBX_CheckAndCopyMailbox, where the received mailbox datagram will be processed */
            ALEventReg &= ~(MAILBOX_WRITE_EVENT);
 80038f2:	88fb      	ldrh	r3, [r7, #6]
 80038f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038f8:	80fb      	strh	r3, [r7, #6]
            MBX_CheckAndCopyMailbox();
 80038fa:	f000 fba1 	bl	8004040 <MBX_CheckAndCopyMailbox>

        }
    }
}
 80038fe:	bf00      	nop
 8003900:	3708      	adds	r7, #8
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	24000517 	.word	0x24000517
 800390c:	240004f0 	.word	0x240004f0
 8003910:	240004fd 	.word	0x240004fd
 8003914:	24000506 	.word	0x24000506
 8003918:	240004fc 	.word	0x240004fc
 800391c:	24000516 	.word	0x24000516
 8003920:	24000508 	.word	0x24000508
 8003924:	24000520 	.word	0x24000520
 8003928:	24000518 	.word	0x24000518

0800392c <PutInMbxQueue>:
//
//    PutInMbxQueue
//

UINT8 PutInMbxQueue(TMBX MBXMEM * pMbx, TMBXQUEUE MBXMEM * pQueue)
{
 800392c:	b480      	push	{r7}
 800392e:	b085      	sub	sp, #20
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
    UINT16 lastInQueue;
    ENTER_MBX_CRITICAL;


    lastInQueue = pQueue->lastInQueue+1;
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	885b      	ldrh	r3, [r3, #2]
 800393a:	3301      	adds	r3, #1
 800393c:	81fb      	strh	r3, [r7, #14]
    if (lastInQueue == pQueue->maxQueueSize)
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	889b      	ldrh	r3, [r3, #4]
 8003942:	89fa      	ldrh	r2, [r7, #14]
 8003944:	429a      	cmp	r2, r3
 8003946:	d101      	bne.n	800394c <PutInMbxQueue+0x20>
    {
        // Umbruch der Queue
        lastInQueue = 0;
 8003948:	2300      	movs	r3, #0
 800394a:	81fb      	strh	r3, [r7, #14]
    }

    if (pQueue->firstInQueue == lastInQueue)
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	881b      	ldrh	r3, [r3, #0]
 8003950:	89fa      	ldrh	r2, [r7, #14]
 8003952:	429a      	cmp	r2, r3
 8003954:	d101      	bne.n	800395a <PutInMbxQueue+0x2e>
    {
        // Ueberlauf der Queue -> letztes Element wieder herausnehmen
        LEAVE_MBX_CRITICAL;
        return MBXERR_NOMOREMEMORY;
 8003956:	2307      	movs	r3, #7
 8003958:	e00b      	b.n	8003972 <PutInMbxQueue+0x46>
    }

    pQueue->queue[pQueue->lastInQueue] = pMbx;
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	885b      	ldrh	r3, [r3, #2]
 800395e:	461a      	mov	r2, r3
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	3202      	adds	r2, #2
 8003964:	6879      	ldr	r1, [r7, #4]
 8003966:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pQueue->lastInQueue = lastInQueue;
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	89fa      	ldrh	r2, [r7, #14]
 800396e:	805a      	strh	r2, [r3, #2]

    LEAVE_MBX_CRITICAL;

    return 0;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3714      	adds	r7, #20
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr

0800397e <GetOutOfMbxQueue>:
//
//    GetOutOfMbxQueue
//

TMBX MBXMEM * GetOutOfMbxQueue(TMBXQUEUE MBXMEM * pQueue)
{
 800397e:	b480      	push	{r7}
 8003980:	b085      	sub	sp, #20
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
    TMBX MBXMEM * pMbx;
    ENTER_MBX_CRITICAL;

    if (pQueue->firstInQueue != pQueue->lastInQueue)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	881a      	ldrh	r2, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	885b      	ldrh	r3, [r3, #2]
 800398e:	429a      	cmp	r2, r3
 8003990:	d018      	beq.n	80039c4 <GetOutOfMbxQueue+0x46>
    {
        // Queue ist nicht leer
        UINT16 firstInQueue = pQueue->firstInQueue;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	881b      	ldrh	r3, [r3, #0]
 8003996:	817b      	strh	r3, [r7, #10]
        pMbx = pQueue->queue[firstInQueue];
 8003998:	897a      	ldrh	r2, [r7, #10]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	3202      	adds	r2, #2
 800399e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039a2:	60fb      	str	r3, [r7, #12]
        firstInQueue++;
 80039a4:	897b      	ldrh	r3, [r7, #10]
 80039a6:	3301      	adds	r3, #1
 80039a8:	817b      	strh	r3, [r7, #10]
        pQueue->firstInQueue = firstInQueue;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	897a      	ldrh	r2, [r7, #10]
 80039ae:	801a      	strh	r2, [r3, #0]
        
        if (pQueue->firstInQueue == pQueue->maxQueueSize)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	881a      	ldrh	r2, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	889b      	ldrh	r3, [r3, #4]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d105      	bne.n	80039c8 <GetOutOfMbxQueue+0x4a>
        {
            // Umbruch der Queue
            pQueue->firstInQueue = 0;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	801a      	strh	r2, [r3, #0]
 80039c2:	e001      	b.n	80039c8 <GetOutOfMbxQueue+0x4a>
        }
    }
    else
    {
        pMbx = 0;
 80039c4:	2300      	movs	r3, #0
 80039c6:	60fb      	str	r3, [r7, #12]
    }


    LEAVE_MBX_CRITICAL;

    return pMbx;
 80039c8:	68fb      	ldr	r3, [r7, #12]
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3714      	adds	r7, #20
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
	...

080039d8 <MBX_Init>:
/**
 \brief    This function intialize the Mailbox Interface.
*////////////////////////////////////////////////////////////////////////////////////////

void MBX_Init(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
    
    u16ReceiveMbxSize = MIN_MBX_SIZE;
 80039de:	4b2d      	ldr	r3, [pc, #180]	@ (8003a94 <MBX_Init+0xbc>)
 80039e0:	2224      	movs	r2, #36	@ 0x24
 80039e2:	801a      	strh	r2, [r3, #0]
    u16SendMbxSize = MAX_MBX_SIZE;
 80039e4:	4b2c      	ldr	r3, [pc, #176]	@ (8003a98 <MBX_Init+0xc0>)
 80039e6:	2280      	movs	r2, #128	@ 0x80
 80039e8:	801a      	strh	r2, [r3, #0]
    u16EscAddrReceiveMbx = MIN_MBX_WRITE_ADDRESS;
 80039ea:	4b2c      	ldr	r3, [pc, #176]	@ (8003a9c <MBX_Init+0xc4>)
 80039ec:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80039f0:	801a      	strh	r2, [r3, #0]
    u16EscAddrSendMbx = MIN_MBX_READ_ADDRESS;
 80039f2:	4b2b      	ldr	r3, [pc, #172]	@ (8003aa0 <MBX_Init+0xc8>)
 80039f4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80039f8:	801a      	strh	r2, [r3, #0]

    sMbxReceiveQueue.firstInQueue    = 0;
 80039fa:	4b2a      	ldr	r3, [pc, #168]	@ (8003aa4 <MBX_Init+0xcc>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	801a      	strh	r2, [r3, #0]
    sMbxReceiveQueue.lastInQueue     = 0;
 8003a00:	4b28      	ldr	r3, [pc, #160]	@ (8003aa4 <MBX_Init+0xcc>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	805a      	strh	r2, [r3, #2]
    sMbxReceiveQueue.maxQueueSize = MAX_MBX_QUEUE_SIZE;
 8003a06:	4b27      	ldr	r3, [pc, #156]	@ (8003aa4 <MBX_Init+0xcc>)
 8003a08:	220a      	movs	r2, #10
 8003a0a:	809a      	strh	r2, [r3, #4]
    sMbxSendQueue.firstInQueue        = 0;
 8003a0c:	4b26      	ldr	r3, [pc, #152]	@ (8003aa8 <MBX_Init+0xd0>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	801a      	strh	r2, [r3, #0]
    sMbxSendQueue.lastInQueue         = 0;
 8003a12:	4b25      	ldr	r3, [pc, #148]	@ (8003aa8 <MBX_Init+0xd0>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	805a      	strh	r2, [r3, #2]
    sMbxSendQueue.maxQueueSize     = MAX_MBX_QUEUE_SIZE;
 8003a18:	4b23      	ldr	r3, [pc, #140]	@ (8003aa8 <MBX_Init+0xd0>)
 8003a1a:	220a      	movs	r2, #10
 8003a1c:	809a      	strh	r2, [r3, #4]
    psWriteMbx  = NULL;
 8003a1e:	4b23      	ldr	r3, [pc, #140]	@ (8003aac <MBX_Init+0xd4>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	601a      	str	r2, [r3, #0]


    psRepeatMbx = NULL;
 8003a24:	4b22      	ldr	r3, [pc, #136]	@ (8003ab0 <MBX_Init+0xd8>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	601a      	str	r2, [r3, #0]
    psReadMbx    = NULL;
 8003a2a:	4b22      	ldr	r3, [pc, #136]	@ (8003ab4 <MBX_Init+0xdc>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	601a      	str	r2, [r3, #0]
    psStoreMbx    = NULL;
 8003a30:	4b21      	ldr	r3, [pc, #132]	@ (8003ab8 <MBX_Init+0xe0>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	601a      	str	r2, [r3, #0]

    bMbxRepeatToggle    = FALSE;
 8003a36:	4b21      	ldr	r3, [pc, #132]	@ (8003abc <MBX_Init+0xe4>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	701a      	strb	r2, [r3, #0]
    /*Reset Repeat acknowledge bit of SyncManager1 (0x80F bit 2)*/
    {
        UINT8 sm1Activate = 0;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	71fb      	strb	r3, [r7, #7]
        HW_EscReadByte(sm1Activate,(ESC_SM_PDICONTROL_OFFSET + SIZEOF_SM_REGISTER));
 8003a40:	1dfb      	adds	r3, r7, #7
 8003a42:	2201      	movs	r2, #1
 8003a44:	f640 010f 	movw	r1, #2063	@ 0x80f
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7fc ff75 	bl	8000938 <HW_EscRead>
        sm1Activate &= ~0x02;
 8003a4e:	79fb      	ldrb	r3, [r7, #7]
 8003a50:	f023 0302 	bic.w	r3, r3, #2
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	71fb      	strb	r3, [r7, #7]
        HW_EscWriteByte(sm1Activate,(ESC_SM_PDICONTROL_OFFSET + SIZEOF_SM_REGISTER));
 8003a58:	1dfb      	adds	r3, r7, #7
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f640 010f 	movw	r1, #2063	@ 0x80f
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7fc ff99 	bl	8000998 <HW_EscWrite>
    }
    bMbxRunning = FALSE;
 8003a66:	4b16      	ldr	r3, [pc, #88]	@ (8003ac0 <MBX_Init+0xe8>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	701a      	strb	r2, [r3, #0]
    bSendMbxIsFull = FALSE;
 8003a6c:	4b15      	ldr	r3, [pc, #84]	@ (8003ac4 <MBX_Init+0xec>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	701a      	strb	r2, [r3, #0]
    bReceiveMbxIsLocked = FALSE;
 8003a72:	4b15      	ldr	r3, [pc, #84]	@ (8003ac8 <MBX_Init+0xf0>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	701a      	strb	r2, [r3, #0]
    u8MailboxSendReqStored    = 0;
 8003a78:	4b14      	ldr	r3, [pc, #80]	@ (8003acc <MBX_Init+0xf4>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	701a      	strb	r2, [r3, #0]
    u8MbxWriteCounter = 0;
 8003a7e:	4b14      	ldr	r3, [pc, #80]	@ (8003ad0 <MBX_Init+0xf8>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	701a      	strb	r2, [r3, #0]
    u8MbxReadCounter    = 0;
 8003a84:	4b13      	ldr	r3, [pc, #76]	@ (8003ad4 <MBX_Init+0xfc>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	701a      	strb	r2, [r3, #0]
}
 8003a8a:	bf00      	nop
 8003a8c:	3708      	adds	r7, #8
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	2400051c 	.word	0x2400051c
 8003a98:	2400051a 	.word	0x2400051a
 8003a9c:	2400051e 	.word	0x2400051e
 8003aa0:	24000520 	.word	0x24000520
 8003aa4:	2400056c 	.word	0x2400056c
 8003aa8:	24000538 	.word	0x24000538
 8003aac:	24000528 	.word	0x24000528
 8003ab0:	24000530 	.word	0x24000530
 8003ab4:	2400052c 	.word	0x2400052c
 8003ab8:	24000534 	.word	0x24000534
 8003abc:	24000518 	.word	0x24000518
 8003ac0:	24000517 	.word	0x24000517
 8003ac4:	24000516 	.word	0x24000516
 8003ac8:	24000515 	.word	0x24000515
 8003acc:	24000524 	.word	0x24000524
 8003ad0:	24000522 	.word	0x24000522
 8003ad4:	24000523 	.word	0x24000523

08003ad8 <MBX_StartMailboxHandler>:
 \brief     it is checked if the mailbox areas overlaps each other
 \brief     and the Sync Manager channels 0 and 1 are enabled.
 \brief     This function shall only be called if mailbox is supported.
*////////////////////////////////////////////////////////////////////////////////////////
UINT16 MBX_StartMailboxHandler(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
    UINT16 result = 0;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	80fb      	strh	r3, [r7, #6]
    
    /* get address of the receive mailbox sync manager (SM0) */
    TSYNCMAN ESCMEM * pSyncMan = (TSYNCMAN ESCMEM *)GetSyncMan(MAILBOX_WRITE);
 8003ae2:	2000      	movs	r0, #0
 8003ae4:	f7fd ffda 	bl	8001a9c <GetSyncMan>
 8003ae8:	6038      	str	r0, [r7, #0]

    /* store size of the receive mailbox */
    u16ReceiveMbxSize     = pSyncMan->Length;
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	885a      	ldrh	r2, [r3, #2]
 8003aee:	4b32      	ldr	r3, [pc, #200]	@ (8003bb8 <MBX_StartMailboxHandler+0xe0>)
 8003af0:	801a      	strh	r2, [r3, #0]
    /* store the address of the receive mailbox */
    u16EscAddrReceiveMbx = pSyncMan->PhysicalStartAddress;
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	881a      	ldrh	r2, [r3, #0]
 8003af6:	4b31      	ldr	r3, [pc, #196]	@ (8003bbc <MBX_StartMailboxHandler+0xe4>)
 8003af8:	801a      	strh	r2, [r3, #0]

    /* get address of the send mailbox sync manager (SM1) */
    pSyncMan =(TSYNCMAN ESCMEM *) GetSyncMan(MAILBOX_READ);
 8003afa:	2001      	movs	r0, #1
 8003afc:	f7fd ffce 	bl	8001a9c <GetSyncMan>
 8003b00:	6038      	str	r0, [r7, #0]

    /* store the size of the send mailbox */
    u16SendMbxSize = pSyncMan->Length;
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	885a      	ldrh	r2, [r3, #2]
 8003b06:	4b2e      	ldr	r3, [pc, #184]	@ (8003bc0 <MBX_StartMailboxHandler+0xe8>)
 8003b08:	801a      	strh	r2, [r3, #0]
    /* store the address of the send mailbox */
    u16EscAddrSendMbx = pSyncMan->PhysicalStartAddress;
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	881a      	ldrh	r2, [r3, #0]
 8003b0e:	4b2d      	ldr	r3, [pc, #180]	@ (8003bc4 <MBX_StartMailboxHandler+0xec>)
 8003b10:	801a      	strh	r2, [r3, #0]

    // HBu 02.05.06: it should be checked if there are overlaps in the sync manager areas
    if ((u16EscAddrReceiveMbx + u16ReceiveMbxSize) > u16EscAddrSendMbx && (u16EscAddrReceiveMbx < (u16EscAddrSendMbx + u16SendMbxSize)))
 8003b12:	4b2a      	ldr	r3, [pc, #168]	@ (8003bbc <MBX_StartMailboxHandler+0xe4>)
 8003b14:	881b      	ldrh	r3, [r3, #0]
 8003b16:	461a      	mov	r2, r3
 8003b18:	4b27      	ldr	r3, [pc, #156]	@ (8003bb8 <MBX_StartMailboxHandler+0xe0>)
 8003b1a:	881b      	ldrh	r3, [r3, #0]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	4a29      	ldr	r2, [pc, #164]	@ (8003bc4 <MBX_StartMailboxHandler+0xec>)
 8003b20:	8812      	ldrh	r2, [r2, #0]
 8003b22:	4293      	cmp	r3, r2
 8003b24:	dd0c      	ble.n	8003b40 <MBX_StartMailboxHandler+0x68>
 8003b26:	4b25      	ldr	r3, [pc, #148]	@ (8003bbc <MBX_StartMailboxHandler+0xe4>)
 8003b28:	881b      	ldrh	r3, [r3, #0]
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	4b25      	ldr	r3, [pc, #148]	@ (8003bc4 <MBX_StartMailboxHandler+0xec>)
 8003b2e:	881b      	ldrh	r3, [r3, #0]
 8003b30:	4619      	mov	r1, r3
 8003b32:	4b23      	ldr	r3, [pc, #140]	@ (8003bc0 <MBX_StartMailboxHandler+0xe8>)
 8003b34:	881b      	ldrh	r3, [r3, #0]
 8003b36:	440b      	add	r3, r1
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	da01      	bge.n	8003b40 <MBX_StartMailboxHandler+0x68>
    {
        return ALSTATUSCODE_INVALIDMBXCFGINPREOP;
 8003b3c:	2316      	movs	r3, #22
 8003b3e:	e037      	b.n	8003bb0 <MBX_StartMailboxHandler+0xd8>
    }


    /* enable the receive mailbox sync manager channel */
    EnableSyncManChannel(MAILBOX_WRITE);
 8003b40:	2000      	movs	r0, #0
 8003b42:	f7fd ffea 	bl	8001b1a <EnableSyncManChannel>
    /* enable the send mailbox sync manager channel */
    EnableSyncManChannel(MAILBOX_READ);
 8003b46:	2001      	movs	r0, #1
 8003b48:	f7fd ffe7 	bl	8001b1a <EnableSyncManChannel>

        psWriteMbx = (TMBX MBXMEM *) APPL_AllocMailboxBuffer(u16ReceiveMbxSize);
 8003b4c:	4b1a      	ldr	r3, [pc, #104]	@ (8003bb8 <MBX_StartMailboxHandler+0xe0>)
 8003b4e:	881b      	ldrh	r3, [r3, #0]
 8003b50:	4618      	mov	r0, r3
 8003b52:	f007 fc9f 	bl	800b494 <malloc>
 8003b56:	4603      	mov	r3, r0
 8003b58:	461a      	mov	r2, r3
 8003b5a:	4b1b      	ldr	r3, [pc, #108]	@ (8003bc8 <MBX_StartMailboxHandler+0xf0>)
 8003b5c:	601a      	str	r2, [r3, #0]
        if(psWriteMbx == NULL)
 8003b5e:	4b1a      	ldr	r3, [pc, #104]	@ (8003bc8 <MBX_StartMailboxHandler+0xf0>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d118      	bne.n	8003b98 <MBX_StartMailboxHandler+0xc0>
        {
            bNoMbxMemoryAvailable = TRUE;
 8003b66:	4b19      	ldr	r3, [pc, #100]	@ (8003bcc <MBX_StartMailboxHandler+0xf4>)
 8003b68:	2201      	movs	r2, #1
 8003b6a:	701a      	strb	r2, [r3, #0]

            //check if at least enough memory for an mailbox error is available (other wise stop the state transition)
            psWriteMbx = (TMBX MBXMEM *) APPL_AllocMailboxBuffer(10); /* a mailbox error datagram length*/
 8003b6c:	200a      	movs	r0, #10
 8003b6e:	f007 fc91 	bl	800b494 <malloc>
 8003b72:	4603      	mov	r3, r0
 8003b74:	461a      	mov	r2, r3
 8003b76:	4b14      	ldr	r3, [pc, #80]	@ (8003bc8 <MBX_StartMailboxHandler+0xf0>)
 8003b78:	601a      	str	r2, [r3, #0]
            if(psWriteMbx == NULL)
 8003b7a:	4b13      	ldr	r3, [pc, #76]	@ (8003bc8 <MBX_StartMailboxHandler+0xf0>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <MBX_StartMailboxHandler+0xae>
            {
                result = ALSTATUSCODE_NOMEMORY;
 8003b82:	2302      	movs	r3, #2
 8003b84:	80fb      	strh	r3, [r7, #6]
            }

            APPL_FreeMailboxBuffer(psWriteMbx);
 8003b86:	4b10      	ldr	r3, [pc, #64]	@ (8003bc8 <MBX_StartMailboxHandler+0xf0>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f007 fc8a 	bl	800b4a4 <free>
            psWriteMbx = NULL;
 8003b90:	4b0d      	ldr	r3, [pc, #52]	@ (8003bc8 <MBX_StartMailboxHandler+0xf0>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	601a      	str	r2, [r3, #0]
 8003b96:	e00a      	b.n	8003bae <MBX_StartMailboxHandler+0xd6>
        }
        else
        {
            bNoMbxMemoryAvailable = FALSE;
 8003b98:	4b0c      	ldr	r3, [pc, #48]	@ (8003bcc <MBX_StartMailboxHandler+0xf4>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	701a      	strb	r2, [r3, #0]
            APPL_FreeMailboxBuffer(psWriteMbx);
 8003b9e:	4b0a      	ldr	r3, [pc, #40]	@ (8003bc8 <MBX_StartMailboxHandler+0xf0>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f007 fc7e 	bl	800b4a4 <free>
            psWriteMbx = NULL;
 8003ba8:	4b07      	ldr	r3, [pc, #28]	@ (8003bc8 <MBX_StartMailboxHandler+0xf0>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	601a      	str	r2, [r3, #0]
        }

    return result;
 8003bae:	88fb      	ldrh	r3, [r7, #6]
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3708      	adds	r7, #8
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	2400051c 	.word	0x2400051c
 8003bbc:	2400051e 	.word	0x2400051e
 8003bc0:	2400051a 	.word	0x2400051a
 8003bc4:	24000520 	.word	0x24000520
 8003bc8:	24000528 	.word	0x24000528
 8003bcc:	240005a0 	.word	0x240005a0

08003bd0 <MBX_StopMailboxHandler>:
 \brief  local management service Stop Mailbox Handler
 \brief  the Sync Manager channels 0 and 1 are disabled
*////////////////////////////////////////////////////////////////////////////////////////

void MBX_StopMailboxHandler(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
    TMBX MBXMEM * pMbx;

    /* mailbox handler is stopped */
    bMbxRunning = FALSE;
 8003bd6:	4b45      	ldr	r3, [pc, #276]	@ (8003cec <MBX_StopMailboxHandler+0x11c>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	701a      	strb	r2, [r3, #0]
    /* disable the receive mailbox sync manager channel */
    DisableSyncManChannel(MAILBOX_WRITE);
 8003bdc:	2000      	movs	r0, #0
 8003bde:	f7fd ff75 	bl	8001acc <DisableSyncManChannel>
    /* disable the send mailbox sync manager channel */
    DisableSyncManChannel(MAILBOX_READ);
 8003be2:	2001      	movs	r0, #1
 8003be4:	f7fd ff72 	bl	8001acc <DisableSyncManChannel>
    /* initialize variables again */


    if (psRepeatMbx != NULL)
 8003be8:	4b41      	ldr	r3, [pc, #260]	@ (8003cf0 <MBX_StopMailboxHandler+0x120>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d004      	beq.n	8003bfa <MBX_StopMailboxHandler+0x2a>
    {
        APPL_FreeMailboxBuffer(psRepeatMbx);
 8003bf0:	4b3f      	ldr	r3, [pc, #252]	@ (8003cf0 <MBX_StopMailboxHandler+0x120>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f007 fc55 	bl	800b4a4 <free>
    }

    if (psStoreMbx != NULL && psStoreMbx != psRepeatMbx)
 8003bfa:	4b3e      	ldr	r3, [pc, #248]	@ (8003cf4 <MBX_StopMailboxHandler+0x124>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00a      	beq.n	8003c18 <MBX_StopMailboxHandler+0x48>
 8003c02:	4b3c      	ldr	r3, [pc, #240]	@ (8003cf4 <MBX_StopMailboxHandler+0x124>)
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	4b3a      	ldr	r3, [pc, #232]	@ (8003cf0 <MBX_StopMailboxHandler+0x120>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d004      	beq.n	8003c18 <MBX_StopMailboxHandler+0x48>
    {
        APPL_FreeMailboxBuffer(psStoreMbx);
 8003c0e:	4b39      	ldr	r3, [pc, #228]	@ (8003cf4 <MBX_StopMailboxHandler+0x124>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f007 fc46 	bl	800b4a4 <free>
    }

    if (psReadMbx != NULL && psReadMbx != psRepeatMbx && psReadMbx != psStoreMbx)
 8003c18:	4b37      	ldr	r3, [pc, #220]	@ (8003cf8 <MBX_StopMailboxHandler+0x128>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d010      	beq.n	8003c42 <MBX_StopMailboxHandler+0x72>
 8003c20:	4b35      	ldr	r3, [pc, #212]	@ (8003cf8 <MBX_StopMailboxHandler+0x128>)
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	4b32      	ldr	r3, [pc, #200]	@ (8003cf0 <MBX_StopMailboxHandler+0x120>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d00a      	beq.n	8003c42 <MBX_StopMailboxHandler+0x72>
 8003c2c:	4b32      	ldr	r3, [pc, #200]	@ (8003cf8 <MBX_StopMailboxHandler+0x128>)
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	4b30      	ldr	r3, [pc, #192]	@ (8003cf4 <MBX_StopMailboxHandler+0x124>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d004      	beq.n	8003c42 <MBX_StopMailboxHandler+0x72>
    {
        APPL_FreeMailboxBuffer(psReadMbx);
 8003c38:	4b2f      	ldr	r3, [pc, #188]	@ (8003cf8 <MBX_StopMailboxHandler+0x128>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f007 fc31 	bl	800b4a4 <free>
    }


    SDOS_ClearPendingResponse();
 8003c42:	f002 fe2d 	bl	80068a0 <SDOS_ClearPendingResponse>



    psWriteMbx = NULL;
 8003c46:	4b2d      	ldr	r3, [pc, #180]	@ (8003cfc <MBX_StopMailboxHandler+0x12c>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	601a      	str	r2, [r3, #0]
    psRepeatMbx = NULL;
 8003c4c:	4b28      	ldr	r3, [pc, #160]	@ (8003cf0 <MBX_StopMailboxHandler+0x120>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	601a      	str	r2, [r3, #0]
    psReadMbx = NULL;
 8003c52:	4b29      	ldr	r3, [pc, #164]	@ (8003cf8 <MBX_StopMailboxHandler+0x128>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	601a      	str	r2, [r3, #0]
    psStoreMbx = NULL;
 8003c58:	4b26      	ldr	r3, [pc, #152]	@ (8003cf4 <MBX_StopMailboxHandler+0x124>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	601a      	str	r2, [r3, #0]

    bMbxRepeatToggle    = FALSE;
 8003c5e:	4b28      	ldr	r3, [pc, #160]	@ (8003d00 <MBX_StopMailboxHandler+0x130>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	701a      	strb	r2, [r3, #0]
    /*Reset Repeat acknowledge bit of SyncManager1 (0x080F bit 2)*/
    {
        UINT8 sm1Activate = 0;
 8003c64:	2300      	movs	r3, #0
 8003c66:	70fb      	strb	r3, [r7, #3]
        HW_EscReadByte(sm1Activate,(ESC_SM_PDICONTROL_OFFSET + SIZEOF_SM_REGISTER));
 8003c68:	1cfb      	adds	r3, r7, #3
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f640 010f 	movw	r1, #2063	@ 0x80f
 8003c70:	4618      	mov	r0, r3
 8003c72:	f7fc fe61 	bl	8000938 <HW_EscRead>
        sm1Activate &= ~0x02;
 8003c76:	78fb      	ldrb	r3, [r7, #3]
 8003c78:	f023 0302 	bic.w	r3, r3, #2
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	70fb      	strb	r3, [r7, #3]
        HW_EscWriteByte(sm1Activate,(ESC_SM_PDICONTROL_OFFSET + SIZEOF_SM_REGISTER));
 8003c80:	1cfb      	adds	r3, r7, #3
 8003c82:	2201      	movs	r2, #1
 8003c84:	f640 010f 	movw	r1, #2063	@ 0x80f
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7fc fe85 	bl	8000998 <HW_EscWrite>
    }
    bSendMbxIsFull         = FALSE;
 8003c8e:	4b1d      	ldr	r3, [pc, #116]	@ (8003d04 <MBX_StopMailboxHandler+0x134>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	701a      	strb	r2, [r3, #0]
    bReceiveMbxIsLocked = FALSE;
 8003c94:	4b1c      	ldr	r3, [pc, #112]	@ (8003d08 <MBX_StopMailboxHandler+0x138>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	701a      	strb	r2, [r3, #0]
    u8MailboxSendReqStored    = 0;
 8003c9a:	4b1c      	ldr	r3, [pc, #112]	@ (8003d0c <MBX_StopMailboxHandler+0x13c>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	701a      	strb	r2, [r3, #0]
    u8MbxWriteCounter         = 0;
 8003ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8003d10 <MBX_StopMailboxHandler+0x140>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	701a      	strb	r2, [r3, #0]
    u8MbxReadCounter        = 0;
 8003ca6:	4b1b      	ldr	r3, [pc, #108]	@ (8003d14 <MBX_StopMailboxHandler+0x144>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	701a      	strb	r2, [r3, #0]

    do
    {
        pMbx = GetOutOfMbxQueue(&sMbxReceiveQueue);
 8003cac:	481a      	ldr	r0, [pc, #104]	@ (8003d18 <MBX_StopMailboxHandler+0x148>)
 8003cae:	f7ff fe66 	bl	800397e <GetOutOfMbxQueue>
 8003cb2:	6078      	str	r0, [r7, #4]
        if (pMbx)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d002      	beq.n	8003cc0 <MBX_StopMailboxHandler+0xf0>
        {
            APPL_FreeMailboxBuffer(pMbx);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f007 fbf2 	bl	800b4a4 <free>
        }
    } while (pMbx != NULL);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1f2      	bne.n	8003cac <MBX_StopMailboxHandler+0xdc>
    
    do
    {
        pMbx = GetOutOfMbxQueue(&sMbxSendQueue);
 8003cc6:	4815      	ldr	r0, [pc, #84]	@ (8003d1c <MBX_StopMailboxHandler+0x14c>)
 8003cc8:	f7ff fe59 	bl	800397e <GetOutOfMbxQueue>
 8003ccc:	6078      	str	r0, [r7, #4]
        if (pMbx)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d002      	beq.n	8003cda <MBX_StopMailboxHandler+0x10a>
        {
            APPL_FreeMailboxBuffer(pMbx);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f007 fbe5 	bl	800b4a4 <free>
        }
    } while (pMbx != NULL);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d1f2      	bne.n	8003cc6 <MBX_StopMailboxHandler+0xf6>

}
 8003ce0:	bf00      	nop
 8003ce2:	bf00      	nop
 8003ce4:	3708      	adds	r7, #8
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	24000517 	.word	0x24000517
 8003cf0:	24000530 	.word	0x24000530
 8003cf4:	24000534 	.word	0x24000534
 8003cf8:	2400052c 	.word	0x2400052c
 8003cfc:	24000528 	.word	0x24000528
 8003d00:	24000518 	.word	0x24000518
 8003d04:	24000516 	.word	0x24000516
 8003d08:	24000515 	.word	0x24000515
 8003d0c:	24000524 	.word	0x24000524
 8003d10:	24000522 	.word	0x24000522
 8003d14:	24000523 	.word	0x24000523
 8003d18:	2400056c 	.word	0x2400056c
 8003d1c:	24000538 	.word	0x24000538

08003d20 <MailboxServiceInd>:
 \brief    The function checks the mailbox header for the requested service and calls the
 \brief    corresponding XXXX_ServiceInd-function
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 MailboxServiceInd(TMBX MBXMEM *pMbx)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
    UINT8 result;


    switch ( (pMbx->MbxHeader.Flags[MBX_OFFS_TYPE] & MBX_MASK_TYPE) >> MBX_SHIFT_TYPE )
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	889b      	ldrh	r3, [r3, #4]
 8003d2c:	121b      	asrs	r3, r3, #8
 8003d2e:	f003 030f 	and.w	r3, r3, #15
 8003d32:	2b03      	cmp	r3, #3
 8003d34:	d105      	bne.n	8003d42 <MailboxServiceInd+0x22>
    {
    case MBX_TYPE_COE:
        /* CoE datagram received */
        result = COE_ServiceInd((TCOEMBX MBXMEM *) pMbx);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f7fd fde6 	bl	8001908 <COE_ServiceInd>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	73fb      	strb	r3, [r7, #15]
        break;
 8003d40:	e002      	b.n	8003d48 <MailboxServiceInd+0x28>

    default:

        result = MBXERR_UNSUPPORTEDPROTOCOL;
 8003d42:	2302      	movs	r3, #2
 8003d44:	73fb      	strb	r3, [r7, #15]
        break;
 8003d46:	bf00      	nop
    }

    return result;
 8003d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3710      	adds	r7, #16
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
	...

08003d54 <MBX_MailboxWriteInd>:
 \brief    The function checks the mailbox header for the requested service and calls the
 \brief    corresponding XXXX_ServiceInd-function
*////////////////////////////////////////////////////////////////////////////////////////

void MBX_MailboxWriteInd(TMBX MBXMEM *pMbx)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
    UINT8 result = 0;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	73fb      	strb	r3, [r7, #15]
    UINT8 mbxCounter = pMbx->MbxHeader.Flags[MBX_OFFS_COUNTER] >> MBX_SHIFT_COUNTER;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	889b      	ldrh	r3, [r3, #4]
 8003d64:	0b1b      	lsrs	r3, r3, #12
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	73bb      	strb	r3, [r7, #14]
    UINT16 MbxLen = SWAPWORD(pMbx->MbxHeader.Length);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	881b      	ldrh	r3, [r3, #0]
 8003d6e:	81bb      	strh	r3, [r7, #12]

    if(MbxLen > MAX_MBX_SIZE)
 8003d70:	89bb      	ldrh	r3, [r7, #12]
 8003d72:	2b80      	cmp	r3, #128	@ 0x80
 8003d74:	d914      	bls.n	8003da0 <MBX_MailboxWriteInd+0x4c>
    {
        /* Mailbox error response: size specified in mailbox header too large*/
        pMbx->MbxHeader.Length     = 4;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2204      	movs	r2, #4
 8003d7a:	801a      	strh	r2, [r3, #0]
        pMbx->MbxHeader.Flags[MBX_OFFS_TYPE]        &= ~MBX_MASK_TYPE;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	889b      	ldrh	r3, [r3, #4]
 8003d80:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	809a      	strh	r2, [r3, #4]
        pMbx->Data[0]                        = SWAPWORD(MBXSERVICE_MBXERRORCMD);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	80da      	strh	r2, [r3, #6]
        pMbx->Data[1]                        = SWAPWORD(MBXERR_INVALIDSIZE);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2208      	movs	r2, #8
 8003d94:	811a      	strh	r2, [r3, #8]
        MBX_MailboxSendReq(pMbx, 0);
 8003d96:	2100      	movs	r1, #0
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 f8e5 	bl	8003f68 <MBX_MailboxSendReq>
        // the mailbox buffer has to be freed here
        APPL_FreeMailboxBuffer(pMbx);
        pMbx = NULL;

    }
}
 8003d9e:	e02f      	b.n	8003e00 <MBX_MailboxWriteInd+0xac>
    if ( mbxCounter == 0 || mbxCounter != u8MbxWriteCounter )
 8003da0:	7bbb      	ldrb	r3, [r7, #14]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d004      	beq.n	8003db0 <MBX_MailboxWriteInd+0x5c>
 8003da6:	4b18      	ldr	r3, [pc, #96]	@ (8003e08 <MBX_MailboxWriteInd+0xb4>)
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	7bba      	ldrb	r2, [r7, #14]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d021      	beq.n	8003df4 <MBX_MailboxWriteInd+0xa0>
        u8MbxWriteCounter = mbxCounter;
 8003db0:	4a15      	ldr	r2, [pc, #84]	@ (8003e08 <MBX_MailboxWriteInd+0xb4>)
 8003db2:	7bbb      	ldrb	r3, [r7, #14]
 8003db4:	7013      	strb	r3, [r2, #0]
            result = PutInMbxQueue(pMbx, &sMbxReceiveQueue);
 8003db6:	4915      	ldr	r1, [pc, #84]	@ (8003e0c <MBX_MailboxWriteInd+0xb8>)
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f7ff fdb7 	bl	800392c <PutInMbxQueue>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	73fb      	strb	r3, [r7, #15]
        if ( result != 0 )
 8003dc2:	7bfb      	ldrb	r3, [r7, #15]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d01b      	beq.n	8003e00 <MBX_MailboxWriteInd+0xac>
            pMbx->MbxHeader.Length     = 4;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2204      	movs	r2, #4
 8003dcc:	801a      	strh	r2, [r3, #0]
            pMbx->MbxHeader.Flags[MBX_OFFS_TYPE]        &= ~MBX_MASK_TYPE;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	889b      	ldrh	r3, [r3, #4]
 8003dd2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003dd6:	b29a      	uxth	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	809a      	strh	r2, [r3, #4]
            pMbx->Data[0]                        = SWAPWORD(MBXSERVICE_MBXERRORCMD);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	80da      	strh	r2, [r3, #6]
            pMbx->Data[1]                        = SWAPWORD(result);
 8003de2:	7bfb      	ldrb	r3, [r7, #15]
 8003de4:	b29a      	uxth	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	811a      	strh	r2, [r3, #8]
            MBX_MailboxSendReq(pMbx, 0);
 8003dea:	2100      	movs	r1, #0
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f000 f8bb 	bl	8003f68 <MBX_MailboxSendReq>
        if ( result != 0 )
 8003df2:	e005      	b.n	8003e00 <MBX_MailboxWriteInd+0xac>
        APPL_FreeMailboxBuffer(pMbx);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f007 fb55 	bl	800b4a4 <free>
        pMbx = NULL;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	607b      	str	r3, [r7, #4]
}
 8003dfe:	e7ff      	b.n	8003e00 <MBX_MailboxWriteInd+0xac>
 8003e00:	bf00      	nop
 8003e02:	3710      	adds	r7, #16
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	24000522 	.word	0x24000522
 8003e0c:	2400056c 	.word	0x2400056c

08003e10 <MBX_MailboxReadInd>:
/**
 \brief This function is called when the Master has read the Send-Mailbox.
*////////////////////////////////////////////////////////////////////////////////////////

void MBX_MailboxReadInd(void)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
    bSendMbxIsFull = FALSE;
 8003e16:	4b2e      	ldr	r3, [pc, #184]	@ (8003ed0 <MBX_MailboxReadInd+0xc0>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	701a      	strb	r2, [r3, #0]

    // HBu 02.05.06: the pointer psRepeatMbx is only free if there is no stored
    //               mailbox service from the last repeat
    if (psRepeatMbx && psStoreMbx == NULL)
 8003e1c:	4b2d      	ldr	r3, [pc, #180]	@ (8003ed4 <MBX_MailboxReadInd+0xc4>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d011      	beq.n	8003e48 <MBX_MailboxReadInd+0x38>
 8003e24:	4b2c      	ldr	r3, [pc, #176]	@ (8003ed8 <MBX_MailboxReadInd+0xc8>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d10d      	bne.n	8003e48 <MBX_MailboxReadInd+0x38>
    {
        /* the last sent service is not stored for repeat any longer */
/*ECATCHANGE_START(V5.13) MBX3*/
        if (psReadMbx != psRepeatMbx)
 8003e2c:	4b2b      	ldr	r3, [pc, #172]	@ (8003edc <MBX_MailboxReadInd+0xcc>)
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	4b28      	ldr	r3, [pc, #160]	@ (8003ed4 <MBX_MailboxReadInd+0xc4>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d007      	beq.n	8003e48 <MBX_MailboxReadInd+0x38>
        {
            APPL_FreeMailboxBuffer(psRepeatMbx);
 8003e38:	4b26      	ldr	r3, [pc, #152]	@ (8003ed4 <MBX_MailboxReadInd+0xc4>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f007 fb31 	bl	800b4a4 <free>
            psRepeatMbx = NULL;
 8003e42:	4b24      	ldr	r3, [pc, #144]	@ (8003ed4 <MBX_MailboxReadInd+0xc4>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	601a      	str	r2, [r3, #0]
/*ECATCHANGE_END(V5.13) MBX3*/

    }

    /* the actual sent service has to be stored for repeat */
    psRepeatMbx = psReadMbx;
 8003e48:	4b24      	ldr	r3, [pc, #144]	@ (8003edc <MBX_MailboxReadInd+0xcc>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a21      	ldr	r2, [pc, #132]	@ (8003ed4 <MBX_MailboxReadInd+0xc4>)
 8003e4e:	6013      	str	r3, [r2, #0]

      if ( psStoreMbx )
 8003e50:	4b21      	ldr	r3, [pc, #132]	@ (8003ed8 <MBX_MailboxReadInd+0xc8>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d008      	beq.n	8003e6a <MBX_MailboxReadInd+0x5a>
      {
        /* there was a buffer stored */
        MBX_CopyToSendMailbox(psStoreMbx);
 8003e58:	4b1f      	ldr	r3, [pc, #124]	@ (8003ed8 <MBX_MailboxReadInd+0xc8>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f000 f98f 	bl	8004180 <MBX_CopyToSendMailbox>
        /* no more buffer to be stored any more */
        psStoreMbx = NULL;
 8003e62:	4b1d      	ldr	r3, [pc, #116]	@ (8003ed8 <MBX_MailboxReadInd+0xc8>)
 8003e64:	2200      	movs	r2, #0
 8003e66:	601a      	str	r2, [r3, #0]
 8003e68:	e009      	b.n	8003e7e <MBX_MailboxReadInd+0x6e>
      }
      else
    {
        TMBX MBXMEM* pMbx = GetOutOfMbxQueue(&sMbxSendQueue);
 8003e6a:	481d      	ldr	r0, [pc, #116]	@ (8003ee0 <MBX_MailboxReadInd+0xd0>)
 8003e6c:	f7ff fd87 	bl	800397e <GetOutOfMbxQueue>
 8003e70:	6078      	str	r0, [r7, #4]

        
        if (pMbx)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d002      	beq.n	8003e7e <MBX_MailboxReadInd+0x6e>
        {
            MBX_CopyToSendMailbox(pMbx);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f000 f981 	bl	8004180 <MBX_CopyToSendMailbox>
        }
    }

      if ( u8MailboxSendReqStored )
 8003e7e:	4b19      	ldr	r3, [pc, #100]	@ (8003ee4 <MBX_MailboxReadInd+0xd4>)
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d01f      	beq.n	8003ec6 <MBX_MailboxReadInd+0xb6>
    {
        /* there are mailbox services stored to be sent */
        if ( u8MailboxSendReqStored & COE_SERVICE )
 8003e86:	4b17      	ldr	r3, [pc, #92]	@ (8003ee4 <MBX_MailboxReadInd+0xd4>)
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d019      	beq.n	8003ec6 <MBX_MailboxReadInd+0xb6>
        {
           UINT8 result = 0;
 8003e92:	2300      	movs	r3, #0
 8003e94:	70fb      	strb	r3, [r7, #3]
            /* reset the flag indicating that CoE service to be sent was stored */
            u8MailboxSendReqStored &= ~COE_SERVICE;
 8003e96:	4b13      	ldr	r3, [pc, #76]	@ (8003ee4 <MBX_MailboxReadInd+0xd4>)
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	f023 0302 	bic.w	r3, r3, #2
 8003e9e:	b2da      	uxtb	r2, r3
 8003ea0:	4b10      	ldr	r3, [pc, #64]	@ (8003ee4 <MBX_MailboxReadInd+0xd4>)
 8003ea2:	701a      	strb	r2, [r3, #0]

            /* call CoE function that will send the stored CoE service */
            result = COE_ContinueInd(psWriteMbx);
 8003ea4:	4b10      	ldr	r3, [pc, #64]	@ (8003ee8 <MBX_MailboxReadInd+0xd8>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7fd fd65 	bl	8001978 <COE_ContinueInd>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	70fb      	strb	r3, [r7, #3]

            if (result != 0)
 8003eb2:	78fb      	ldrb	r3, [r7, #3]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d006      	beq.n	8003ec6 <MBX_MailboxReadInd+0xb6>
            {
                /*Set the pending CoE indication is an error occurred during the continue indication*/
                u8MailboxSendReqStored |= COE_SERVICE;
 8003eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8003ee4 <MBX_MailboxReadInd+0xd4>)
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	f043 0302 	orr.w	r3, r3, #2
 8003ec0:	b2da      	uxtb	r2, r3
 8003ec2:	4b08      	ldr	r3, [pc, #32]	@ (8003ee4 <MBX_MailboxReadInd+0xd4>)
 8003ec4:	701a      	strb	r2, [r3, #0]
/*ECATCHANGE_END(V5.13) EOE1*/

        {
        }
    }
}
 8003ec6:	bf00      	nop
 8003ec8:	3708      	adds	r7, #8
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	24000516 	.word	0x24000516
 8003ed4:	24000530 	.word	0x24000530
 8003ed8:	24000534 	.word	0x24000534
 8003edc:	2400052c 	.word	0x2400052c
 8003ee0:	24000538 	.word	0x24000538
 8003ee4:	24000524 	.word	0x24000524
 8003ee8:	24000528 	.word	0x24000528

08003eec <MBX_MailboxRepeatReq>:
 \brief This function is called if the Master has requested a resending of the last
 \brief sent mailbox
*////////////////////////////////////////////////////////////////////////////////////////

void MBX_MailboxRepeatReq(void)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
    if (psRepeatMbx)
 8003ef2:	4b18      	ldr	r3, [pc, #96]	@ (8003f54 <MBX_MailboxRepeatReq+0x68>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d01d      	beq.n	8003f36 <MBX_MailboxRepeatReq+0x4a>
    {
        TMBX MBXMEM *pMbx = psRepeatMbx;
 8003efa:	4b16      	ldr	r3, [pc, #88]	@ (8003f54 <MBX_MailboxRepeatReq+0x68>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	607b      	str	r3, [r7, #4]
        /* HBu 13.10.06: if a repeat request is received (again) before the previously repeated mailbox telegram
           was read from the master (psStoreMbx != NULL) the next mailbox telegram to be sent is still in the
            read mailbox so it has not to updated exchanged */
        ENTER_MBX_CRITICAL;

       if (bSendMbxIsFull && psStoreMbx == NULL)
 8003f00:	4b15      	ldr	r3, [pc, #84]	@ (8003f58 <MBX_MailboxRepeatReq+0x6c>)
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d010      	beq.n	8003f2a <MBX_MailboxRepeatReq+0x3e>
 8003f08:	4b14      	ldr	r3, [pc, #80]	@ (8003f5c <MBX_MailboxRepeatReq+0x70>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d10c      	bne.n	8003f2a <MBX_MailboxRepeatReq+0x3e>
        {
            /* mailbox is full, take the buffer off */
            DisableSyncManChannel(MAILBOX_READ);
 8003f10:	2001      	movs	r0, #1
 8003f12:	f7fd fddb 	bl	8001acc <DisableSyncManChannel>

            /* store the buffer to be sent next */
            psStoreMbx = psReadMbx;
 8003f16:	4b12      	ldr	r3, [pc, #72]	@ (8003f60 <MBX_MailboxRepeatReq+0x74>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a10      	ldr	r2, [pc, #64]	@ (8003f5c <MBX_MailboxRepeatReq+0x70>)
 8003f1c:	6013      	str	r3, [r2, #0]
            /* enable the mailbox again */
            EnableSyncManChannel(MAILBOX_READ);
 8003f1e:	2001      	movs	r0, #1
 8003f20:	f7fd fdfb 	bl	8001b1a <EnableSyncManChannel>

            /* HBu 15.02.06: flag has to be reset otherwise the mailbox service
                             will not be copied by MBX_CopyToSendMailbox */
            bSendMbxIsFull = FALSE;
 8003f24:	4b0c      	ldr	r3, [pc, #48]	@ (8003f58 <MBX_MailboxRepeatReq+0x6c>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	701a      	strb	r2, [r3, #0]
        }


        MBX_CopyToSendMailbox(pMbx);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 f928 	bl	8004180 <MBX_CopyToSendMailbox>
        // HBu 17.06.06: psRepeatMbx has to be set to 0, when it was repeated, otherwise it would be returned twice
        // to the empty queue (MAILBOX_QUEUE=1) or a buffer get lost, if the the next repeat request will happen before
        // the repeated buffer was read
        psRepeatMbx = NULL;
 8003f30:	4b08      	ldr	r3, [pc, #32]	@ (8003f54 <MBX_MailboxRepeatReq+0x68>)
 8003f32:	2200      	movs	r2, #0
 8003f34:	601a      	str	r2, [r3, #0]
        LEAVE_MBX_CRITICAL;
    }

    // Repeat was finished, toggle the acknowledge bit
    bMbxRepeatToggle = !bMbxRepeatToggle;
 8003f36:	4b0b      	ldr	r3, [pc, #44]	@ (8003f64 <MBX_MailboxRepeatReq+0x78>)
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	bf0c      	ite	eq
 8003f3e:	2301      	moveq	r3, #1
 8003f40:	2300      	movne	r3, #0
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	461a      	mov	r2, r3
 8003f46:	4b07      	ldr	r3, [pc, #28]	@ (8003f64 <MBX_MailboxRepeatReq+0x78>)
 8003f48:	701a      	strb	r2, [r3, #0]
}
 8003f4a:	bf00      	nop
 8003f4c:	3708      	adds	r7, #8
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	24000530 	.word	0x24000530
 8003f58:	24000516 	.word	0x24000516
 8003f5c:	24000534 	.word	0x24000534
 8003f60:	2400052c 	.word	0x2400052c
 8003f64:	24000518 	.word	0x24000518

08003f68 <MBX_MailboxSendReq>:

 \brief        This function puts a new Mailbox service in the Send Mailbox
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 MBX_MailboxSendReq( TMBX MBXMEM * pMbx, UINT8 flags )
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	460b      	mov	r3, r1
 8003f72:	70fb      	strb	r3, [r7, #3]
    UINT8 result = 0;
 8003f74:	2300      	movs	r3, #0
 8003f76:	73fb      	strb	r3, [r7, #15]

    /* HBu 06.02.06: in INIT-state a mailbox send request shall be refused */
    if ( (nAlStatus & STATE_MASK) == STATE_INIT )
 8003f78:	4b2d      	ldr	r3, [pc, #180]	@ (8004030 <MBX_MailboxSendReq+0xc8>)
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	f003 030f 	and.w	r3, r3, #15
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d101      	bne.n	8003f88 <MBX_MailboxSendReq+0x20>
    {
        return ERROR_INVALIDSTATE;
 8003f84:	23f0      	movs	r3, #240	@ 0xf0
 8003f86:	e04e      	b.n	8004026 <MBX_MailboxSendReq+0xbe>

    ENTER_MBX_CRITICAL;

    /* the counter in the mailbox header has to be incremented with every new mailbox service to be sent
       if the mailbox data link layer is supported (software switch MAILBOX_REPEAT_SUPPORTED set)*/
    pMbx->MbxHeader.Flags[MBX_OFFS_COUNTER] &= ~MBX_MASK_COUNTER;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	889b      	ldrh	r3, [r3, #4]
 8003f8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f90:	b29a      	uxth	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	809a      	strh	r2, [r3, #4]
    /* HBu 13.02.06: Repeat-Counter was incremented too much if the mailbox service could not be sent */
    /* u8MbxCounter holds the actual counter for the mailbox header, only the values
       1-7 are allowed if the mailbox data link layer is supported  */
    if ( (u8MbxReadCounter & 0x07) == 0 )
 8003f96:	4b27      	ldr	r3, [pc, #156]	@ (8004034 <MBX_MailboxSendReq+0xcc>)
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	f003 0307 	and.w	r3, r3, #7
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d102      	bne.n	8003fa8 <MBX_MailboxSendReq+0x40>
    {
        u8MbxReadCounter = 1;
 8003fa2:	4b24      	ldr	r3, [pc, #144]	@ (8004034 <MBX_MailboxSendReq+0xcc>)
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	701a      	strb	r2, [r3, #0]
    }

    pMbx->MbxHeader.Flags[MBX_OFFS_COUNTER] |= u8MbxReadCounter << MBX_SHIFT_COUNTER;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	889b      	ldrh	r3, [r3, #4]
 8003fac:	b21a      	sxth	r2, r3
 8003fae:	4b21      	ldr	r3, [pc, #132]	@ (8004034 <MBX_MailboxSendReq+0xcc>)
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	031b      	lsls	r3, r3, #12
 8003fb4:	b21b      	sxth	r3, r3
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	b21b      	sxth	r3, r3
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	809a      	strh	r2, [r3, #4]

    /* try to copy the mailbox command in the ESC */
    if ( MBX_CopyToSendMailbox(pMbx) != 0 )
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f000 f8dd 	bl	8004180 <MBX_CopyToSendMailbox>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d014      	beq.n	8003ff6 <MBX_MailboxSendReq+0x8e>
    {
        /* no success, send mailbox was full, set flag  */
        result = PutInMbxQueue(pMbx, &sMbxSendQueue);
 8003fcc:	491a      	ldr	r1, [pc, #104]	@ (8004038 <MBX_MailboxSendReq+0xd0>)
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f7ff fcac 	bl	800392c <PutInMbxQueue>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	73fb      	strb	r3, [r7, #15]
        if (result != 0)
 8003fd8:	7bfb      	ldrb	r3, [r7, #15]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d004      	beq.n	8003fe8 <MBX_MailboxSendReq+0x80>
        {
            flags |= FRAGMENTS_FOLLOW;
 8003fde:	78fb      	ldrb	r3, [r7, #3]
 8003fe0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003fe4:	70fb      	strb	r3, [r7, #3]
 8003fe6:	e00c      	b.n	8004002 <MBX_MailboxSendReq+0x9a>
        }
        else
        {
            u8MbxReadCounter++;
 8003fe8:	4b12      	ldr	r3, [pc, #72]	@ (8004034 <MBX_MailboxSendReq+0xcc>)
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	3301      	adds	r3, #1
 8003fee:	b2da      	uxtb	r2, r3
 8003ff0:	4b10      	ldr	r3, [pc, #64]	@ (8004034 <MBX_MailboxSendReq+0xcc>)
 8003ff2:	701a      	strb	r2, [r3, #0]
 8003ff4:	e005      	b.n	8004002 <MBX_MailboxSendReq+0x9a>
        }
    }
    /* HBu 13.02.06: Repeat-Counter was incremented too much if the mailbox service could not be sent */
    else
    {
        u8MbxReadCounter++;
 8003ff6:	4b0f      	ldr	r3, [pc, #60]	@ (8004034 <MBX_MailboxSendReq+0xcc>)
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	b2da      	uxtb	r2, r3
 8003ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8004034 <MBX_MailboxSendReq+0xcc>)
 8004000:	701a      	strb	r2, [r3, #0]
    }

    if ( flags & FRAGMENTS_FOLLOW )
 8004002:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004006:	2b00      	cmp	r3, #0
 8004008:	da0c      	bge.n	8004024 <MBX_MailboxSendReq+0xbc>
    {
        /* store the mailbox service that the corresponding XXX_ContinueInd function will
           be called when the send mailbox will have been read by the master because there
           are mailbox commands to be sent for this service */
        u8MailboxSendReqStored |= (flags & ((UINT8) ~FRAGMENTS_FOLLOW));
 800400a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800400e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004012:	b25a      	sxtb	r2, r3
 8004014:	4b09      	ldr	r3, [pc, #36]	@ (800403c <MBX_MailboxSendReq+0xd4>)
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	b25b      	sxtb	r3, r3
 800401a:	4313      	orrs	r3, r2
 800401c:	b25b      	sxtb	r3, r3
 800401e:	b2da      	uxtb	r2, r3
 8004020:	4b06      	ldr	r3, [pc, #24]	@ (800403c <MBX_MailboxSendReq+0xd4>)
 8004022:	701a      	strb	r2, [r3, #0]
    }

    LEAVE_MBX_CRITICAL;

    return result;
 8004024:	7bfb      	ldrb	r3, [r7, #15]
}
 8004026:	4618      	mov	r0, r3
 8004028:	3710      	adds	r7, #16
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	240004fc 	.word	0x240004fc
 8004034:	24000523 	.word	0x24000523
 8004038:	24000538 	.word	0x24000538
 800403c:	24000524 	.word	0x24000524

08004040 <MBX_CheckAndCopyMailbox>:

        Also the contents of the Receive Mailbox will be copied in the variable sMbx.
*////////////////////////////////////////////////////////////////////////////////////////

void MBX_CheckAndCopyMailbox( void )
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
    UINT16 mbxLen;

    /* get the size of the received mailbox command and acknowledge the event*/
    HW_EscReadWord(mbxLen,u16EscAddrReceiveMbx);
 8004046:	4b46      	ldr	r3, [pc, #280]	@ (8004160 <MBX_CheckAndCopyMailbox+0x120>)
 8004048:	8819      	ldrh	r1, [r3, #0]
 800404a:	1cbb      	adds	r3, r7, #2
 800404c:	2202      	movs	r2, #2
 800404e:	4618      	mov	r0, r3
 8004050:	f7fc fc72 	bl	8000938 <HW_EscRead>
    
    /* the size has to be swapped here, all other bytes of the mailbox service will be swapped later */
    mbxLen = SWAPWORD(mbxLen);
 8004054:	887b      	ldrh	r3, [r7, #2]
 8004056:	807b      	strh	r3, [r7, #2]

    if(bNoMbxMemoryAvailable == TRUE)
 8004058:	4b42      	ldr	r3, [pc, #264]	@ (8004164 <MBX_CheckAndCopyMailbox+0x124>)
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	2b01      	cmp	r3, #1
 800405e:	d123      	bne.n	80040a8 <MBX_CheckAndCopyMailbox+0x68>
    {
        /* Return a no memory error in case of any mailbox request*/
        TMBX MBXMEM *pMbx = (TMBX MBXMEM *) APPL_AllocMailboxBuffer(10); /* a mailbox error datagram length*/
 8004060:	200a      	movs	r0, #10
 8004062:	f007 fa17 	bl	800b494 <malloc>
 8004066:	4603      	mov	r3, r0
 8004068:	607b      	str	r3, [r7, #4]

        if(pMbx != NULL)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d01b      	beq.n	80040a8 <MBX_CheckAndCopyMailbox+0x68>
        {
            HMEMSET(pMbx,0x00,10);
 8004070:	220a      	movs	r2, #10
 8004072:	2100      	movs	r1, #0
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f007 facb 	bl	800b610 <memset>

            /* Mailbox error response: type 0 (mailbox service protocol) */
            pMbx->MbxHeader.Length     = 4;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2204      	movs	r2, #4
 800407e:	801a      	strh	r2, [r3, #0]
            pMbx->MbxHeader.Flags[MBX_OFFS_TYPE]        &= ~(MBX_MASK_TYPE);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	889b      	ldrh	r3, [r3, #4]
 8004084:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004088:	b29a      	uxth	r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	809a      	strh	r2, [r3, #4]
            pMbx->Data[0]                        = SWAPWORD(MBXSERVICE_MBXERRORCMD);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2201      	movs	r2, #1
 8004092:	80da      	strh	r2, [r3, #6]
            pMbx->Data[1]                        = SWAPWORD(MBXERR_NOMOREMEMORY);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2207      	movs	r2, #7
 8004098:	811a      	strh	r2, [r3, #8]
            MBX_MailboxSendReq(pMbx, 0);
 800409a:	2100      	movs	r1, #0
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f7ff ff63 	bl	8003f68 <MBX_MailboxSendReq>

            APPL_FreeMailboxBuffer(pMbx);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f007 f9fe 	bl	800b4a4 <free>
        }
    }
    /* the length of the mailbox data is in the first two bytes of the mailbox,
       so the length of the mailbox header has to be added */
    mbxLen += MBX_HEADER_SIZE;
 80040a8:	887b      	ldrh	r3, [r7, #2]
 80040aa:	3306      	adds	r3, #6
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	807b      	strh	r3, [r7, #2]

    /* in this example there are only two mailbox buffers available in the firmware (one for processing and
       one to stored the last sent response for a possible repeat request), so a
       received mailbox service can only be processed if a free buffer is available */
    if ( ( bSendMbxIsFull )                /* a received mailbox service will not be processed
 80040b0:	4b2d      	ldr	r3, [pc, #180]	@ (8004168 <MBX_CheckAndCopyMailbox+0x128>)
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d103      	bne.n	80040c0 <MBX_CheckAndCopyMailbox+0x80>
                                                    as long as the send mailbox is still full
                                                    (waits to be read from the master) */
        ||( u8MailboxSendReqStored )    /* a mailbox service to be sent is still stored
 80040b8:	4b2c      	ldr	r3, [pc, #176]	@ (800416c <MBX_CheckAndCopyMailbox+0x12c>)
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d003      	beq.n	80040c8 <MBX_CheckAndCopyMailbox+0x88>
                                                    until all stored mailbox services are sent */
        )
    {
        /* set flag that the processing of the mailbox service will be checked in the
            function MBX_Main (called from ECAT_Main) */
        bReceiveMbxIsLocked = TRUE;
 80040c0:	4b2b      	ldr	r3, [pc, #172]	@ (8004170 <MBX_CheckAndCopyMailbox+0x130>)
 80040c2:	2201      	movs	r2, #1
 80040c4:	701a      	strb	r2, [r3, #0]
 80040c6:	e047      	b.n	8004158 <MBX_CheckAndCopyMailbox+0x118>
    }
    else
    {
        /* received mailbox command can be processed, reset flag */
        bReceiveMbxIsLocked = FALSE;
 80040c8:	4b29      	ldr	r3, [pc, #164]	@ (8004170 <MBX_CheckAndCopyMailbox+0x130>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	701a      	strb	r2, [r3, #0]

        /* if the read mailbox size is too big for the buffer, set the copy size to the maximum buffer size, otherwise
           memory could be overwritten,
           the evaluation of the mailbox size will be done in the mailbox protocols called from MBX_WriteMailboxInd */

        if (mbxLen > u16ReceiveMbxSize)
 80040ce:	887a      	ldrh	r2, [r7, #2]
 80040d0:	4b28      	ldr	r3, [pc, #160]	@ (8004174 <MBX_CheckAndCopyMailbox+0x134>)
 80040d2:	881b      	ldrh	r3, [r3, #0]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d902      	bls.n	80040de <MBX_CheckAndCopyMailbox+0x9e>
        {
            mbxLen = u16ReceiveMbxSize;
 80040d8:	4b26      	ldr	r3, [pc, #152]	@ (8004174 <MBX_CheckAndCopyMailbox+0x134>)
 80040da:	881b      	ldrh	r3, [r3, #0]
 80040dc:	807b      	strh	r3, [r7, #2]
        }

        psWriteMbx = (TMBX MBXMEM *) APPL_AllocMailboxBuffer(u16ReceiveMbxSize);
 80040de:	4b25      	ldr	r3, [pc, #148]	@ (8004174 <MBX_CheckAndCopyMailbox+0x134>)
 80040e0:	881b      	ldrh	r3, [r3, #0]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f007 f9d6 	bl	800b494 <malloc>
 80040e8:	4603      	mov	r3, r0
 80040ea:	461a      	mov	r2, r3
 80040ec:	4b22      	ldr	r3, [pc, #136]	@ (8004178 <MBX_CheckAndCopyMailbox+0x138>)
 80040ee:	601a      	str	r2, [r3, #0]

        /* if there is no more memory for mailbox buffer, the mailbox should not be read */
        if (psWriteMbx == NULL)
 80040f0:	4b21      	ldr	r3, [pc, #132]	@ (8004178 <MBX_CheckAndCopyMailbox+0x138>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d103      	bne.n	8004100 <MBX_CheckAndCopyMailbox+0xc0>
        {
            /* set flag that the processing of the mailbox service will be checked in the
                function MBX_Main (called from ECAT_Main) */
            bReceiveMbxIsLocked = TRUE;
 80040f8:	4b1d      	ldr	r3, [pc, #116]	@ (8004170 <MBX_CheckAndCopyMailbox+0x130>)
 80040fa:	2201      	movs	r2, #1
 80040fc:	701a      	strb	r2, [r3, #0]
 80040fe:	e02b      	b.n	8004158 <MBX_CheckAndCopyMailbox+0x118>
            return;
        }
        /* copy the mailbox header and data*/
        HW_EscReadMbxMem((MEM_ADDR MBXMEM *) psWriteMbx,u16EscAddrReceiveMbx,mbxLen);
 8004100:	4b1d      	ldr	r3, [pc, #116]	@ (8004178 <MBX_CheckAndCopyMailbox+0x138>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a16      	ldr	r2, [pc, #88]	@ (8004160 <MBX_CheckAndCopyMailbox+0x120>)
 8004106:	8811      	ldrh	r1, [r2, #0]
 8004108:	887a      	ldrh	r2, [r7, #2]
 800410a:	4618      	mov	r0, r3
 800410c:	f7fc fc14 	bl	8000938 <HW_EscRead>


        {
        /*Read Control and Status of SyncManager 0 to check if the buffer is unlocked*/
        VARVOLATILE UINT8 smstate = 0x00;
 8004110:	2300      	movs	r3, #0
 8004112:	707b      	strb	r3, [r7, #1]
        HW_EscReadByte(smstate,ESC_SYNCMAN_STATUS_OFFSET);
 8004114:	1c7b      	adds	r3, r7, #1
 8004116:	2201      	movs	r2, #1
 8004118:	f640 0105 	movw	r1, #2053	@ 0x805
 800411c:	4618      	mov	r0, r3
 800411e:	f7fc fc0b 	bl	8000938 <HW_EscRead>

        if(smstate & SM_STATUS_MBX_BUFFER_FULL)
 8004122:	787b      	ldrb	r3, [r7, #1]
 8004124:	b2db      	uxtb	r3, r3
 8004126:	f003 0308 	and.w	r3, r3, #8
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00f      	beq.n	800414e <MBX_CheckAndCopyMailbox+0x10e>
        {
            /*Unlock the mailbox SyncManger buffer*/
            u8dummy = 0;
 800412e:	4b13      	ldr	r3, [pc, #76]	@ (800417c <MBX_CheckAndCopyMailbox+0x13c>)
 8004130:	2200      	movs	r2, #0
 8004132:	701a      	strb	r2, [r3, #0]
            HW_EscReadByte(u8dummy,(u16EscAddrReceiveMbx + u16ReceiveMbxSize - 1));
 8004134:	4b0a      	ldr	r3, [pc, #40]	@ (8004160 <MBX_CheckAndCopyMailbox+0x120>)
 8004136:	881a      	ldrh	r2, [r3, #0]
 8004138:	4b0e      	ldr	r3, [pc, #56]	@ (8004174 <MBX_CheckAndCopyMailbox+0x134>)
 800413a:	881b      	ldrh	r3, [r3, #0]
 800413c:	4413      	add	r3, r2
 800413e:	b29b      	uxth	r3, r3
 8004140:	3b01      	subs	r3, #1
 8004142:	b29b      	uxth	r3, r3
 8004144:	2201      	movs	r2, #1
 8004146:	4619      	mov	r1, r3
 8004148:	480c      	ldr	r0, [pc, #48]	@ (800417c <MBX_CheckAndCopyMailbox+0x13c>)
 800414a:	f7fc fbf5 	bl	8000938 <HW_EscRead>
        }

        }

        /* in MBX_MailboxWriteInd the mailbox protocol will be processed */
        MBX_MailboxWriteInd( psWriteMbx );
 800414e:	4b0a      	ldr	r3, [pc, #40]	@ (8004178 <MBX_CheckAndCopyMailbox+0x138>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4618      	mov	r0, r3
 8004154:	f7ff fdfe 	bl	8003d54 <MBX_MailboxWriteInd>

    }
}
 8004158:	3708      	adds	r7, #8
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	2400051e 	.word	0x2400051e
 8004164:	240005a0 	.word	0x240005a0
 8004168:	24000516 	.word	0x24000516
 800416c:	24000524 	.word	0x24000524
 8004170:	24000515 	.word	0x24000515
 8004174:	2400051c 	.word	0x2400051c
 8004178:	24000528 	.word	0x24000528
 800417c:	24000508 	.word	0x24000508

08004180 <MBX_CopyToSendMailbox>:

 \brief    This function copies data to the Send Mailbox.
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 MBX_CopyToSendMailbox( TMBX MBXMEM *pMbx )
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b086      	sub	sp, #24
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
    if ( (nAlStatus & STATE_MASK) == STATE_INIT)
 8004188:	4b3e      	ldr	r3, [pc, #248]	@ (8004284 <MBX_CopyToSendMailbox+0x104>)
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	f003 030f 	and.w	r3, r3, #15
 8004190:	2b01      	cmp	r3, #1
 8004192:	d101      	bne.n	8004198 <MBX_CopyToSendMailbox+0x18>
    {
        /* the mailbox is disabled if the slave is in the INIT state */
        return( ERROR_INVALIDSTATE );
 8004194:	23f0      	movs	r3, #240	@ 0xf0
 8004196:	e070      	b.n	800427a <MBX_CopyToSendMailbox+0xfa>
    }


    if ( !bMbxRunning )
 8004198:	4b3b      	ldr	r3, [pc, #236]	@ (8004288 <MBX_CopyToSendMailbox+0x108>)
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d101      	bne.n	80041a4 <MBX_CopyToSendMailbox+0x24>
    {
        /* the mailbox is disabled if the slave is in the INIT state */
        return( ERROR_INVALIDSTATE );
 80041a0:	23f0      	movs	r3, #240	@ 0xf0
 80041a2:	e06a      	b.n	800427a <MBX_CopyToSendMailbox+0xfa>
    }

    if ( bSendMbxIsFull )
 80041a4:	4b39      	ldr	r3, [pc, #228]	@ (800428c <MBX_CopyToSendMailbox+0x10c>)
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d001      	beq.n	80041b0 <MBX_CopyToSendMailbox+0x30>
    {
        /* mailbox service cannot be sent because the send mailbox is still full */
        return MBXERR_NOMOREMEMORY;
 80041ac:	2307      	movs	r3, #7
 80041ae:	e064      	b.n	800427a <MBX_CopyToSendMailbox+0xfa>
    }
    else
    {
        /* the variable mbxSize contains the size of the mailbox data to be sent */
        UINT16 mbxSize = pMbx->MbxHeader.Length;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	881b      	ldrh	r3, [r3, #0]
 80041b4:	82bb      	strh	r3, [r7, #20]
/*ECATCHANGE_START(V5.13) MBX2*/
        /*Reset the not used mailbox memory*/
        {
            UINT16 LastUsedAddr = u16EscAddrSendMbx + mbxSize + MBX_HEADER_SIZE;
 80041b6:	4b36      	ldr	r3, [pc, #216]	@ (8004290 <MBX_CopyToSendMailbox+0x110>)
 80041b8:	881a      	ldrh	r2, [r3, #0]
 80041ba:	8abb      	ldrh	r3, [r7, #20]
 80041bc:	4413      	add	r3, r2
 80041be:	b29b      	uxth	r3, r3
 80041c0:	3306      	adds	r3, #6
 80041c2:	82fb      	strh	r3, [r7, #22]
            UINT16 LastAddrToReset = (u16EscAddrSendMbx + u16SendMbxSize);
 80041c4:	4b32      	ldr	r3, [pc, #200]	@ (8004290 <MBX_CopyToSendMailbox+0x110>)
 80041c6:	881a      	ldrh	r2, [r3, #0]
 80041c8:	4b32      	ldr	r3, [pc, #200]	@ (8004294 <MBX_CopyToSendMailbox+0x114>)
 80041ca:	881b      	ldrh	r3, [r3, #0]
 80041cc:	4413      	add	r3, r2
 80041ce:	827b      	strh	r3, [r7, #18]
            LastAddrToReset = LastAddrToReset - 1;
 80041d0:	8a7b      	ldrh	r3, [r7, #18]
 80041d2:	3b01      	subs	r3, #1
 80041d4:	827b      	strh	r3, [r7, #18]
            u8dummy = 0;
 80041d6:	4b30      	ldr	r3, [pc, #192]	@ (8004298 <MBX_CopyToSendMailbox+0x118>)
 80041d8:	2200      	movs	r2, #0
 80041da:	701a      	strb	r2, [r3, #0]

            /*clear all unused bytes*/
            while (LastUsedAddr < LastAddrToReset) /*reset all bytes until the second last valid address*/
 80041dc:	e008      	b.n	80041f0 <MBX_CopyToSendMailbox+0x70>
            {
                HW_EscWriteByte(u8dummy, LastUsedAddr);
 80041de:	8afb      	ldrh	r3, [r7, #22]
 80041e0:	2201      	movs	r2, #1
 80041e2:	4619      	mov	r1, r3
 80041e4:	482c      	ldr	r0, [pc, #176]	@ (8004298 <MBX_CopyToSendMailbox+0x118>)
 80041e6:	f7fc fbd7 	bl	8000998 <HW_EscWrite>
                LastUsedAddr = LastUsedAddr + 1;
 80041ea:	8afb      	ldrh	r3, [r7, #22]
 80041ec:	3301      	adds	r3, #1
 80041ee:	82fb      	strh	r3, [r7, #22]
            while (LastUsedAddr < LastAddrToReset) /*reset all bytes until the second last valid address*/
 80041f0:	8afa      	ldrh	r2, [r7, #22]
 80041f2:	8a7b      	ldrh	r3, [r7, #18]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d3f2      	bcc.n	80041de <MBX_CopyToSendMailbox+0x5e>
            }
        }
/*ECATCHANGE_END(V5.13) MBX2*/

        HW_EscWriteMbxMem((MEM_ADDR *)pMbx, u16EscAddrSendMbx, (mbxSize + MBX_HEADER_SIZE));
 80041f8:	4b25      	ldr	r3, [pc, #148]	@ (8004290 <MBX_CopyToSendMailbox+0x110>)
 80041fa:	8819      	ldrh	r1, [r3, #0]
 80041fc:	8abb      	ldrh	r3, [r7, #20]
 80041fe:	3306      	adds	r3, #6
 8004200:	b29b      	uxth	r3, r3
 8004202:	461a      	mov	r2, r3
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f7fc fbc7 	bl	8000998 <HW_EscWrite>


        {
        /*Read Control and Status of SyncManager 1 to check if the buffer is still marked as empty*/
        VARVOLATILE UINT8 smstate = 0x00;
 800420a:	2300      	movs	r3, #0
 800420c:	73fb      	strb	r3, [r7, #15]
        HW_EscReadByte(smstate,(ESC_SYNCMAN_STATUS_OFFSET + SIZEOF_SM_REGISTER));
 800420e:	f107 030f 	add.w	r3, r7, #15
 8004212:	2201      	movs	r2, #1
 8004214:	f640 010d 	movw	r1, #2061	@ 0x80d
 8004218:	4618      	mov	r0, r3
 800421a:	f7fc fb8d 	bl	8000938 <HW_EscRead>

        if(!(smstate & SM_STATUS_MBX_BUFFER_FULL))
 800421e:	7bfb      	ldrb	r3, [r7, #15]
 8004220:	b2db      	uxtb	r3, r3
 8004222:	f003 0308 	and.w	r3, r3, #8
 8004226:	2b00      	cmp	r3, #0
 8004228:	d119      	bne.n	800425e <MBX_CopyToSendMailbox+0xde>
        {
            UINT16 BytesLeft = u16SendMbxSize - (mbxSize + MBX_HEADER_SIZE);
 800422a:	4b1a      	ldr	r3, [pc, #104]	@ (8004294 <MBX_CopyToSendMailbox+0x114>)
 800422c:	881a      	ldrh	r2, [r3, #0]
 800422e:	8abb      	ldrh	r3, [r7, #20]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	b29b      	uxth	r3, r3
 8004234:	3b06      	subs	r3, #6
 8004236:	823b      	strh	r3, [r7, #16]

            /*in case of a slow ESC the buffer status may not indicate 'full' even if the complete buffer was written, trigger an additional write access only if not the complete buffer was written*/
            if (BytesLeft > 0)
 8004238:	8a3b      	ldrh	r3, [r7, #16]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00f      	beq.n	800425e <MBX_CopyToSendMailbox+0xde>
            {
                /*Write last Byte to trigger mailbox full flag*/
            u8dummy = 0;
 800423e:	4b16      	ldr	r3, [pc, #88]	@ (8004298 <MBX_CopyToSendMailbox+0x118>)
 8004240:	2200      	movs	r2, #0
 8004242:	701a      	strb	r2, [r3, #0]
            HW_EscWriteByte(u8dummy, (u16EscAddrSendMbx + u16SendMbxSize - 1));
 8004244:	4b12      	ldr	r3, [pc, #72]	@ (8004290 <MBX_CopyToSendMailbox+0x110>)
 8004246:	881a      	ldrh	r2, [r3, #0]
 8004248:	4b12      	ldr	r3, [pc, #72]	@ (8004294 <MBX_CopyToSendMailbox+0x114>)
 800424a:	881b      	ldrh	r3, [r3, #0]
 800424c:	4413      	add	r3, r2
 800424e:	b29b      	uxth	r3, r3
 8004250:	3b01      	subs	r3, #1
 8004252:	b29b      	uxth	r3, r3
 8004254:	2201      	movs	r2, #1
 8004256:	4619      	mov	r1, r3
 8004258:	480f      	ldr	r0, [pc, #60]	@ (8004298 <MBX_CopyToSendMailbox+0x118>)
 800425a:	f7fc fb9d 	bl	8000998 <HW_EscWrite>
            the other one the actual service to be sent (psReadMbx),
            there is no buffer available for a mailbox receive service
            until the last sent buffer was read from the master
            the exception is after the INIT2PREOP transition, in that
            case there is no last sent service (psReadMbx = 0) */
        if ( psReadMbx )
 800425e:	4b0f      	ldr	r3, [pc, #60]	@ (800429c <MBX_CopyToSendMailbox+0x11c>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d002      	beq.n	800426c <MBX_CopyToSendMailbox+0xec>
        {
            psWriteMbx = NULL;
 8004266:	4b0e      	ldr	r3, [pc, #56]	@ (80042a0 <MBX_CopyToSendMailbox+0x120>)
 8004268:	2200      	movs	r2, #0
 800426a:	601a      	str	r2, [r3, #0]
        }
        psReadMbx = pMbx;
 800426c:	4a0b      	ldr	r2, [pc, #44]	@ (800429c <MBX_CopyToSendMailbox+0x11c>)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6013      	str	r3, [r2, #0]

        /* set flag that send mailbox is full now */
        bSendMbxIsFull = TRUE;
 8004272:	4b06      	ldr	r3, [pc, #24]	@ (800428c <MBX_CopyToSendMailbox+0x10c>)
 8004274:	2201      	movs	r2, #1
 8004276:	701a      	strb	r2, [r3, #0]


        return 0;
 8004278:	2300      	movs	r3, #0
    }
}
 800427a:	4618      	mov	r0, r3
 800427c:	3718      	adds	r7, #24
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	240004fc 	.word	0x240004fc
 8004288:	24000517 	.word	0x24000517
 800428c:	24000516 	.word	0x24000516
 8004290:	24000520 	.word	0x24000520
 8004294:	2400051a 	.word	0x2400051a
 8004298:	24000508 	.word	0x24000508
 800429c:	2400052c 	.word	0x2400052c
 80042a0:	24000528 	.word	0x24000528

080042a4 <MBX_Main>:
 \brief    This function is called cyclically to check if a received Mailbox service was
             stored.
*////////////////////////////////////////////////////////////////////////////////////////

void MBX_Main(void)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
    TMBX MBXMEM *pMbx = NULL;
 80042aa:	2300      	movs	r3, #0
 80042ac:	603b      	str	r3, [r7, #0]

    do
    {
        UINT8 result = 0;
 80042ae:	2300      	movs	r3, #0
 80042b0:	71fb      	strb	r3, [r7, #7]

        pMbx = GetOutOfMbxQueue(&sMbxReceiveQueue);
 80042b2:	4818      	ldr	r0, [pc, #96]	@ (8004314 <MBX_Main+0x70>)
 80042b4:	f7ff fb63 	bl	800397e <GetOutOfMbxQueue>
 80042b8:	6038      	str	r0, [r7, #0]
        if ( pMbx )
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d004      	beq.n	80042ca <MBX_Main+0x26>
        {
            result = MailboxServiceInd(pMbx);
 80042c0:	6838      	ldr	r0, [r7, #0]
 80042c2:	f7ff fd2d 	bl	8003d20 <MailboxServiceInd>
 80042c6:	4603      	mov	r3, r0
 80042c8:	71fb      	strb	r3, [r7, #7]
        }

        if ( result != 0 )
 80042ca:	79fb      	ldrb	r3, [r7, #7]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d014      	beq.n	80042fa <MBX_Main+0x56>
        {
            /* Mailbox error response: type 0 (mailbox service protocol) */
            pMbx->MbxHeader.Length     = 4;
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	2204      	movs	r2, #4
 80042d4:	801a      	strh	r2, [r3, #0]
            pMbx->MbxHeader.Flags[MBX_OFFS_TYPE]        &= ~(MBX_MASK_TYPE);
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	889b      	ldrh	r3, [r3, #4]
 80042da:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80042de:	b29a      	uxth	r2, r3
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	809a      	strh	r2, [r3, #4]
            pMbx->Data[0]                        = SWAPWORD(MBXSERVICE_MBXERRORCMD);
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	2201      	movs	r2, #1
 80042e8:	80da      	strh	r2, [r3, #6]
            pMbx->Data[1]                        = SWAPWORD(result);
 80042ea:	79fb      	ldrb	r3, [r7, #7]
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	811a      	strh	r2, [r3, #8]
            MBX_MailboxSendReq(pMbx, 0);
 80042f2:	2100      	movs	r1, #0
 80042f4:	6838      	ldr	r0, [r7, #0]
 80042f6:	f7ff fe37 	bl	8003f68 <MBX_MailboxSendReq>
        }
    }
    while ( pMbx != NULL );
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1d6      	bne.n	80042ae <MBX_Main+0xa>


    if (bReceiveMbxIsLocked)
 8004300:	4b05      	ldr	r3, [pc, #20]	@ (8004318 <MBX_Main+0x74>)
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d001      	beq.n	800430c <MBX_Main+0x68>
    {
        /* the work on the receive mailbox is locked, check if it can be unlocked (if all
           mailbox commands has been sent */
        MBX_CheckAndCopyMailbox();
 8004308:	f7ff fe9a 	bl	8004040 <MBX_CheckAndCopyMailbox>
    if (u8MailboxSendReqStored)
    {
        /* there are mailbox services stored to be sent */
    }
/*ECATCHANGE_END(V5.13) EOE1*/
}
 800430c:	bf00      	nop
 800430e:	3708      	adds	r7, #8
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}
 8004314:	2400056c 	.word	0x2400056c
 8004318:	24000515 	.word	0x24000515

0800431c <OBJ_GetObjectHandle>:
             and returns a handle if found.

*////////////////////////////////////////////////////////////////////////////////////////

OBJCONST TOBJECT OBJMEM *  OBJ_GetObjectHandle( UINT16 index )
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	4603      	mov	r3, r0
 8004324:	80fb      	strh	r3, [r7, #6]
    OBJCONST TOBJECT OBJMEM * pObjEntry = (OBJCONST TOBJECT OBJMEM *) COE_GetObjectDictionary();
 8004326:	f7fc fc3b 	bl	8000ba0 <COE_GetObjectDictionary>
 800432a:	60f8      	str	r0, [r7, #12]

    while (pObjEntry!= NULL)
 800432c:	e009      	b.n	8004342 <OBJ_GetObjectHandle+0x26>
    {
        
        if (pObjEntry->Index == index)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	891b      	ldrh	r3, [r3, #8]
 8004332:	88fa      	ldrh	r2, [r7, #6]
 8004334:	429a      	cmp	r2, r3
 8004336:	d101      	bne.n	800433c <OBJ_GetObjectHandle+0x20>
        {
            return pObjEntry;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	e006      	b.n	800434a <OBJ_GetObjectHandle+0x2e>
        }
        pObjEntry = (TOBJECT OBJMEM *) pObjEntry->pNext;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	60fb      	str	r3, [r7, #12]
    while (pObjEntry!= NULL)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d1f2      	bne.n	800432e <OBJ_GetObjectHandle+0x12>
    }
    return 0;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3710      	adds	r7, #16
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <OBJ_GetObjectLength>:

 \brief     This function returns the size of the requested entry. If bCompleteaccess is set the size of the complete object is returned (the returned size is byte packed, gaps based on the used platform/compiler are not taken into account)

*////////////////////////////////////////////////////////////////////////////////////////
UINT32 OBJ_GetObjectLength( UINT16 index, UINT8 subindex, OBJCONST TOBJECT OBJMEM * pObjEntry, UINT8 bCompleteAccess)
{
 8004352:	b480      	push	{r7}
 8004354:	b085      	sub	sp, #20
 8004356:	af00      	add	r7, sp, #0
 8004358:	603a      	str	r2, [r7, #0]
 800435a:	461a      	mov	r2, r3
 800435c:	4603      	mov	r3, r0
 800435e:	80fb      	strh	r3, [r7, #6]
 8004360:	460b      	mov	r3, r1
 8004362:	717b      	strb	r3, [r7, #5]
 8004364:	4613      	mov	r3, r2
 8004366:	713b      	strb	r3, [r7, #4]
    /* get the information of ObjCode and MaxSubindex in local variables to support different types of microcontroller */
    UINT8 objCode = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_OBJCODEMASK) >> OBJFLAGS_OBJCODESHIFT;
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	899b      	ldrh	r3, [r3, #12]
 800436c:	121b      	asrs	r3, r3, #8
 800436e:	b2db      	uxtb	r3, r3
 8004370:	f003 030f 	and.w	r3, r3, #15
 8004374:	727b      	strb	r3, [r7, #9]
    
    UINT8 maxSubindex = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_MAXSUBINDEXMASK) >> OBJFLAGS_MAXSUBINDEXSHIFT;
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	899b      	ldrh	r3, [r3, #12]
 800437a:	723b      	strb	r3, [r7, #8]
    UINT32 size = 0;
 800437c:	2300      	movs	r3, #0
 800437e:	60fb      	str	r3, [r7, #12]

    if ( bCompleteAccess )
 8004380:	793b      	ldrb	r3, [r7, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d044      	beq.n	8004410 <OBJ_GetObjectLength+0xbe>
    {
        if ( objCode == OBJCODE_VAR )
 8004386:	7a7b      	ldrb	r3, [r7, #9]
 8004388:	2b07      	cmp	r3, #7
 800438a:	d101      	bne.n	8004390 <OBJ_GetObjectLength+0x3e>
        {
            return 0;
 800438c:	2300      	movs	r3, #0
 800438e:	e068      	b.n	8004462 <OBJ_GetObjectLength+0x110>
        }
        else if ((objCode == OBJCODE_ARR)
 8004390:	7a7b      	ldrb	r3, [r7, #9]
 8004392:	2b08      	cmp	r3, #8
 8004394:	d118      	bne.n	80043c8 <OBJ_GetObjectLength+0x76>
            )
        {

            /* we have to get the maxSubindex from the actual value of subindex 0,
                which is stored as UINT16 at the beginning of the object's variable */
            maxSubindex = (UINT8) ((UINT16 MBXMEM *) (pObjEntry->pVarPtr))[0];
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	881b      	ldrh	r3, [r3, #0]
 800439c:	723b      	strb	r3, [r7, #8]


            size = pObjEntry->pEntryDesc[1].BitLength *maxSubindex;
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	3306      	adds	r3, #6
 80043a4:	885b      	ldrh	r3, [r3, #2]
 80043a6:	461a      	mov	r2, r3
 80043a8:	7a3b      	ldrb	r3, [r7, #8]
 80043aa:	fb02 f303 	mul.w	r3, r2, r3
 80043ae:	60fb      	str	r3, [r7, #12]

/* no padding required: Bit entries within an array object may overlap byte borders*/

            /* we have to convert the size in bytes */
            size = BIT2BYTE(size);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	3307      	adds	r3, #7
 80043b4:	08db      	lsrs	r3, r3, #3
 80043b6:	60fb      	str	r3, [r7, #12]

            if ( subindex == 0 )
 80043b8:	797b      	ldrb	r3, [r7, #5]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d102      	bne.n	80043c4 <OBJ_GetObjectLength+0x72>
            {
                /* add size for subindex 0 (is transmitted as UINT16) */
                size += 2;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	3302      	adds	r3, #2
 80043c2:	60fb      	str	r3, [r7, #12]
            }
            return size;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	e04c      	b.n	8004462 <OBJ_GetObjectLength+0x110>
/*ECATCHANGE_START(V5.13) COE1*/
            UINT16 i;
/*ECATCHANGE_END(V5.13) COE1*/

            /* add the sizes of all entries */
            for (i = 1; i <= maxSubindex; i++)
 80043c8:	2301      	movs	r3, #1
 80043ca:	817b      	strh	r3, [r7, #10]
 80043cc:	e00f      	b.n	80043ee <OBJ_GetObjectLength+0x9c>
            {
                size += pObjEntry->pEntryDesc[i].BitLength;
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	6919      	ldr	r1, [r3, #16]
 80043d2:	897a      	ldrh	r2, [r7, #10]
 80043d4:	4613      	mov	r3, r2
 80043d6:	005b      	lsls	r3, r3, #1
 80043d8:	4413      	add	r3, r2
 80043da:	005b      	lsls	r3, r3, #1
 80043dc:	440b      	add	r3, r1
 80043de:	885b      	ldrh	r3, [r3, #2]
 80043e0:	461a      	mov	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	4413      	add	r3, r2
 80043e6:	60fb      	str	r3, [r7, #12]
            for (i = 1; i <= maxSubindex; i++)
 80043e8:	897b      	ldrh	r3, [r7, #10]
 80043ea:	3301      	adds	r3, #1
 80043ec:	817b      	strh	r3, [r7, #10]
 80043ee:	7a3b      	ldrb	r3, [r7, #8]
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	897a      	ldrh	r2, [r7, #10]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d9ea      	bls.n	80043ce <OBJ_GetObjectLength+0x7c>
            }
            /* we have to convert the size in bytes */
            size = BIT2BYTE(size);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	3307      	adds	r3, #7
 80043fc:	08db      	lsrs	r3, r3, #3
 80043fe:	60fb      	str	r3, [r7, #12]

            if ( subindex == 0 )
 8004400:	797b      	ldrb	r3, [r7, #5]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d102      	bne.n	800440c <OBJ_GetObjectLength+0xba>
            {
                /* add size for subindex 0 (is transmitted as UINT16) */
                size += 2;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	3302      	adds	r3, #2
 800440a:	60fb      	str	r3, [r7, #12]
            }
            return size;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	e028      	b.n	8004462 <OBJ_GetObjectLength+0x110>
        }
    }
    else
    {
        if ( objCode == OBJCODE_VAR )
 8004410:	7a7b      	ldrb	r3, [r7, #9]
 8004412:	2b07      	cmp	r3, #7
 8004414:	d105      	bne.n	8004422 <OBJ_GetObjectLength+0xd0>
        {

            return (BIT2BYTE(pObjEntry->pEntryDesc->BitLength));
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	885b      	ldrh	r3, [r3, #2]
 800441c:	3307      	adds	r3, #7
 800441e:	10db      	asrs	r3, r3, #3
 8004420:	e01f      	b.n	8004462 <OBJ_GetObjectLength+0x110>

        }
        else if ( subindex == 0 )
 8004422:	797b      	ldrb	r3, [r7, #5]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d101      	bne.n	800442c <OBJ_GetObjectLength+0xda>
        {
            /* for single access subindex 0 is transmitted as UINT8 */
            return 1;
 8004428:	2301      	movs	r3, #1
 800442a:	e01a      	b.n	8004462 <OBJ_GetObjectLength+0x110>
        }
        else if((objCode == OBJCODE_ARR)
 800442c:	7a7b      	ldrb	r3, [r7, #9]
 800442e:	2b08      	cmp	r3, #8
 8004430:	d106      	bne.n	8004440 <OBJ_GetObjectLength+0xee>
            )
        {
            return (BIT2BYTE(pObjEntry->pEntryDesc[1].BitLength));
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	3306      	adds	r3, #6
 8004438:	885b      	ldrh	r3, [r3, #2]
 800443a:	3307      	adds	r3, #7
 800443c:	10db      	asrs	r3, r3, #3
 800443e:	e010      	b.n	8004462 <OBJ_GetObjectLength+0x110>
        }
        else
        {
            {
                if (maxSubindex < subindex)
 8004440:	7a3a      	ldrb	r2, [r7, #8]
 8004442:	797b      	ldrb	r3, [r7, #5]
 8004444:	429a      	cmp	r2, r3
 8004446:	d201      	bcs.n	800444c <OBJ_GetObjectLength+0xfa>
                {
                    return 0;
 8004448:	2300      	movs	r3, #0
 800444a:	e00a      	b.n	8004462 <OBJ_GetObjectLength+0x110>

                }
                else
                {
                    return (BIT2BYTE(pObjEntry->pEntryDesc[subindex].BitLength));
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	6919      	ldr	r1, [r3, #16]
 8004450:	797a      	ldrb	r2, [r7, #5]
 8004452:	4613      	mov	r3, r2
 8004454:	005b      	lsls	r3, r3, #1
 8004456:	4413      	add	r3, r2
 8004458:	005b      	lsls	r3, r3, #1
 800445a:	440b      	add	r3, r1
 800445c:	885b      	ldrh	r3, [r3, #2]
 800445e:	3307      	adds	r3, #7
 8004460:	10db      	asrs	r3, r3, #3
                }
            }
        }
    }
}
 8004462:	4618      	mov	r0, r3
 8004464:	3714      	adds	r7, #20
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
	...

08004470 <OBJ_CopyNumberToString>:
         which shall be initialized with 000

*////////////////////////////////////////////////////////////////////////////////////////

void OBJ_CopyNumberToString(UCHAR MBXMEM *pStr, UINT8 Number)
{
 8004470:	b480      	push	{r7}
 8004472:	b085      	sub	sp, #20
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	460b      	mov	r3, r1
 800447a:	70fb      	strb	r3, [r7, #3]
    UINT8 Modulo;

    pStr[2] = '0';
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	3302      	adds	r3, #2
 8004480:	2230      	movs	r2, #48	@ 0x30
 8004482:	701a      	strb	r2, [r3, #0]
    pStr[0] += (Number / 100);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	781a      	ldrb	r2, [r3, #0]
 8004488:	78fb      	ldrb	r3, [r7, #3]
 800448a:	491d      	ldr	r1, [pc, #116]	@ (8004500 <OBJ_CopyNumberToString+0x90>)
 800448c:	fba1 1303 	umull	r1, r3, r1, r3
 8004490:	095b      	lsrs	r3, r3, #5
 8004492:	b2db      	uxtb	r3, r3
 8004494:	4413      	add	r3, r2
 8004496:	b2da      	uxtb	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	701a      	strb	r2, [r3, #0]
    Modulo = Number % 100;
 800449c:	78fb      	ldrb	r3, [r7, #3]
 800449e:	4a18      	ldr	r2, [pc, #96]	@ (8004500 <OBJ_CopyNumberToString+0x90>)
 80044a0:	fba2 1203 	umull	r1, r2, r2, r3
 80044a4:	0952      	lsrs	r2, r2, #5
 80044a6:	2164      	movs	r1, #100	@ 0x64
 80044a8:	fb01 f202 	mul.w	r2, r1, r2
 80044ac:	1a9b      	subs	r3, r3, r2
 80044ae:	73fb      	strb	r3, [r7, #15]
    pStr[1] += (Modulo / 10);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	3301      	adds	r3, #1
 80044b4:	7819      	ldrb	r1, [r3, #0]
 80044b6:	7bfb      	ldrb	r3, [r7, #15]
 80044b8:	4a12      	ldr	r2, [pc, #72]	@ (8004504 <OBJ_CopyNumberToString+0x94>)
 80044ba:	fba2 2303 	umull	r2, r3, r2, r3
 80044be:	08db      	lsrs	r3, r3, #3
 80044c0:	b2da      	uxtb	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	3301      	adds	r3, #1
 80044c6:	440a      	add	r2, r1
 80044c8:	b2d2      	uxtb	r2, r2
 80044ca:	701a      	strb	r2, [r3, #0]
    pStr[2] += (Modulo % 10);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	3302      	adds	r3, #2
 80044d0:	7818      	ldrb	r0, [r3, #0]
 80044d2:	7bfa      	ldrb	r2, [r7, #15]
 80044d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004504 <OBJ_CopyNumberToString+0x94>)
 80044d6:	fba3 1302 	umull	r1, r3, r3, r2
 80044da:	08d9      	lsrs	r1, r3, #3
 80044dc:	460b      	mov	r3, r1
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	440b      	add	r3, r1
 80044e2:	005b      	lsls	r3, r3, #1
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	b2da      	uxtb	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	3302      	adds	r3, #2
 80044ec:	4402      	add	r2, r0
 80044ee:	b2d2      	uxtb	r2, r2
 80044f0:	701a      	strb	r2, [r3, #0]
}
 80044f2:	bf00      	nop
 80044f4:	3714      	adds	r7, #20
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	51eb851f 	.word	0x51eb851f
 8004504:	cccccccd 	.word	0xcccccccd

08004508 <OBJ_GetNoOfObjects>:
 \brief    The function counts the number of objects of the requested list type

*////////////////////////////////////////////////////////////////////////////////////////

UINT16    OBJ_GetNoOfObjects(UINT8 listType)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b086      	sub	sp, #24
 800450c:	af00      	add	r7, sp, #0
 800450e:	4603      	mov	r3, r0
 8004510:	71fb      	strb	r3, [r7, #7]
    /* the variable listFlags contains the mask used for the ObjAccess in the Entry-Desc
       see the structure TSDOINFOENTRYDESC in sdoserv.h, listType = 0 indicates that
       all objects has to be counted */
    
    UINT16 listFlags = 0x0020 << listType;
 8004512:	79fb      	ldrb	r3, [r7, #7]
 8004514:	2220      	movs	r2, #32
 8004516:	fa02 f303 	lsl.w	r3, r2, r3
 800451a:	81bb      	strh	r3, [r7, #12]
    
    /* set pObjEntry to the beginning of the object dictionary */
    OBJCONST TOBJECT OBJMEM * pObjEntry = (OBJCONST TOBJECT OBJMEM *) COE_GetObjectDictionary();
 800451c:	f7fc fb40 	bl	8000ba0 <COE_GetObjectDictionary>
 8004520:	6178      	str	r0, [r7, #20]
    UINT16 n = 0;
 8004522:	2300      	movs	r3, #0
 8004524:	827b      	strh	r3, [r7, #18]


    while (pObjEntry != NULL)
 8004526:	e032      	b.n	800458e <OBJ_GetNoOfObjects+0x86>
    {
        /* count the objects of the requested list type */
        if ( pObjEntry->Index >= 0x1000 )
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	891b      	ldrh	r3, [r3, #8]
 800452c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004530:	d32a      	bcc.n	8004588 <OBJ_GetNoOfObjects+0x80>
        {
            UINT8 t = listType;
 8004532:	79fb      	ldrb	r3, [r7, #7]
 8004534:	747b      	strb	r3, [r7, #17]
            if ( t )
 8004536:	7c7b      	ldrb	r3, [r7, #17]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d01f      	beq.n	800457c <OBJ_GetNoOfObjects+0x74>
            {
                UINT8 maxSubindex = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_MAXSUBINDEXMASK) >> OBJFLAGS_MAXSUBINDEXSHIFT;
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	899b      	ldrh	r3, [r3, #12]
 8004540:	72fb      	strb	r3, [r7, #11]
                UINT16 i = 0;
 8004542:	2300      	movs	r3, #0
 8004544:	81fb      	strh	r3, [r7, #14]

                while ( t && i <= maxSubindex )
 8004546:	e011      	b.n	800456c <OBJ_GetNoOfObjects+0x64>
                {
                    if ( OBJ_GetEntryDesc(pObjEntry,(UINT8) i)->ObjAccess & listFlags )
 8004548:	89fb      	ldrh	r3, [r7, #14]
 800454a:	b2db      	uxtb	r3, r3
 800454c:	4619      	mov	r1, r3
 800454e:	6978      	ldr	r0, [r7, #20]
 8004550:	f000 f938 	bl	80047c4 <OBJ_GetEntryDesc>
 8004554:	4603      	mov	r3, r0
 8004556:	889a      	ldrh	r2, [r3, #4]
 8004558:	89bb      	ldrh	r3, [r7, #12]
 800455a:	4013      	ands	r3, r2
 800455c:	b29b      	uxth	r3, r3
 800455e:	2b00      	cmp	r3, #0
 8004560:	d001      	beq.n	8004566 <OBJ_GetNoOfObjects+0x5e>
                    {
                        t = 0;
 8004562:	2300      	movs	r3, #0
 8004564:	747b      	strb	r3, [r7, #17]
                    }
                    i++;
 8004566:	89fb      	ldrh	r3, [r7, #14]
 8004568:	3301      	adds	r3, #1
 800456a:	81fb      	strh	r3, [r7, #14]
                while ( t && i <= maxSubindex )
 800456c:	7c7b      	ldrb	r3, [r7, #17]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d004      	beq.n	800457c <OBJ_GetNoOfObjects+0x74>
 8004572:	7afb      	ldrb	r3, [r7, #11]
 8004574:	b29b      	uxth	r3, r3
 8004576:	89fa      	ldrh	r2, [r7, #14]
 8004578:	429a      	cmp	r2, r3
 800457a:	d9e5      	bls.n	8004548 <OBJ_GetNoOfObjects+0x40>
                }
            }
            if ( !t )
 800457c:	7c7b      	ldrb	r3, [r7, #17]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d102      	bne.n	8004588 <OBJ_GetNoOfObjects+0x80>
            {
                /* object from listType found */
                n++;
 8004582:	8a7b      	ldrh	r3, [r7, #18]
 8004584:	3301      	adds	r3, #1
 8004586:	827b      	strh	r3, [r7, #18]
            }
        }
        /* next object in object dictionary */
        pObjEntry = (TOBJECT OBJMEM *) pObjEntry->pNext;
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	617b      	str	r3, [r7, #20]
    while (pObjEntry != NULL)
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d1c9      	bne.n	8004528 <OBJ_GetNoOfObjects+0x20>
    }

    return n;
 8004594:	8a7b      	ldrh	r3, [r7, #18]
}
 8004596:	4618      	mov	r0, r3
 8004598:	3718      	adds	r7, #24
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
	...

080045a0 <OBJ_GetObjectList>:

 \brief    The function copies (the part of) the object list in the mailbox buffer

*////////////////////////////////////////////////////////////////////////////////////////
UINT16    OBJ_GetObjectList(UINT16 listType, UINT16 *pIndex, UINT16 size, UINT16 MBXMEM *pData,UINT8 *pAbort)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b088      	sub	sp, #32
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60b9      	str	r1, [r7, #8]
 80045a8:	607b      	str	r3, [r7, #4]
 80045aa:	4603      	mov	r3, r0
 80045ac:	81fb      	strh	r3, [r7, #14]
 80045ae:	4613      	mov	r3, r2
 80045b0:	81bb      	strh	r3, [r7, #12]
    /* the variable listFlags contains the mask used for the ObjAccess in the Entry-Desc
       see the structure TSDOINFOENTRYDESC in sdoserv.h, listType = 0 indicates that
       all objects has to be counted */
    UINT16 listFlags = 0x0020 << listType;
 80045b2:	89fb      	ldrh	r3, [r7, #14]
 80045b4:	2220      	movs	r2, #32
 80045b6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ba:	82fb      	strh	r3, [r7, #22]
    OBJCONST TOBJECT OBJMEM * pObjEntry;


    if ( pIndex[0] == 0x1000 )
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	881b      	ldrh	r3, [r3, #0]
 80045c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045c4:	d10c      	bne.n	80045e0 <OBJ_GetObjectList+0x40>
    {
        /* beginning of object list, set pObjEntry to the beginning of the object dictionary */
       pObjEntry = (OBJCONST TOBJECT OBJMEM *) COE_GetObjectDictionary();
 80045c6:	f7fc faeb 	bl	8000ba0 <COE_GetObjectDictionary>
 80045ca:	61f8      	str	r0, [r7, #28]
        // set abort code if no object dictionary is available
        if((pObjEntry == NULL) && (pAbort != NULL))
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d109      	bne.n	80045e6 <OBJ_GetObjectList+0x46>
 80045d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d006      	beq.n	80045e6 <OBJ_GetObjectList+0x46>
        {
            *pAbort = ABORTIDX_NO_OBJECT_DICTIONARY_IS_PRESENT;
 80045d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045da:	221b      	movs	r2, #27
 80045dc:	701a      	strb	r2, [r3, #0]
 80045de:	e002      	b.n	80045e6 <OBJ_GetObjectList+0x46>
        }
    }
    else
    {
        /* next fragment, the next object to be handled was stored in pSdoInfoObjEntry */
        pObjEntry = pSdoInfoObjEntry;
 80045e0:	4b2d      	ldr	r3, [pc, #180]	@ (8004698 <OBJ_GetObjectList+0xf8>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	61fb      	str	r3, [r7, #28]
    }

    if ( pObjEntry != NULL )
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d040      	beq.n	800466e <OBJ_GetObjectList+0xce>
    {
        while (pObjEntry != NULL && size > 1 )
 80045ec:	e039      	b.n	8004662 <OBJ_GetObjectList+0xc2>
        {
            /* get the next index of the requested object list if there is enough space in the mailbox buffer */
            if ( pObjEntry->Index >= 0x1000 )
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	891b      	ldrh	r3, [r3, #8]
 80045f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045f6:	d331      	bcc.n	800465c <OBJ_GetObjectList+0xbc>
            {
                /* UINT8 was changed to UINT16 */
                UINT16 t = listType;
 80045f8:	89fb      	ldrh	r3, [r7, #14]
 80045fa:	837b      	strh	r3, [r7, #26]
                if ( t )
 80045fc:	8b7b      	ldrh	r3, [r7, #26]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d01f      	beq.n	8004642 <OBJ_GetObjectList+0xa2>
                {
                    UINT8 maxSubindex = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_MAXSUBINDEXMASK) >> OBJFLAGS_MAXSUBINDEXSHIFT;
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	899b      	ldrh	r3, [r3, #12]
 8004606:	757b      	strb	r3, [r7, #21]
/*ECATCHANGE_START(V5.13) COE1*/
                    UINT16 i = 0;
 8004608:	2300      	movs	r3, #0
 800460a:	833b      	strh	r3, [r7, #24]
/*ECATCHANGE_END(V5.13) COE1*/

                    while ( t && i <= maxSubindex )
 800460c:	e011      	b.n	8004632 <OBJ_GetObjectList+0x92>
                    {
                        if ( OBJ_GetEntryDesc(pObjEntry, (UINT8)i)->ObjAccess & listFlags )
 800460e:	8b3b      	ldrh	r3, [r7, #24]
 8004610:	b2db      	uxtb	r3, r3
 8004612:	4619      	mov	r1, r3
 8004614:	69f8      	ldr	r0, [r7, #28]
 8004616:	f000 f8d5 	bl	80047c4 <OBJ_GetEntryDesc>
 800461a:	4603      	mov	r3, r0
 800461c:	889a      	ldrh	r2, [r3, #4]
 800461e:	8afb      	ldrh	r3, [r7, #22]
 8004620:	4013      	ands	r3, r2
 8004622:	b29b      	uxth	r3, r3
 8004624:	2b00      	cmp	r3, #0
 8004626:	d001      	beq.n	800462c <OBJ_GetObjectList+0x8c>
                        {
                            t = 0;
 8004628:	2300      	movs	r3, #0
 800462a:	837b      	strh	r3, [r7, #26]
                        }
                        i++;
 800462c:	8b3b      	ldrh	r3, [r7, #24]
 800462e:	3301      	adds	r3, #1
 8004630:	833b      	strh	r3, [r7, #24]
                    while ( t && i <= maxSubindex )
 8004632:	8b7b      	ldrh	r3, [r7, #26]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d004      	beq.n	8004642 <OBJ_GetObjectList+0xa2>
 8004638:	7d7b      	ldrb	r3, [r7, #21]
 800463a:	b29b      	uxth	r3, r3
 800463c:	8b3a      	ldrh	r2, [r7, #24]
 800463e:	429a      	cmp	r2, r3
 8004640:	d9e5      	bls.n	800460e <OBJ_GetObjectList+0x6e>
                    }
                }
                if ( !t )
 8004642:	8b7b      	ldrh	r3, [r7, #26]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d109      	bne.n	800465c <OBJ_GetObjectList+0xbc>
                {
                    /* store the index in the mailbox buffer */
                    *pData = SWAPWORD(pObjEntry->Index);
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	891a      	ldrh	r2, [r3, #8]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	801a      	strh	r2, [r3, #0]
                    pData++;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	3302      	adds	r3, #2
 8004654:	607b      	str	r3, [r7, #4]
                    size -= 2;
 8004656:	89bb      	ldrh	r3, [r7, #12]
 8004658:	3b02      	subs	r3, #2
 800465a:	81bb      	strh	r3, [r7, #12]
                }
            }
        pObjEntry = (TOBJECT OBJMEM *) pObjEntry->pNext;
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	61fb      	str	r3, [r7, #28]
        while (pObjEntry != NULL && size > 1 )
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d002      	beq.n	800466e <OBJ_GetObjectList+0xce>
 8004668:	89bb      	ldrh	r3, [r7, #12]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d8bf      	bhi.n	80045ee <OBJ_GetObjectList+0x4e>
        }
    }

        /* return the next Index to be handled */
        if(pObjEntry != NULL)
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d004      	beq.n	800467e <OBJ_GetObjectList+0xde>
        {
            pIndex[0] = pObjEntry->Index;
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	891a      	ldrh	r2, [r3, #8]
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	801a      	strh	r2, [r3, #0]
 800467c:	e003      	b.n	8004686 <OBJ_GetObjectList+0xe6>
        }
        else
        {
            /*last entry reached*/
            pIndex[0] = 0xFFFF;
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004684:	801a      	strh	r2, [r3, #0]
        }

    /* store object description pointer and index for next fragment */
    pSdoInfoObjEntry = pObjEntry;
 8004686:	4a04      	ldr	r2, [pc, #16]	@ (8004698 <OBJ_GetObjectList+0xf8>)
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	6013      	str	r3, [r2, #0]

    /* return the size of the available mailbox buffer which was not copied to */
    return size;
 800468c:	89bb      	ldrh	r3, [r7, #12]
}
 800468e:	4618      	mov	r0, r3
 8004690:	3720      	adds	r7, #32
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	2400065c 	.word	0x2400065c

0800469c <OBJ_GetDesc>:
                0xFF                                            <br>
            }
*////////////////////////////////////////////////////////////////////////////////////////

UINT16 OBJ_GetDesc( UINT16 index, UINT8 subindex, OBJCONST TOBJECT OBJMEM * pObjEntry, UINT16 MBXMEM * pData )
{
 800469c:	b590      	push	{r4, r7, lr}
 800469e:	b08d      	sub	sp, #52	@ 0x34
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60ba      	str	r2, [r7, #8]
 80046a4:	607b      	str	r3, [r7, #4]
 80046a6:	4603      	mov	r3, r0
 80046a8:	81fb      	strh	r3, [r7, #14]
 80046aa:	460b      	mov	r3, r1
 80046ac:	737b      	strb	r3, [r7, #13]
    UINT16 strSize = 0;
 80046ae:	2300      	movs	r3, #0
 80046b0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    OBJCONST UCHAR OBJMEM * pDesc = (OBJCONST UCHAR OBJMEM *) pObjEntry->pName;
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	627b      	str	r3, [r7, #36]	@ 0x24
/* get the information of ObjCode and MaxSubindex in local variables to support different types of microcontroller */
    UINT8 objCode = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_OBJCODEMASK) >> OBJFLAGS_OBJCODESHIFT;
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	899b      	ldrh	r3, [r3, #12]
 80046bc:	121b      	asrs	r3, r3, #8
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	f003 030f 	and.w	r3, r3, #15
 80046c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23



    if ( (subindex == 0) || (objCode == OBJCODE_VAR) )
 80046c8:	7b7b      	ldrb	r3, [r7, #13]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d003      	beq.n	80046d6 <OBJ_GetDesc+0x3a>
 80046ce:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80046d2:	2b07      	cmp	r3, #7
 80046d4:	d10e      	bne.n	80046f4 <OBJ_GetDesc+0x58>
    {
        // Get object description length
       strSize = (UINT16) OBJSTRLEN((OBJCONST CHAR OBJMEM *) pDesc);
 80046d6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80046d8:	f7fb fdfe 	bl	80002d8 <strlen>
 80046dc:	4603      	mov	r3, r0
 80046de:	85fb      	strh	r3, [r7, #46]	@ 0x2e

        // If there is a pointer given, copy data:
        if ( pData )
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d066      	beq.n	80047b4 <OBJ_GetDesc+0x118>
        {
            OBJTOMBXSTRCPY( pData, pDesc, strSize );
 80046e6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80046e8:	461a      	mov	r2, r3
 80046ea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f006 ffd3 	bl	800b698 <memcpy>
        if ( pData )
 80046f2:	e05f      	b.n	80047b4 <OBJ_GetDesc+0x118>
        }
    }
    else
    {
        if ( objCode == OBJCODE_REC )
 80046f4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80046f8:	2b09      	cmp	r3, #9
 80046fa:	d13b      	bne.n	8004774 <OBJ_GetDesc+0xd8>
        {
            {
            // get pointer to description of subindex 1 :
            // 16bit variable to avoid overflow if subindex 0xFF is read
            UINT16 i = 1;
 80046fc:	2301      	movs	r3, #1
 80046fe:	85bb      	strh	r3, [r7, #44]	@ 0x2c
            UINT16 tmpSubindex = subindex;
 8004700:	7b7b      	ldrb	r3, [r7, #13]
 8004702:	843b      	strh	r3, [r7, #32]

            {

            OBJCONST UCHAR OBJMEM * pSubDesc = (OBJCONST UCHAR OBJMEM *) OBJGETNEXTSTR( pDesc );
 8004704:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004706:	f7fb fde7 	bl	80002d8 <strlen>
 800470a:	4603      	mov	r3, r0
 800470c:	3301      	adds	r3, #1
 800470e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004710:	4413      	add	r3, r2
 8004712:	62bb      	str	r3, [r7, #40]	@ 0x28
            while (( i <= tmpSubindex )
 8004714:	e020      	b.n	8004758 <OBJ_GetDesc+0xbc>
                &&( pSubDesc[0] != 0xFF && pSubDesc[0] != 0xFE 
/* ECATCHANGE_START(V5.13) COE9*/
/* ECATCHANGE_END(V5.13) COE9*/
                    ))
            {
                if ( i == tmpSubindex )
 8004716:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8004718:	8c3b      	ldrh	r3, [r7, #32]
 800471a:	429a      	cmp	r2, r3
 800471c:	d111      	bne.n	8004742 <OBJ_GetDesc+0xa6>
                {
                   strSize = (UINT16) OBJSTRLEN((OBJCONST CHAR OBJMEM *) pSubDesc);
 800471e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004720:	f7fb fdda 	bl	80002d8 <strlen>
 8004724:	4603      	mov	r3, r0
 8004726:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                    if ( pData && strSize )
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d021      	beq.n	8004772 <OBJ_GetDesc+0xd6>
 800472e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004730:	2b00      	cmp	r3, #0
 8004732:	d01e      	beq.n	8004772 <OBJ_GetDesc+0xd6>
                    {
                        OBJTOMBXSTRCPY( pData, pSubDesc, strSize );
 8004734:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004736:	461a      	mov	r2, r3
 8004738:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f006 ffac 	bl	800b698 <memcpy>
                    }
                    break;
 8004740:	e017      	b.n	8004772 <OBJ_GetDesc+0xd6>
                }
                else
                {
                    i++;
 8004742:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004744:	3301      	adds	r3, #1
 8004746:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                    pSubDesc = (OBJCONST UCHAR OBJMEM *) OBJGETNEXTSTR( pSubDesc );
 8004748:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800474a:	f7fb fdc5 	bl	80002d8 <strlen>
 800474e:	4603      	mov	r3, r0
 8004750:	3301      	adds	r3, #1
 8004752:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004754:	4413      	add	r3, r2
 8004756:	62bb      	str	r3, [r7, #40]	@ 0x28
                &&( pSubDesc[0] != 0xFF && pSubDesc[0] != 0xFE 
 8004758:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800475a:	8c3b      	ldrh	r3, [r7, #32]
 800475c:	429a      	cmp	r2, r3
 800475e:	d809      	bhi.n	8004774 <OBJ_GetDesc+0xd8>
 8004760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	2bff      	cmp	r3, #255	@ 0xff
 8004766:	d005      	beq.n	8004774 <OBJ_GetDesc+0xd8>
 8004768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	2bfe      	cmp	r3, #254	@ 0xfe
 800476e:	d1d2      	bne.n	8004716 <OBJ_GetDesc+0x7a>
 8004770:	e000      	b.n	8004774 <OBJ_GetDesc+0xd8>
                    break;
 8004772:	bf00      	nop
            }
            }
            }
        }

        if ( strSize == 0 )
 8004774:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004776:	2b00      	cmp	r3, #0
 8004778:	d11c      	bne.n	80047b4 <OBJ_GetDesc+0x118>
        {
            // no string found for subindex x -> name is Subindex x
            strSize =    12;
 800477a:	230c      	movs	r3, #12
 800477c:	85fb      	strh	r3, [r7, #46]	@ 0x2e

            if ( pData )
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d017      	beq.n	80047b4 <OBJ_GetDesc+0x118>
            {
                UCHAR OBJMEM         TmpDescr[13];
                /* ECATCHANGE_START(V5.13) COE4*/
                MEMCPY(TmpDescr, aSubindexDesc, SIZEOF(TmpDescr));
 8004784:	4b0e      	ldr	r3, [pc, #56]	@ (80047c0 <OBJ_GetDesc+0x124>)
 8004786:	f107 0410 	add.w	r4, r7, #16
 800478a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800478c:	c407      	stmia	r4!, {r0, r1, r2}
 800478e:	7023      	strb	r3, [r4, #0]
                /* ECATCHANGE_END(V5.13) COE4*/
                
                OBJ_CopyNumberToString( &TmpDescr[9], subindex );
 8004790:	7b7a      	ldrb	r2, [r7, #13]
 8004792:	f107 0310 	add.w	r3, r7, #16
 8004796:	3309      	adds	r3, #9
 8004798:	4611      	mov	r1, r2
 800479a:	4618      	mov	r0, r3
 800479c:	f7ff fe68 	bl	8004470 <OBJ_CopyNumberToString>
                MBXSTRCPY( pData, TmpDescr, SIZEOF(TmpDescr) );
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	461c      	mov	r4, r3
 80047a4:	f107 0310 	add.w	r3, r7, #16
 80047a8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80047aa:	6020      	str	r0, [r4, #0]
 80047ac:	6061      	str	r1, [r4, #4]
 80047ae:	60a2      	str	r2, [r4, #8]
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	7323      	strb	r3, [r4, #12]
            }
        }
    }

    return strSize;
 80047b4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3734      	adds	r7, #52	@ 0x34
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd90      	pop	{r4, r7, pc}
 80047be:	bf00      	nop
 80047c0:	2400039c 	.word	0x2400039c

080047c4 <OBJ_GetEntryDesc>:
         to define the object dictionary independent of the sdoserv-files

*////////////////////////////////////////////////////////////////////////////////////////

OBJCONST TSDOINFOENTRYDESC OBJMEM * OBJ_GetEntryDesc(OBJCONST TOBJECT OBJMEM * pObjEntry, UINT8 Subindex)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	460b      	mov	r3, r1
 80047ce:	70fb      	strb	r3, [r7, #3]
    OBJCONST TSDOINFOENTRYDESC OBJMEM *pEntry;
    UINT8 objCode = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_OBJCODEMASK) >> OBJFLAGS_OBJCODESHIFT;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	899b      	ldrh	r3, [r3, #12]
 80047d4:	121b      	asrs	r3, r3, #8
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	f003 030f 	and.w	r3, r3, #15
 80047dc:	72fb      	strb	r3, [r7, #11]

    if ((objCode == OBJCODE_ARR)
 80047de:	7afb      	ldrb	r3, [r7, #11]
 80047e0:	2b08      	cmp	r3, #8
 80047e2:	d10b      	bne.n	80047fc <OBJ_GetEntryDesc+0x38>
        )
    {
        /* object is an array */
        if ( Subindex == 0 )
 80047e4:	78fb      	ldrb	r3, [r7, #3]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d103      	bne.n	80047f2 <OBJ_GetEntryDesc+0x2e>
        {
            /* subindex 0 has a description */
            pEntry = &pObjEntry->pEntryDesc[0];
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	60fb      	str	r3, [r7, #12]
 80047f0:	e00d      	b.n	800480e <OBJ_GetEntryDesc+0x4a>
        }
        else
        {
            /* and all other elements have the same description */
            pEntry = &pObjEntry->pEntryDesc[1];
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	3306      	adds	r3, #6
 80047f8:	60fb      	str	r3, [r7, #12]
 80047fa:	e008      	b.n	800480e <OBJ_GetEntryDesc+0x4a>
    }
    else
    {
        {
            /* object is a variable or a record return the corresponding entry */
            pEntry = &pObjEntry->pEntryDesc[Subindex];
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6919      	ldr	r1, [r3, #16]
 8004800:	78fa      	ldrb	r2, [r7, #3]
 8004802:	4613      	mov	r3, r2
 8004804:	005b      	lsls	r3, r3, #1
 8004806:	4413      	add	r3, r2
 8004808:	005b      	lsls	r3, r3, #1
 800480a:	440b      	add	r3, r1
 800480c:	60fb      	str	r3, [r7, #12]
        }
    }

    return pEntry;
 800480e:	68fb      	ldr	r3, [r7, #12]
}
 8004810:	4618      	mov	r0, r3
 8004812:	3714      	adds	r7, #20
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <OBJ_GetObjDesc>:
         to define the object dictionary independent of the sdoserv-files

*////////////////////////////////////////////////////////////////////////////////////////

OBJCONST TSDOINFOOBJDESC OBJMEM * OBJ_GetObjDesc(OBJCONST TOBJECT OBJMEM * pObjEntry)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
    return &pObjEntry->ObjDesc;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	330a      	adds	r3, #10
}
 8004828:	4618      	mov	r0, r3
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <OBJ_GetEntryOffset>:

 \brief    This function calculates the bit offset of the entry in the object's variable
*////////////////////////////////////////////////////////////////////////////////////////

UINT16 OBJ_GetEntryOffset(UINT8 subindex, OBJCONST TOBJECT OBJMEM * pObjEntry)
{
 8004834:	b480      	push	{r7}
 8004836:	b087      	sub	sp, #28
 8004838:	af00      	add	r7, sp, #0
 800483a:	4603      	mov	r3, r0
 800483c:	6039      	str	r1, [r7, #0]
 800483e:	71fb      	strb	r3, [r7, #7]
    UINT16 i;
    /* bitOffset will be initialized with the bit offset of subindex 1 */
    UINT16 bitOffset = 0;
 8004840:	2300      	movs	r3, #0
 8004842:	82bb      	strh	r3, [r7, #20]
    UINT8 objCode = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_OBJCODEMASK) >> OBJFLAGS_OBJCODESHIFT;
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	899b      	ldrh	r3, [r3, #12]
 8004848:	121b      	asrs	r3, r3, #8
 800484a:	b2db      	uxtb	r3, r3
 800484c:	f003 030f 	and.w	r3, r3, #15
 8004850:	73fb      	strb	r3, [r7, #15]
    OBJCONST TSDOINFOENTRYDESC OBJMEM *pEntry;

    
    if(subindex > 0)
 8004852:	79fb      	ldrb	r3, [r7, #7]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d002      	beq.n	800485e <OBJ_GetEntryOffset+0x2a>
    {
        /*subindex 1 has an offset of 16Bit (even if Si0 is only an UINT8) */
        bitOffset +=16;
 8004858:	8abb      	ldrh	r3, [r7, #20]
 800485a:	3310      	adds	r3, #16
 800485c:	82bb      	strh	r3, [r7, #20]
    }

    if (objCode == OBJCODE_VAR)
 800485e:	7bfb      	ldrb	r3, [r7, #15]
 8004860:	2b07      	cmp	r3, #7
 8004862:	d101      	bne.n	8004868 <OBJ_GetEntryOffset+0x34>
    {
        return 0;
 8004864:	2300      	movs	r3, #0
 8004866:	e0d0      	b.n	8004a0a <OBJ_GetEntryOffset+0x1d6>
    }

    for (i = 1; i <= subindex; i++)
 8004868:	2301      	movs	r3, #1
 800486a:	82fb      	strh	r3, [r7, #22]
 800486c:	e0c6      	b.n	80049fc <OBJ_GetEntryOffset+0x1c8>
    {
        /* get the entry description */
        if ((objCode == OBJCODE_ARR)
 800486e:	7bfb      	ldrb	r3, [r7, #15]
 8004870:	2b08      	cmp	r3, #8
 8004872:	d104      	bne.n	800487e <OBJ_GetEntryOffset+0x4a>
           )
           {
            pEntry = &pObjEntry->pEntryDesc[1];
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	3306      	adds	r3, #6
 800487a:	613b      	str	r3, [r7, #16]
 800487c:	e008      	b.n	8004890 <OBJ_GetEntryOffset+0x5c>
           }
        else
        {
            pEntry = &pObjEntry->pEntryDesc[i];
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	6919      	ldr	r1, [r3, #16]
 8004882:	8afa      	ldrh	r2, [r7, #22]
 8004884:	4613      	mov	r3, r2
 8004886:	005b      	lsls	r3, r3, #1
 8004888:	4413      	add	r3, r2
 800488a:	005b      	lsls	r3, r3, #1
 800488c:	440b      	add	r3, r1
 800488e:	613b      	str	r3, [r7, #16]
        }

        switch (pEntry->DataType)
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	881b      	ldrh	r3, [r3, #0]
 8004894:	f5b3 7f19 	cmp.w	r3, #612	@ 0x264
 8004898:	f280 809b 	bge.w	80049d2 <OBJ_GetEntryOffset+0x19e>
 800489c:	f240 2262 	movw	r2, #610	@ 0x262
 80048a0:	4293      	cmp	r3, r2
 80048a2:	da66      	bge.n	8004972 <OBJ_GetEntryOffset+0x13e>
 80048a4:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 80048a8:	d045      	beq.n	8004936 <OBJ_GetEntryOffset+0x102>
 80048aa:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 80048ae:	f300 8090 	bgt.w	80049d2 <OBJ_GetEntryOffset+0x19e>
 80048b2:	2b0b      	cmp	r3, #11
 80048b4:	dc3a      	bgt.n	800492c <OBJ_GetEntryOffset+0xf8>
 80048b6:	2b03      	cmp	r3, #3
 80048b8:	da21      	bge.n	80048fe <OBJ_GetEntryOffset+0xca>
 80048ba:	e08a      	b.n	80049d2 <OBJ_GetEntryOffset+0x19e>
 80048bc:	3b11      	subs	r3, #17
 80048be:	2201      	movs	r2, #1
 80048c0:	fa02 f303 	lsl.w	r3, r2, r3
 80048c4:	f240 4211 	movw	r2, #1041	@ 0x411
 80048c8:	401a      	ands	r2, r3
 80048ca:	2a00      	cmp	r2, #0
 80048cc:	bf14      	ite	ne
 80048ce:	2201      	movne	r2, #1
 80048d0:	2200      	moveq	r2, #0
 80048d2:	b2d2      	uxtb	r2, r2
 80048d4:	2a00      	cmp	r2, #0
 80048d6:	d16d      	bne.n	80049b4 <OBJ_GetEntryOffset+0x180>
 80048d8:	4a4f      	ldr	r2, [pc, #316]	@ (8004a18 <OBJ_GetEntryOffset+0x1e4>)
 80048da:	401a      	ands	r2, r3
 80048dc:	2a00      	cmp	r2, #0
 80048de:	bf14      	ite	ne
 80048e0:	2201      	movne	r2, #1
 80048e2:	2200      	moveq	r2, #0
 80048e4:	b2d2      	uxtb	r2, r2
 80048e6:	2a00      	cmp	r2, #0
 80048e8:	d143      	bne.n	8004972 <OBJ_GetEntryOffset+0x13e>
 80048ea:	4a4c      	ldr	r2, [pc, #304]	@ (8004a1c <OBJ_GetEntryOffset+0x1e8>)
 80048ec:	401a      	ands	r2, r3
 80048ee:	2a00      	cmp	r2, #0
 80048f0:	bf14      	ite	ne
 80048f2:	2301      	movne	r3, #1
 80048f4:	2300      	moveq	r3, #0
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d11c      	bne.n	8004936 <OBJ_GetEntryOffset+0x102>
 80048fc:	e069      	b.n	80049d2 <OBJ_GetEntryOffset+0x19e>
 80048fe:	3b03      	subs	r3, #3
 8004900:	2201      	movs	r2, #1
 8004902:	409a      	lsls	r2, r3
 8004904:	f002 0332 	and.w	r3, r2, #50	@ 0x32
 8004908:	2b00      	cmp	r3, #0
 800490a:	bf14      	ite	ne
 800490c:	2301      	movne	r3, #1
 800490e:	2300      	moveq	r3, #0
 8004910:	b2db      	uxtb	r3, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d12d      	bne.n	8004972 <OBJ_GetEntryOffset+0x13e>
 8004916:	f240 1309 	movw	r3, #265	@ 0x109
 800491a:	4013      	ands	r3, r2
 800491c:	2b00      	cmp	r3, #0
 800491e:	bf14      	ite	ne
 8004920:	2301      	movne	r3, #1
 8004922:	2300      	moveq	r3, #0
 8004924:	b2db      	uxtb	r3, r3
 8004926:	2b00      	cmp	r3, #0
 8004928:	d105      	bne.n	8004936 <OBJ_GetEntryOffset+0x102>
 800492a:	e052      	b.n	80049d2 <OBJ_GetEntryOffset+0x19e>
 800492c:	2b2f      	cmp	r3, #47	@ 0x2f
 800492e:	dc50      	bgt.n	80049d2 <OBJ_GetEntryOffset+0x19e>
 8004930:	2b11      	cmp	r3, #17
 8004932:	dac3      	bge.n	80048bc <OBJ_GetEntryOffset+0x88>
 8004934:	e04d      	b.n	80049d2 <OBJ_GetEntryOffset+0x19e>
        case    DEFTYPE_ARRAY_OF_INT :

#if OBJ_WORD_ALIGN    || OBJ_DWORD_ALIGN
            /* the 16-bit variables in the structure are word-aligned,
               align the actual bitOffset to a word */
            bitOffset = (bitOffset+15) & 0xFFF0;
 8004936:	8abb      	ldrh	r3, [r7, #20]
 8004938:	330f      	adds	r3, #15
 800493a:	b29b      	uxth	r3, r3
 800493c:	f023 030f 	bic.w	r3, r3, #15
 8004940:	82bb      	strh	r3, [r7, #20]
#endif


            if (i < subindex)
 8004942:	79fb      	ldrb	r3, [r7, #7]
 8004944:	b29b      	uxth	r3, r3
 8004946:	8afa      	ldrh	r2, [r7, #22]
 8004948:	429a      	cmp	r2, r3
 800494a:	d24d      	bcs.n	80049e8 <OBJ_GetEntryOffset+0x1b4>
            {
                if((pEntry->DataType == DEFTYPE_UNICODE_STRING)
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	881b      	ldrh	r3, [r3, #0]
 8004950:	2b0b      	cmp	r3, #11
 8004952:	d004      	beq.n	800495e <OBJ_GetEntryOffset+0x12a>
                    ||(pEntry->DataType == DEFTYPE_ARRAY_OF_INT))
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	881b      	ldrh	r3, [r3, #0]
 8004958:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800495c:	d105      	bne.n	800496a <OBJ_GetEntryOffset+0x136>
                {
                    bitOffset += pEntry->BitLength;
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	885a      	ldrh	r2, [r3, #2]
 8004962:	8abb      	ldrh	r3, [r7, #20]
 8004964:	4413      	add	r3, r2
 8004966:	82bb      	strh	r3, [r7, #20]
                else
                {
                    bitOffset += 16;
                }
            }
            break;
 8004968:	e03e      	b.n	80049e8 <OBJ_GetEntryOffset+0x1b4>
                    bitOffset += 16;
 800496a:	8abb      	ldrh	r3, [r7, #20]
 800496c:	3310      	adds	r3, #16
 800496e:	82bb      	strh	r3, [r7, #20]
            break;
 8004970:	e03a      	b.n	80049e8 <OBJ_GetEntryOffset+0x1b4>
        case    DEFTYPE_ARRAY_OF_DINT :
        case    DEFTYPE_ARRAY_OF_UDINT:
#if OBJ_DWORD_ALIGN
            /* the 32-bit variables in the structure are dword-aligned,
               align the actual bitOffset to a dword */
            bitOffset = (bitOffset+31) & 0xFFE0;
 8004972:	8abb      	ldrh	r3, [r7, #20]
 8004974:	331f      	adds	r3, #31
 8004976:	b29b      	uxth	r3, r3
 8004978:	f023 031f 	bic.w	r3, r3, #31
 800497c:	82bb      	strh	r3, [r7, #20]
            /* the 32-bit variables in the structure are word-aligned,
               align the actual bitOffset to a word */
            bitOffset = (bitOffset+15) & 0xFFF0;
#endif

            if (i < subindex)
 800497e:	79fb      	ldrb	r3, [r7, #7]
 8004980:	b29b      	uxth	r3, r3
 8004982:	8afa      	ldrh	r2, [r7, #22]
 8004984:	429a      	cmp	r2, r3
 8004986:	d231      	bcs.n	80049ec <OBJ_GetEntryOffset+0x1b8>
            {
                if((pEntry->DataType == DEFTYPE_ARRAY_OF_DINT)
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	881b      	ldrh	r3, [r3, #0]
 800498c:	f240 2262 	movw	r2, #610	@ 0x262
 8004990:	4293      	cmp	r3, r2
 8004992:	d005      	beq.n	80049a0 <OBJ_GetEntryOffset+0x16c>
                    ||(pEntry->DataType == DEFTYPE_ARRAY_OF_UDINT))
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	881b      	ldrh	r3, [r3, #0]
 8004998:	f240 2263 	movw	r2, #611	@ 0x263
 800499c:	4293      	cmp	r3, r2
 800499e:	d105      	bne.n	80049ac <OBJ_GetEntryOffset+0x178>
                {
                    bitOffset += pEntry->BitLength;
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	885a      	ldrh	r2, [r3, #2]
 80049a4:	8abb      	ldrh	r3, [r7, #20]
 80049a6:	4413      	add	r3, r2
 80049a8:	82bb      	strh	r3, [r7, #20]
                else
                {
                   bitOffset += 32;
                }
            }
            break;
 80049aa:	e01f      	b.n	80049ec <OBJ_GetEntryOffset+0x1b8>
                   bitOffset += 32;
 80049ac:	8abb      	ldrh	r3, [r7, #20]
 80049ae:	3320      	adds	r3, #32
 80049b0:	82bb      	strh	r3, [r7, #20]
            break;
 80049b2:	e01b      	b.n	80049ec <OBJ_GetEntryOffset+0x1b8>
        case DEFTYPE_INTEGER64:
        case DEFTYPE_UNSIGNED64:
#if OBJ_DWORD_ALIGN
            /* the 64-bit variables in the structure are dword-aligned,
               align the actual bitOffset to a dword */
            bitOffset = (bitOffset + 31) & 0xFFE0;
 80049b4:	8abb      	ldrh	r3, [r7, #20]
 80049b6:	331f      	adds	r3, #31
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	f023 031f 	bic.w	r3, r3, #31
 80049be:	82bb      	strh	r3, [r7, #20]
            /* the 64-bit variables in the structure are word-aligned,
               align the actual bitOffset to a word */
            bitOffset = (bitOffset + 15) & 0xFFF0;
#endif

            if (i < subindex)
 80049c0:	79fb      	ldrb	r3, [r7, #7]
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	8afa      	ldrh	r2, [r7, #22]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d212      	bcs.n	80049f0 <OBJ_GetEntryOffset+0x1bc>
            {

                bitOffset += 64;
 80049ca:	8abb      	ldrh	r3, [r7, #20]
 80049cc:	3340      	adds	r3, #64	@ 0x40
 80049ce:	82bb      	strh	r3, [r7, #20]
            }
            break;
 80049d0:	e00e      	b.n	80049f0 <OBJ_GetEntryOffset+0x1bc>
        default:
            /* align the actual bitOffset to a byte */
            if (i < subindex)
 80049d2:	79fb      	ldrb	r3, [r7, #7]
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	8afa      	ldrh	r2, [r7, #22]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d20b      	bcs.n	80049f4 <OBJ_GetEntryOffset+0x1c0>
            {
                bitOffset += pEntry->BitLength;
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	885a      	ldrh	r2, [r3, #2]
 80049e0:	8abb      	ldrh	r3, [r7, #20]
 80049e2:	4413      	add	r3, r2
 80049e4:	82bb      	strh	r3, [r7, #20]
            }
            break;
 80049e6:	e005      	b.n	80049f4 <OBJ_GetEntryOffset+0x1c0>
            break;
 80049e8:	bf00      	nop
 80049ea:	e004      	b.n	80049f6 <OBJ_GetEntryOffset+0x1c2>
            break;
 80049ec:	bf00      	nop
 80049ee:	e002      	b.n	80049f6 <OBJ_GetEntryOffset+0x1c2>
            break;
 80049f0:	bf00      	nop
 80049f2:	e000      	b.n	80049f6 <OBJ_GetEntryOffset+0x1c2>
            break;
 80049f4:	bf00      	nop
    for (i = 1; i <= subindex; i++)
 80049f6:	8afb      	ldrh	r3, [r7, #22]
 80049f8:	3301      	adds	r3, #1
 80049fa:	82fb      	strh	r3, [r7, #22]
 80049fc:	79fb      	ldrb	r3, [r7, #7]
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	8afa      	ldrh	r2, [r7, #22]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	f67f af33 	bls.w	800486e <OBJ_GetEntryOffset+0x3a>
        }
    }

    return bitOffset;
 8004a08:	8abb      	ldrh	r3, [r7, #20]
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	371c      	adds	r7, #28
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	40008000 	.word	0x40008000
 8004a1c:	20004000 	.word	0x20004000

08004a20 <CheckSyncTypeValue>:
 \return    result                Result of the value validation

 \brief    Checks if the new Sync type value is valid
*////////////////////////////////////////////////////////////////////////////////////////
UINT8 CheckSyncTypeValue(UINT16 index, UINT16 NewSyncType)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	4603      	mov	r3, r0
 8004a28:	460a      	mov	r2, r1
 8004a2a:	80fb      	strh	r3, [r7, #6]
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	80bb      	strh	r3, [r7, #4]
    switch (NewSyncType)
 8004a30:	88bb      	ldrh	r3, [r7, #4]
 8004a32:	2b22      	cmp	r3, #34	@ 0x22
 8004a34:	f200 80be 	bhi.w	8004bb4 <CheckSyncTypeValue+0x194>
 8004a38:	a201      	add	r2, pc, #4	@ (adr r2, 8004a40 <CheckSyncTypeValue+0x20>)
 8004a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a3e:	bf00      	nop
 8004a40:	08004acd 	.word	0x08004acd
 8004a44:	08004ad1 	.word	0x08004ad1
 8004a48:	08004b3f 	.word	0x08004b3f
 8004a4c:	08004b73 	.word	0x08004b73
 8004a50:	08004bb5 	.word	0x08004bb5
 8004a54:	08004bb5 	.word	0x08004bb5
 8004a58:	08004bb5 	.word	0x08004bb5
 8004a5c:	08004bb5 	.word	0x08004bb5
 8004a60:	08004bb5 	.word	0x08004bb5
 8004a64:	08004bb5 	.word	0x08004bb5
 8004a68:	08004bb5 	.word	0x08004bb5
 8004a6c:	08004bb5 	.word	0x08004bb5
 8004a70:	08004bb5 	.word	0x08004bb5
 8004a74:	08004bb5 	.word	0x08004bb5
 8004a78:	08004bb5 	.word	0x08004bb5
 8004a7c:	08004bb5 	.word	0x08004bb5
 8004a80:	08004bb5 	.word	0x08004bb5
 8004a84:	08004bb5 	.word	0x08004bb5
 8004a88:	08004bb5 	.word	0x08004bb5
 8004a8c:	08004bb5 	.word	0x08004bb5
 8004a90:	08004bb5 	.word	0x08004bb5
 8004a94:	08004bb5 	.word	0x08004bb5
 8004a98:	08004bb5 	.word	0x08004bb5
 8004a9c:	08004bb5 	.word	0x08004bb5
 8004aa0:	08004bb5 	.word	0x08004bb5
 8004aa4:	08004bb5 	.word	0x08004bb5
 8004aa8:	08004bb5 	.word	0x08004bb5
 8004aac:	08004bb5 	.word	0x08004bb5
 8004ab0:	08004bb5 	.word	0x08004bb5
 8004ab4:	08004bb5 	.word	0x08004bb5
 8004ab8:	08004bb5 	.word	0x08004bb5
 8004abc:	08004bb5 	.word	0x08004bb5
 8004ac0:	08004bb5 	.word	0x08004bb5
 8004ac4:	08004bb5 	.word	0x08004bb5
 8004ac8:	08004b1d 	.word	0x08004b1d
    {
    case SYNCTYPE_FREERUN:
        return 0; //free run sync mode is always accepted
 8004acc:	2300      	movs	r3, #0
 8004ace:	e072      	b.n	8004bb6 <CheckSyncTypeValue+0x196>

    case SYNCTYPE_SM_SYNCHRON:
        if ((index == 0x1C32) 
 8004ad0:	88fb      	ldrh	r3, [r7, #6]
 8004ad2:	f641 4232 	movw	r2, #7218	@ 0x1c32
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d10b      	bne.n	8004af2 <CheckSyncTypeValue+0xd2>
            && (nPdOutputSize > 0) 
 8004ada:	4b3a      	ldr	r3, [pc, #232]	@ (8004bc4 <CheckSyncTypeValue+0x1a4>)
 8004adc:	881b      	ldrh	r3, [r3, #0]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d007      	beq.n	8004af2 <CheckSyncTypeValue+0xd2>
            && ((sSyncManOutPar.u16SyncTypesSupported & SYNCTYPE_SYNCHRONSUPP) > 0))
 8004ae2:	4b39      	ldr	r3, [pc, #228]	@ (8004bc8 <CheckSyncTypeValue+0x1a8>)
 8004ae4:	899b      	ldrh	r3, [r3, #12]
 8004ae6:	f003 0302 	and.w	r3, r3, #2
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	dd01      	ble.n	8004af2 <CheckSyncTypeValue+0xd2>
        {
            /*SyncManager sync mode is supported and output process data is configured*/
            return 0;
 8004aee:	2300      	movs	r3, #0
 8004af0:	e061      	b.n	8004bb6 <CheckSyncTypeValue+0x196>
        }
        else
        if ((index == 0x1C33) 
 8004af2:	88fb      	ldrh	r3, [r7, #6]
 8004af4:	f641 4233 	movw	r2, #7219	@ 0x1c33
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d154      	bne.n	8004ba6 <CheckSyncTypeValue+0x186>
            && ((sSyncManInPar.u16SyncTypesSupported & SYNCTYPE_SYNCHRONSUPP) > 0)
 8004afc:	4b33      	ldr	r3, [pc, #204]	@ (8004bcc <CheckSyncTypeValue+0x1ac>)
 8004afe:	899b      	ldrh	r3, [r3, #12]
 8004b00:	f003 0302 	and.w	r3, r3, #2
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	dd4e      	ble.n	8004ba6 <CheckSyncTypeValue+0x186>
            && (nPdOutputSize == 0) 
 8004b08:	4b2e      	ldr	r3, [pc, #184]	@ (8004bc4 <CheckSyncTypeValue+0x1a4>)
 8004b0a:	881b      	ldrh	r3, [r3, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d14a      	bne.n	8004ba6 <CheckSyncTypeValue+0x186>
            && (nPdInputSize > 0))
 8004b10:	4b2f      	ldr	r3, [pc, #188]	@ (8004bd0 <CheckSyncTypeValue+0x1b0>)
 8004b12:	881b      	ldrh	r3, [r3, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d046      	beq.n	8004ba6 <CheckSyncTypeValue+0x186>
            {
                /*SyncManager sync mode is supported and input only shall be configured*/
                return 0;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	e04c      	b.n	8004bb6 <CheckSyncTypeValue+0x196>
            }
        break;

    case SYNCTYPE_SM2_SYNCHRON:
        if ((index == 0x1C33) 
 8004b1c:	88fb      	ldrh	r3, [r7, #6]
 8004b1e:	f641 4233 	movw	r2, #7219	@ 0x1c33
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d141      	bne.n	8004baa <CheckSyncTypeValue+0x18a>
            && ((sSyncManInPar.u16SyncTypesSupported & SYNCTYPE_SYNCHRONSUPP) > 0)
 8004b26:	4b29      	ldr	r3, [pc, #164]	@ (8004bcc <CheckSyncTypeValue+0x1ac>)
 8004b28:	899b      	ldrh	r3, [r3, #12]
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	dd3b      	ble.n	8004baa <CheckSyncTypeValue+0x18a>
            && (nPdOutputSize > 0))
 8004b32:	4b24      	ldr	r3, [pc, #144]	@ (8004bc4 <CheckSyncTypeValue+0x1a4>)
 8004b34:	881b      	ldrh	r3, [r3, #0]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d037      	beq.n	8004baa <CheckSyncTypeValue+0x18a>
            {
                /*SyncManager sync mode is supported and outputs are defined*/
                return 0;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	e03b      	b.n	8004bb6 <CheckSyncTypeValue+0x196>
            }
        break;

    case SYNCTYPE_DCSYNC0:
        if ((index == 0x1C32) && ((sSyncManOutPar.u16SyncTypesSupported & SYNCTYPE_DCSYNC0SUPP) > 0))
 8004b3e:	88fb      	ldrh	r3, [r7, #6]
 8004b40:	f641 4232 	movw	r2, #7218	@ 0x1c32
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d107      	bne.n	8004b58 <CheckSyncTypeValue+0x138>
 8004b48:	4b1f      	ldr	r3, [pc, #124]	@ (8004bc8 <CheckSyncTypeValue+0x1a8>)
 8004b4a:	899b      	ldrh	r3, [r3, #12]
 8004b4c:	f003 0304 	and.w	r3, r3, #4
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	dd01      	ble.n	8004b58 <CheckSyncTypeValue+0x138>
        {
            return 0;
 8004b54:	2300      	movs	r3, #0
 8004b56:	e02e      	b.n	8004bb6 <CheckSyncTypeValue+0x196>
        }
        else
        if ((index == 0x1C33) && ((sSyncManInPar.u16SyncTypesSupported & SYNCTYPE_DCSYNC0SUPP) > 0))
 8004b58:	88fb      	ldrh	r3, [r7, #6]
 8004b5a:	f641 4233 	movw	r2, #7219	@ 0x1c33
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d125      	bne.n	8004bae <CheckSyncTypeValue+0x18e>
 8004b62:	4b1a      	ldr	r3, [pc, #104]	@ (8004bcc <CheckSyncTypeValue+0x1ac>)
 8004b64:	899b      	ldrh	r3, [r3, #12]
 8004b66:	f003 0304 	and.w	r3, r3, #4
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	dd1f      	ble.n	8004bae <CheckSyncTypeValue+0x18e>
        {
            return 0;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	e021      	b.n	8004bb6 <CheckSyncTypeValue+0x196>
        }
        break;

    case SYNCTYPE_DCSYNC1:
        if ((index == 0x1C32) && ((sSyncManOutPar.u16SyncTypesSupported & SYNCTYPE_DCSYNC1SUPP) > 0))
 8004b72:	88fb      	ldrh	r3, [r7, #6]
 8004b74:	f641 4232 	movw	r2, #7218	@ 0x1c32
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d107      	bne.n	8004b8c <CheckSyncTypeValue+0x16c>
 8004b7c:	4b12      	ldr	r3, [pc, #72]	@ (8004bc8 <CheckSyncTypeValue+0x1a8>)
 8004b7e:	899b      	ldrh	r3, [r3, #12]
 8004b80:	f003 0308 	and.w	r3, r3, #8
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	dd01      	ble.n	8004b8c <CheckSyncTypeValue+0x16c>
        {
            return 0;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	e014      	b.n	8004bb6 <CheckSyncTypeValue+0x196>
        }
        else
        if ((index == 0x1C33) && ((sSyncManInPar.u16SyncTypesSupported & SYNCTYPE_DCSYNC1SUPP) > 0))
 8004b8c:	88fb      	ldrh	r3, [r7, #6]
 8004b8e:	f641 4233 	movw	r2, #7219	@ 0x1c33
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d10d      	bne.n	8004bb2 <CheckSyncTypeValue+0x192>
 8004b96:	4b0d      	ldr	r3, [pc, #52]	@ (8004bcc <CheckSyncTypeValue+0x1ac>)
 8004b98:	899b      	ldrh	r3, [r3, #12]
 8004b9a:	f003 0308 	and.w	r3, r3, #8
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	dd07      	ble.n	8004bb2 <CheckSyncTypeValue+0x192>
        {
            return 0;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	e007      	b.n	8004bb6 <CheckSyncTypeValue+0x196>
        break;
 8004ba6:	bf00      	nop
 8004ba8:	e004      	b.n	8004bb4 <CheckSyncTypeValue+0x194>
        break;
 8004baa:	bf00      	nop
 8004bac:	e002      	b.n	8004bb4 <CheckSyncTypeValue+0x194>
        break;
 8004bae:	bf00      	nop
 8004bb0:	e000      	b.n	8004bb4 <CheckSyncTypeValue+0x194>
        }
        break;
 8004bb2:	bf00      	nop
    } //switch 
    return ABORTIDX_VALUE_EXCEEDED;
 8004bb4:	2312      	movs	r3, #18

}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	240004f6 	.word	0x240004f6
 8004bc8:	240005a8 	.word	0x240005a8
 8004bcc:	240005ec 	.word	0x240005ec
 8004bd0:	240004f4 	.word	0x240004f4

08004bd4 <OBJ_Read>:

 \brief    This function reads the requested object
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 OBJ_Read( UINT16 index, UINT8 subindex, UINT32 objSize, OBJCONST TOBJECT OBJMEM * pObjEntry, UINT16 MBXMEM * pData, UINT8 bCompleteAccess )
{
 8004bd4:	b590      	push	{r4, r7, lr}
 8004bd6:	b093      	sub	sp, #76	@ 0x4c
 8004bd8:	af02      	add	r7, sp, #8
 8004bda:	60ba      	str	r2, [r7, #8]
 8004bdc:	607b      	str	r3, [r7, #4]
 8004bde:	4603      	mov	r3, r0
 8004be0:	81fb      	strh	r3, [r7, #14]
 8004be2:	460b      	mov	r3, r1
 8004be4:	737b      	strb	r3, [r7, #13]
    UINT16 i = subindex;
 8004be6:	7b7b      	ldrb	r3, [r7, #13]
 8004be8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    /* get the information of ObjCode and MaxSubindex in local variables to support different types of microcontroller */
    UINT8 objCode = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_OBJCODEMASK) >> OBJFLAGS_OBJCODESHIFT;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	899b      	ldrh	r3, [r3, #12]
 8004bee:	121b      	asrs	r3, r3, #8
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	f003 030f 	and.w	r3, r3, #15
 8004bf6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    UINT16 maxSubindex = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_MAXSUBINDEXMASK) >> OBJFLAGS_MAXSUBINDEXSHIFT;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	899b      	ldrh	r3, [r3, #12]
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    OBJCONST TSDOINFOENTRYDESC OBJMEM *pEntry;
    /* lastSubindex is used for complete access to make loop over the requested entries
    to be read, we initialize this variable with the requested subindex that only
    one loop will be done for a single access */
    UINT16 lastSubindex = subindex;
 8004c02:	7b7b      	ldrb	r3, [r7, #13]
 8004c04:	877b      	strh	r3, [r7, #58]	@ 0x3a

    if ( objCode != OBJCODE_VAR && index >= 0x1000 )
 8004c06:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004c0a:	2b07      	cmp	r3, #7
 8004c0c:	d008      	beq.n	8004c20 <OBJ_Read+0x4c>
 8004c0e:	89fb      	ldrh	r3, [r7, #14]
 8004c10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c14:	d304      	bcc.n	8004c20 <OBJ_Read+0x4c>
    {
        /* if the object is an array or record we have to get the maxSubindex from the
        actual value of subindex 0, which is stored as UINT16 at the beginning of the
        object's variable */
        maxSubindex = (*((UINT16 *) (pObjEntry->pVarPtr))) & 0x00FF;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	699b      	ldr	r3, [r3, #24]
 8004c1a:	881b      	ldrh	r3, [r3, #0]
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	87bb      	strh	r3, [r7, #60]	@ 0x3c

    }

    if ( bCompleteAccess )
 8004c20:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00c      	beq.n	8004c42 <OBJ_Read+0x6e>
    {
        if ( objCode == OBJCODE_VAR || index < 0x1000 )
 8004c28:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004c2c:	2b07      	cmp	r3, #7
 8004c2e:	d003      	beq.n	8004c38 <OBJ_Read+0x64>
 8004c30:	89fb      	ldrh	r3, [r7, #14]
 8004c32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c36:	d201      	bcs.n	8004c3c <OBJ_Read+0x68>
        {
            /* complete access is not supported with simple objects or ENUM descriptions */
            return ABORTIDX_UNSUPPORTED_ACCESS;
 8004c38:	2305      	movs	r3, #5
 8004c3a:	e33d      	b.n	80052b8 <OBJ_Read+0x6e4>
        }


        /* we read until the maximum subindex */
        lastSubindex = maxSubindex;
 8004c3c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8004c3e:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8004c40:	e02b      	b.n	8004c9a <OBJ_Read+0xc6>
    }
    else
        if ( subindex > maxSubindex )
 8004c42:	7b7b      	ldrb	r3, [r7, #13]
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d201      	bcs.n	8004c50 <OBJ_Read+0x7c>
        {
            /* the maximum subindex is reached */
            return ABORTIDX_SUBINDEX_NOT_EXISTING;
 8004c4c:	2311      	movs	r3, #17
 8004c4e:	e333      	b.n	80052b8 <OBJ_Read+0x6e4>
        }
        else
        {
            /* get the corresponding entry description */
            pEntry = OBJ_GetEntryDesc(pObjEntry, (UINT8)i);
 8004c50:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	4619      	mov	r1, r3
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f7ff fdb4 	bl	80047c4 <OBJ_GetEntryDesc>
 8004c5c:	6278      	str	r0, [r7, #36]	@ 0x24

            /*Check access only for non-align entries*/
            if(pEntry->ObjAccess != 0x0)
 8004c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c60:	889b      	ldrh	r3, [r3, #4]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d017      	beq.n	8004c96 <OBJ_Read+0xc2>
            {
                /* check if we have read access (bits 0-2 (PREOP, SAFEOP, OP) of ObjAccess)
                by comparing with the actual state (bits 1-3 (PREOP, SAFEOP, OP) of AL Status) */
                if (0 == (((UINT8) ((pEntry->ObjAccess & ACCESS_READ)<<1)) & (nAlStatus & STATE_MASK)))
 8004c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c68:	889b      	ldrh	r3, [r3, #4]
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	005b      	lsls	r3, r3, #1
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	f003 020e 	and.w	r2, r3, #14
 8004c74:	4b8e      	ldr	r3, [pc, #568]	@ (8004eb0 <OBJ_Read+0x2dc>)
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	f003 030f 	and.w	r3, r3, #15
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d10b      	bne.n	8004c9a <OBJ_Read+0xc6>
                {
                    /* we don't have read access */
                    if ( (pEntry->ObjAccess & ACCESS_READ) == 0 )
 8004c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c84:	889b      	ldrh	r3, [r3, #4]
 8004c86:	f003 0307 	and.w	r3, r3, #7
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d101      	bne.n	8004c92 <OBJ_Read+0xbe>
                    {
                        /* it is a write only entry */
                        return ABORTIDX_WRITE_ONLY_ENTRY;
 8004c8e:	2306      	movs	r3, #6
 8004c90:	e312      	b.n	80052b8 <OBJ_Read+0x6e4>
                    }
                    else
                    {
                        /* we don't have read access in this state */
                        return ABORTIDX_IN_THIS_STATE_DATA_CANNOT_BE_READ_OR_STORED;
 8004c92:	231a      	movs	r3, #26
 8004c94:	e310      	b.n	80052b8 <OBJ_Read+0x6e4>
                    }
                }
            }
            else
            {
                return ABORTIDX_UNSUPPORTED_ACCESS;
 8004c96:	2305      	movs	r3, #5
 8004c98:	e30e      	b.n	80052b8 <OBJ_Read+0x6e4>
            }

        }

    /* ECATCHANGE_START(V5.13) COE4*/
        if (pAPPL_CoeReadInd != NULL)
 8004c9a:	4b86      	ldr	r3, [pc, #536]	@ (8004eb4 <OBJ_Read+0x2e0>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d006      	beq.n	8004cb0 <OBJ_Read+0xdc>
        {
            pAPPL_CoeReadInd(index, subindex, bCompleteAccess);
 8004ca2:	4b84      	ldr	r3, [pc, #528]	@ (8004eb4 <OBJ_Read+0x2e0>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 8004caa:	7b79      	ldrb	r1, [r7, #13]
 8004cac:	89f8      	ldrh	r0, [r7, #14]
 8004cae:	4798      	blx	r3
        }
        /* ECATCHANGE_END(V5.13) COE4*/

        if ( pObjEntry->Read != NULL )
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	69db      	ldr	r3, [r3, #28]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d00b      	beq.n	8004cd0 <OBJ_Read+0xfc>
        {
            /* Read function is defined, we call the object specific read function */
            return pObjEntry->Read(index, subindex, objSize, pData, bCompleteAccess);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	69dc      	ldr	r4, [r3, #28]
 8004cbc:	7b79      	ldrb	r1, [r7, #13]
 8004cbe:	89f8      	ldrh	r0, [r7, #14]
 8004cc0:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8004cc4:	9300      	str	r3, [sp, #0]
 8004cc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004cc8:	68ba      	ldr	r2, [r7, #8]
 8004cca:	47a0      	blx	r4
 8004ccc:	4603      	mov	r3, r0
 8004cce:	e2f3      	b.n	80052b8 <OBJ_Read+0x6e4>
        }
        else if ( index < 0x1000 && subindex != 0 )
 8004cd0:	89fb      	ldrh	r3, [r7, #14]
 8004cd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cd6:	d27b      	bcs.n	8004dd0 <OBJ_Read+0x1fc>
 8004cd8:	7b7b      	ldrb	r3, [r7, #13]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d078      	beq.n	8004dd0 <OBJ_Read+0x1fc>
        {
            /* an ENUM description is read */
            UINT16 size;
            UINT16 MBXMEM *pVarPtr = (UINT16 MBXMEM *) pObjEntry->pVarPtr;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	699b      	ldr	r3, [r3, #24]
 8004ce2:	637b      	str	r3, [r7, #52]	@ 0x34
            CHAR **p;

            /* we get the corresponding entry description */
            pEntry = OBJ_GetEntryDesc(pObjEntry, subindex);
 8004ce4:	7b7b      	ldrb	r3, [r7, #13]
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f7ff fd6b 	bl	80047c4 <OBJ_GetEntryDesc>
 8004cee:	6278      	str	r0, [r7, #36]	@ 0x24
            size = BIT2BYTE(pEntry->BitLength);
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf2:	885b      	ldrh	r3, [r3, #2]
 8004cf4:	3307      	adds	r3, #7
 8004cf6:	10db      	asrs	r3, r3, #3
 8004cf8:	847b      	strh	r3, [r7, #34]	@ 0x22

            p = (CHAR **) pVarPtr;
 8004cfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cfc:	61fb      	str	r3, [r7, #28]
            pVarPtr = (UINT16 MBXMEM *)p[subindex-1];
 8004cfe:	7b7a      	ldrb	r2, [r7, #13]
 8004d00:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8004d04:	4413      	add	r3, r2
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	69fa      	ldr	r2, [r7, #28]
 8004d0a:	4413      	add	r3, r2
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	637b      	str	r3, [r7, #52]	@ 0x34

            /*ECATCHANGE_START(V5.13) */
            if((((MEM_ADDR)pVarPtr) & 0x1) == 0x1)
 8004d10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d12:	f003 0301 	and.w	r3, r3, #1
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d043      	beq.n	8004da2 <OBJ_Read+0x1ce>
            {
                /*enum is stored at an odd word address*/
/*ECATCHANGE_END(V5.13) */
                UINT16 cnt = 0;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	867b      	strh	r3, [r7, #50]	@ 0x32

                //get last even WORD address
                pVarPtr = (UINT16 MBXMEM *)(((MEM_ADDR)pVarPtr)& ~(MEM_ADDR)0x1);
 8004d1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d20:	f023 0301 	bic.w	r3, r3, #1
 8004d24:	637b      	str	r3, [r7, #52]	@ 0x34

                for(cnt = 0; cnt < (size / 2);cnt++)
 8004d26:	2300      	movs	r3, #0
 8004d28:	867b      	strh	r3, [r7, #50]	@ 0x32
 8004d2a:	e01b      	b.n	8004d64 <OBJ_Read+0x190>
                {
                    //clear destination buffer
                    pData[0] = (pVarPtr[0] & 0xFF00) >> 8;
 8004d2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d2e:	881b      	ldrh	r3, [r3, #0]
 8004d30:	0a1b      	lsrs	r3, r3, #8
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d36:	801a      	strh	r2, [r3, #0]
                    pData[0] |= (pVarPtr[1] & 0xFF) << 8;
 8004d38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d3a:	881b      	ldrh	r3, [r3, #0]
 8004d3c:	b21a      	sxth	r2, r3
 8004d3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d40:	3302      	adds	r3, #2
 8004d42:	881b      	ldrh	r3, [r3, #0]
 8004d44:	021b      	lsls	r3, r3, #8
 8004d46:	b21b      	sxth	r3, r3
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	b21b      	sxth	r3, r3
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d50:	801a      	strh	r2, [r3, #0]

                    pData++;
 8004d52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d54:	3302      	adds	r3, #2
 8004d56:	653b      	str	r3, [r7, #80]	@ 0x50
                    pVarPtr++;
 8004d58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d5a:	3302      	adds	r3, #2
 8004d5c:	637b      	str	r3, [r7, #52]	@ 0x34
                for(cnt = 0; cnt < (size / 2);cnt++)
 8004d5e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004d60:	3301      	adds	r3, #1
 8004d62:	867b      	strh	r3, [r7, #50]	@ 0x32
 8004d64:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004d66:	085b      	lsrs	r3, r3, #1
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d3dd      	bcc.n	8004d2c <OBJ_Read+0x158>
                }

                if((size % 2) == 1)
 8004d70:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004d72:	f003 0301 	and.w	r3, r3, #1
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	f000 829b 	beq.w	80052b4 <OBJ_Read+0x6e0>
                {
                    pData[0] &= 0xFF00; //Clear last Byte
 8004d7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d80:	881b      	ldrh	r3, [r3, #0]
 8004d82:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004d86:	b29a      	uxth	r2, r3
 8004d88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d8a:	801a      	strh	r2, [r3, #0]
                    pData[0] |= (pVarPtr[0] & 0xFF00) >> 8; //Write last byte
 8004d8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d8e:	881a      	ldrh	r2, [r3, #0]
 8004d90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d92:	881b      	ldrh	r3, [r3, #0]
 8004d94:	0a1b      	lsrs	r3, r3, #8
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	b29a      	uxth	r2, r3
 8004d9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d9e:	801a      	strh	r2, [r3, #0]
        {
 8004da0:	e288      	b.n	80052b4 <OBJ_Read+0x6e0>
            else
            {
            // Get enum value (first 32Bit)
/*ECATCHANGE_START(V5.13) */

            pData[0] = pVarPtr[0];
 8004da2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004da4:	881a      	ldrh	r2, [r3, #0]
 8004da6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004da8:	801a      	strh	r2, [r3, #0]
            pData[1] = pVarPtr[1];
 8004daa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004dac:	3302      	adds	r3, #2
 8004dae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004db0:	8852      	ldrh	r2, [r2, #2]
 8004db2:	801a      	strh	r2, [r3, #0]
            pData += 2;
 8004db4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004db6:	3304      	adds	r3, #4
 8004db8:	653b      	str	r3, [r7, #80]	@ 0x50
            pVarPtr += 2;
 8004dba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dbc:	3304      	adds	r3, #4
 8004dbe:	637b      	str	r3, [r7, #52]	@ 0x34
/*ECATCHANGE_END(V5.13) */

            // Get enum description
            OBJTOMBXSTRCPY(pData,pVarPtr,size-4);
 8004dc0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004dc2:	3b04      	subs	r3, #4
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004dc8:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8004dca:	f006 fc65 	bl	800b698 <memcpy>
        {
 8004dce:	e271      	b.n	80052b4 <OBJ_Read+0x6e0>
            }
        }
        else
        {
            UINT8 bRead = 0x0;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
            UINT8 result = 0;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30


            /* a variable object is read */
            for (i = subindex; i <= lastSubindex; i++)
 8004ddc:	7b7b      	ldrb	r3, [r7, #13]
 8004dde:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004de0:	e25c      	b.n	800529c <OBJ_Read+0x6c8>
            {
                /* if only a single entry is requested, this loop will only be done once */
                UINT16 MBXMEM *pVarPtr = (UINT16 MBXMEM *) pObjEntry->pVarPtr;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	699b      	ldr	r3, [r3, #24]
 8004de6:	61bb      	str	r3, [r7, #24]
                UINT16 bitOffset = 0;
 8004de8:	2300      	movs	r3, #0
 8004dea:	85fb      	strh	r3, [r7, #46]	@ 0x2e

                
                if (i == 0)
 8004dec:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d00b      	beq.n	8004e0a <OBJ_Read+0x236>
                {
                    /* subindex 0 is requested, the entry's data is at the beginning of the object's variable */
                }
                else if ( index >= 0x1000 )
 8004df2:	89fb      	ldrh	r3, [r7, #14]
 8004df4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004df8:	d307      	bcc.n	8004e0a <OBJ_Read+0x236>
                {
                    /* subindex 1-n of an variable object is requested, we get the offset of the variable here */
                    bitOffset = OBJ_GetEntryOffset((UINT8)i, pObjEntry);
 8004dfa:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	6879      	ldr	r1, [r7, #4]
 8004e00:	4618      	mov	r0, r3
 8004e02:	f7ff fd17 	bl	8004834 <OBJ_GetEntryOffset>
 8004e06:	4603      	mov	r3, r0
 8004e08:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                }

                /* we increment the variable pointer to the corresponding word address */
                pVarPtr += (bitOffset >> 4);
 8004e0a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004e0c:	091b      	lsrs	r3, r3, #4
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	005b      	lsls	r3, r3, #1
 8004e12:	69ba      	ldr	r2, [r7, #24]
 8004e14:	4413      	add	r3, r2
 8004e16:	61bb      	str	r3, [r7, #24]

                /* get the corresponding entry description */
                pEntry = OBJ_GetEntryDesc(pObjEntry, (UINT8)i);
 8004e18:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f7ff fcd0 	bl	80047c4 <OBJ_GetEntryDesc>
 8004e24:	6278      	str	r0, [r7, #36]	@ 0x24
                if (0 != (((UINT8) ((pEntry->ObjAccess & ACCESS_READ)<<1)) & (nAlStatus & STATE_MASK)) )
 8004e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e28:	889b      	ldrh	r3, [r3, #4]
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	005b      	lsls	r3, r3, #1
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	f003 020e 	and.w	r2, r3, #14
 8004e34:	4b1e      	ldr	r3, [pc, #120]	@ (8004eb0 <OBJ_Read+0x2dc>)
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	f003 030f 	and.w	r3, r3, #15
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	f000 81e4 	beq.w	800520c <OBJ_Read+0x638>
                {
                    if ( i == subindex                                     /* requested entry */
 8004e44:	7b7b      	ldrb	r3, [r7, #13]
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d00a      	beq.n	8004e64 <OBJ_Read+0x290>
                        || (bCompleteAccess && i >= subindex) )       /* complete access and entry should be read */
 8004e4e:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	f000 821f 	beq.w	8005296 <OBJ_Read+0x6c2>
 8004e58:	7b7b      	ldrb	r3, [r7, #13]
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	f0c0 8219 	bcc.w	8005296 <OBJ_Read+0x6c2>
                    {
                        UINT16 bitMask;

                        /* we have to copy the entry */
                        if ( i == 0 && objCode != OBJCODE_VAR )
 8004e64:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d10a      	bne.n	8004e80 <OBJ_Read+0x2ac>
 8004e6a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004e6e:	2b07      	cmp	r3, #7
 8004e70:	d006      	beq.n	8004e80 <OBJ_Read+0x2ac>
                        {
                            /* we read subindex 0 of an array or record */
                            {
                                pData[0] = SWAPWORD((UINT16)maxSubindex);
 8004e72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e74:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8004e76:	801a      	strh	r2, [r3, #0]
                            }

                            /* we increment the destination pointer by 2 because the subindex 0 will be
                            transmitted as UINT16 for a complete access */
                            pData++;
 8004e78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e7a:	3302      	adds	r3, #2
 8004e7c:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e7e:	e20a      	b.n	8005296 <OBJ_Read+0x6c2>
                        }
                        else
                        {
                            UINT16 dataType = pEntry->DataType;
 8004e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e82:	881b      	ldrh	r3, [r3, #0]
 8004e84:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                            
                            if (pEntry->DataType >= 0x700)
 8004e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e88:	881b      	ldrh	r3, [r3, #0]
 8004e8a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004e8e:	d319      	bcc.n	8004ec4 <OBJ_Read+0x2f0>
                            {
                                /* the ENUM data types are defined from index 0x700 in this example
                                convert in standard data type for the read access */
                                if ( pEntry->BitLength <= 8 )
 8004e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e92:	885b      	ldrh	r3, [r3, #2]
 8004e94:	2b08      	cmp	r3, #8
 8004e96:	d804      	bhi.n	8004ea2 <OBJ_Read+0x2ce>
                                {
                                    dataType = DEFTYPE_BIT1-1+pEntry->BitLength;
 8004e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e9a:	885b      	ldrh	r3, [r3, #2]
 8004e9c:	332f      	adds	r3, #47	@ 0x2f
 8004e9e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8004ea0:	e010      	b.n	8004ec4 <OBJ_Read+0x2f0>
                                }
                                else if ( pEntry->BitLength == 16 )
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea4:	885b      	ldrh	r3, [r3, #2]
 8004ea6:	2b10      	cmp	r3, #16
 8004ea8:	d106      	bne.n	8004eb8 <OBJ_Read+0x2e4>
                                {
                                    dataType = DEFTYPE_UNSIGNED16;
 8004eaa:	2306      	movs	r3, #6
 8004eac:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8004eae:	e009      	b.n	8004ec4 <OBJ_Read+0x2f0>
 8004eb0:	240004fc 	.word	0x240004fc
 8004eb4:	24000464 	.word	0x24000464
                                }
                                else if ( pEntry->BitLength == 32 )
 8004eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eba:	885b      	ldrh	r3, [r3, #2]
 8004ebc:	2b20      	cmp	r3, #32
 8004ebe:	d101      	bne.n	8004ec4 <OBJ_Read+0x2f0>
                                {
                                    dataType = DEFTYPE_UNSIGNED32;
 8004ec0:	2307      	movs	r3, #7
 8004ec2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                                }
                            }

                            switch (dataType)
 8004ec4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004ec6:	f5b3 7f19 	cmp.w	r3, #612	@ 0x264
 8004eca:	f280 8194 	bge.w	80051f6 <OBJ_Read+0x622>
 8004ece:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 8004ed2:	f280 813a 	bge.w	800514a <OBJ_Read+0x576>
 8004ed6:	2b37      	cmp	r3, #55	@ 0x37
 8004ed8:	f300 818d 	bgt.w	80051f6 <OBJ_Read+0x622>
 8004edc:	2b1e      	cmp	r3, #30
 8004ede:	da0f      	bge.n	8004f00 <OBJ_Read+0x32c>
 8004ee0:	2b1b      	cmp	r3, #27
 8004ee2:	f300 8188 	bgt.w	80051f6 <OBJ_Read+0x622>
 8004ee6:	2b09      	cmp	r3, #9
 8004ee8:	da2d      	bge.n	8004f46 <OBJ_Read+0x372>
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d078      	beq.n	8004fe0 <OBJ_Read+0x40c>
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	f2c0 8181 	blt.w	80051f6 <OBJ_Read+0x622>
 8004ef4:	2b08      	cmp	r3, #8
 8004ef6:	f300 817e 	bgt.w	80051f6 <OBJ_Read+0x622>
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	dc50      	bgt.n	8004fa0 <OBJ_Read+0x3cc>
 8004efe:	e17a      	b.n	80051f6 <OBJ_Read+0x622>
 8004f00:	3b1e      	subs	r3, #30
 8004f02:	2201      	movs	r2, #1
 8004f04:	fa02 f303 	lsl.w	r3, r2, r3
 8004f08:	4a93      	ldr	r2, [pc, #588]	@ (8005158 <OBJ_Read+0x584>)
 8004f0a:	401a      	ands	r2, r3
 8004f0c:	2a00      	cmp	r2, #0
 8004f0e:	bf14      	ite	ne
 8004f10:	2201      	movne	r2, #1
 8004f12:	2200      	moveq	r2, #0
 8004f14:	b2d2      	uxtb	r2, r2
 8004f16:	2a00      	cmp	r2, #0
 8004f18:	f040 8084 	bne.w	8005024 <OBJ_Read+0x450>
 8004f1c:	4a8f      	ldr	r2, [pc, #572]	@ (800515c <OBJ_Read+0x588>)
 8004f1e:	401a      	ands	r2, r3
 8004f20:	2a00      	cmp	r2, #0
 8004f22:	bf14      	ite	ne
 8004f24:	2201      	movne	r2, #1
 8004f26:	2200      	moveq	r2, #0
 8004f28:	b2d2      	uxtb	r2, r2
 8004f2a:	2a00      	cmp	r2, #0
 8004f2c:	f040 80db 	bne.w	80050e6 <OBJ_Read+0x512>
 8004f30:	4a8b      	ldr	r2, [pc, #556]	@ (8005160 <OBJ_Read+0x58c>)
 8004f32:	401a      	ands	r2, r3
 8004f34:	2a00      	cmp	r2, #0
 8004f36:	bf14      	ite	ne
 8004f38:	2301      	movne	r3, #1
 8004f3a:	2300      	moveq	r3, #0
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	f040 80c2 	bne.w	80050c8 <OBJ_Read+0x4f4>
 8004f44:	e157      	b.n	80051f6 <OBJ_Read+0x622>
 8004f46:	3b09      	subs	r3, #9
 8004f48:	2b12      	cmp	r3, #18
 8004f4a:	f200 8154 	bhi.w	80051f6 <OBJ_Read+0x622>
 8004f4e:	a201      	add	r2, pc, #4	@ (adr r2, 8004f54 <OBJ_Read+0x380>)
 8004f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f54:	080051a9 	.word	0x080051a9
 8004f58:	0800514b 	.word	0x0800514b
 8004f5c:	0800514b 	.word	0x0800514b
 8004f60:	080051f7 	.word	0x080051f7
 8004f64:	080051f7 	.word	0x080051f7
 8004f68:	080051f7 	.word	0x080051f7
 8004f6c:	080051f7 	.word	0x080051f7
 8004f70:	080051f7 	.word	0x080051f7
 8004f74:	0800510f 	.word	0x0800510f
 8004f78:	080051f7 	.word	0x080051f7
 8004f7c:	080051f7 	.word	0x080051f7
 8004f80:	080051f7 	.word	0x080051f7
 8004f84:	0800510f 	.word	0x0800510f
 8004f88:	080051f7 	.word	0x080051f7
 8004f8c:	080051f7 	.word	0x080051f7
 8004f90:	080051f7 	.word	0x080051f7
 8004f94:	080051f7 	.word	0x080051f7
 8004f98:	080051f7 	.word	0x080051f7
 8004f9c:	0800510f 	.word	0x0800510f
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	4093      	lsls	r3, r2
 8004fa6:	f403 72c8 	and.w	r2, r3, #400	@ 0x190
 8004faa:	2a00      	cmp	r2, #0
 8004fac:	bf14      	ite	ne
 8004fae:	2201      	movne	r2, #1
 8004fb0:	2200      	moveq	r2, #0
 8004fb2:	b2d2      	uxtb	r2, r2
 8004fb4:	2a00      	cmp	r2, #0
 8004fb6:	f040 8096 	bne.w	80050e6 <OBJ_Read+0x512>
 8004fba:	f003 0226 	and.w	r2, r3, #38	@ 0x26
 8004fbe:	2a00      	cmp	r2, #0
 8004fc0:	bf14      	ite	ne
 8004fc2:	2201      	movne	r2, #1
 8004fc4:	2200      	moveq	r2, #0
 8004fc6:	b2d2      	uxtb	r2, r2
 8004fc8:	2a00      	cmp	r2, #0
 8004fca:	d12b      	bne.n	8005024 <OBJ_Read+0x450>
 8004fcc:	f003 0348 	and.w	r3, r3, #72	@ 0x48
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	bf14      	ite	ne
 8004fd4:	2301      	movne	r3, #1
 8004fd6:	2300      	moveq	r3, #0
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d174      	bne.n	80050c8 <OBJ_Read+0x4f4>
 8004fde:	e10a      	b.n	80051f6 <OBJ_Read+0x622>
                            {
                            case DEFTYPE_NULL:
                                if(bCompleteAccess)
 8004fe0:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d01b      	beq.n	8005020 <OBJ_Read+0x44c>
                                {
                                    /*Handle alignment entry*/
                                    if (((pEntry->BitLength & 0xF) > 0)
 8004fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fea:	885b      	ldrh	r3, [r3, #2]
 8004fec:	f003 030f 	and.w	r3, r3, #15
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	dd0b      	ble.n	800500c <OBJ_Read+0x438>
                                        && (((bitOffset + pEntry->BitLength) & 0x0F) == 0 ))
 8004ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff6:	885a      	ldrh	r2, [r3, #2]
 8004ff8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004ffa:	4413      	add	r3, r2
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	f003 030f 	and.w	r3, r3, #15
 8005002:	2b00      	cmp	r3, #0
 8005004:	d102      	bne.n	800500c <OBJ_Read+0x438>
                                    {
                                        /* we have reached the UINT16 border */
                                        pData++;
 8005006:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005008:	3302      	adds	r3, #2
 800500a:	653b      	str	r3, [r7, #80]	@ 0x50
                                    }

                                    /*increment WORD offset*/
                                    pData += ((pEntry->BitLength & 0xF0) >> 4);
 800500c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800500e:	885b      	ldrh	r3, [r3, #2]
 8005010:	111b      	asrs	r3, r3, #4
 8005012:	f003 030f 	and.w	r3, r3, #15
 8005016:	005b      	lsls	r3, r3, #1
 8005018:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800501a:	4413      	add	r3, r2
 800501c:	653b      	str	r3, [r7, #80]	@ 0x50
                                }
                                else
                                {
                                    return ABORTIDX_DATA_CANNOT_BE_READ_OR_STORED;
                                }
                                break;
 800501e:	e0f1      	b.n	8005204 <OBJ_Read+0x630>
                                    return ABORTIDX_DATA_CANNOT_BE_READ_OR_STORED;
 8005020:	2318      	movs	r3, #24
 8005022:	e149      	b.n	80052b8 <OBJ_Read+0x6e4>
                            case    DEFTYPE_INTEGER8:
                            case    DEFTYPE_UNSIGNED8:
                            case    DEFTYPE_BYTE :
                                {
                                    /* depending on the bitOffset we have to copy the Hi or the Lo-Byte */
                                    UINT16 TmpValue = 0x0000;
 8005024:	2300      	movs	r3, #0
 8005026:	82fb      	strh	r3, [r7, #22]

                                    
                                    bitMask = cBitMask[pEntry->BitLength] << (bitOffset & 0x0F);
 8005028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800502a:	885b      	ldrh	r3, [r3, #2]
 800502c:	461a      	mov	r2, r3
 800502e:	4b4d      	ldr	r3, [pc, #308]	@ (8005164 <OBJ_Read+0x590>)
 8005030:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005034:	461a      	mov	r2, r3
 8005036:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005038:	f003 030f 	and.w	r3, r3, #15
 800503c:	fa02 f303 	lsl.w	r3, r2, r3
 8005040:	82bb      	strh	r3, [r7, #20]

                                    /*Swap object data (if required); all masks and offsets are defined for little endian format*/
                                    TmpValue = SWAPWORD(pVarPtr[0]);
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	881b      	ldrh	r3, [r3, #0]
 8005046:	82fb      	strh	r3, [r7, #22]

                                    /*Clear pData if the first bits within the WORD memory will be copied*/
                                    if ((bitOffset & 0x0F) == 0) 
 8005048:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800504a:	f003 030f 	and.w	r3, r3, #15
 800504e:	2b00      	cmp	r3, #0
 8005050:	d102      	bne.n	8005058 <OBJ_Read+0x484>
                                    {
                                        pData[0] = 0;
 8005052:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005054:	2200      	movs	r2, #0
 8005056:	801a      	strh	r2, [r3, #0]
                                    }

                                    pData[0] = SWAPWORD(pData[0]);
 8005058:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800505a:	881a      	ldrh	r2, [r3, #0]
 800505c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800505e:	801a      	strh	r2, [r3, #0]

                                    if (bCompleteAccess) 
 8005060:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00a      	beq.n	800507e <OBJ_Read+0x4aa>
                                    {
                                        /*shifting is not required for Complete access because the bits are set to the correct offset by the master*/
                                        pData[0] |= TmpValue & bitMask;
 8005068:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800506a:	881a      	ldrh	r2, [r3, #0]
 800506c:	8af9      	ldrh	r1, [r7, #22]
 800506e:	8abb      	ldrh	r3, [r7, #20]
 8005070:	400b      	ands	r3, r1
 8005072:	b29b      	uxth	r3, r3
 8005074:	4313      	orrs	r3, r2
 8005076:	b29a      	uxth	r2, r3
 8005078:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800507a:	801a      	strh	r2, [r3, #0]
 800507c:	e012      	b.n	80050a4 <OBJ_Read+0x4d0>
                                    }
                                    else
                                    {
                                        /*Shift Bits to the beginning of the mailbox memory*/
                                        pData[0] |= ((TmpValue & bitMask) >> (bitOffset & 0x0F));
 800507e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005080:	881b      	ldrh	r3, [r3, #0]
 8005082:	b21a      	sxth	r2, r3
 8005084:	8af9      	ldrh	r1, [r7, #22]
 8005086:	8abb      	ldrh	r3, [r7, #20]
 8005088:	400b      	ands	r3, r1
 800508a:	b29b      	uxth	r3, r3
 800508c:	4619      	mov	r1, r3
 800508e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005090:	f003 030f 	and.w	r3, r3, #15
 8005094:	fa41 f303 	asr.w	r3, r1, r3
 8005098:	b21b      	sxth	r3, r3
 800509a:	4313      	orrs	r3, r2
 800509c:	b21b      	sxth	r3, r3
 800509e:	b29a      	uxth	r2, r3
 80050a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050a2:	801a      	strh	r2, [r3, #0]
                                    }

                                    pData[0] = SWAPWORD(pData[0]);
 80050a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050a6:	881a      	ldrh	r2, [r3, #0]
 80050a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050aa:	801a      	strh	r2, [r3, #0]
                                    if ( ((bitOffset + pEntry->BitLength) & 0x0F) == 0 )
 80050ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ae:	885a      	ldrh	r2, [r3, #2]
 80050b0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80050b2:	4413      	add	r3, r2
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	f003 030f 	and.w	r3, r3, #15
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	f040 809d 	bne.w	80051fa <OBJ_Read+0x626>
                                    {
                                        /* we have reached the UINT16 border */
                                        pData++;
 80050c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050c2:	3302      	adds	r3, #2
 80050c4:	653b      	str	r3, [r7, #80]	@ 0x50
                                    }

                                }
                                break;
 80050c6:	e098      	b.n	80051fa <OBJ_Read+0x626>
                            case    DEFTYPE_INTEGER16:
                            case    DEFTYPE_UNSIGNED16:
                            case    DEFTYPE_BITARR16:
                            case    DEFTYPE_WORD:

                                if(bitOffset & 0xF)
 80050c8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80050ca:	f003 030f 	and.w	r3, r3, #15
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d001      	beq.n	80050d6 <OBJ_Read+0x502>
                                {
                                    /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                    return ABORTIDX_UNSUPPORTED_ACCESS;
 80050d2:	2305      	movs	r3, #5
 80050d4:	e0f0      	b.n	80052b8 <OBJ_Read+0x6e4>
                                }
                                /* in this example the objects are defined in that way,
                                that the 16 bit type are always starting at an exact WORD offset */
                                pData[0] = SWAPWORD(pVarPtr[0]);
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	881a      	ldrh	r2, [r3, #0]
 80050da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050dc:	801a      	strh	r2, [r3, #0]
                                pData++;
 80050de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050e0:	3302      	adds	r3, #2
 80050e2:	653b      	str	r3, [r7, #80]	@ 0x50
                                break;
 80050e4:	e08e      	b.n	8005204 <OBJ_Read+0x630>
                            case    DEFTYPE_UNSIGNED32:
                            case    DEFTYPE_INTEGER32:
                            case    DEFTYPE_REAL32:
                            case    DEFTYPE_BITARR32:
                            case    DEFTYPE_DWORD:
                                if(bitOffset & 0xF)
 80050e6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80050e8:	f003 030f 	and.w	r3, r3, #15
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d001      	beq.n	80050f4 <OBJ_Read+0x520>
                                {
                                    /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                    return ABORTIDX_UNSUPPORTED_ACCESS;
 80050f0:	2305      	movs	r3, #5
 80050f2:	e0e1      	b.n	80052b8 <OBJ_Read+0x6e4>
                                }

                                /* in this example the objects are defined in that way,
                                that the 32 bit type are always starting at an exact WORD offset */
                                pData[0] = pVarPtr[0];
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	881a      	ldrh	r2, [r3, #0]
 80050f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050fa:	801a      	strh	r2, [r3, #0]
                                pData[1] = pVarPtr[1];
 80050fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050fe:	3302      	adds	r3, #2
 8005100:	69ba      	ldr	r2, [r7, #24]
 8005102:	8852      	ldrh	r2, [r2, #2]
 8005104:	801a      	strh	r2, [r3, #0]
                                pData += 2;
 8005106:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005108:	3304      	adds	r3, #4
 800510a:	653b      	str	r3, [r7, #80]	@ 0x50
                                break;
 800510c:	e07a      	b.n	8005204 <OBJ_Read+0x630>
                            case    DEFTYPE_REAL64:
                            case 	DEFTYPE_INTEGER64:
                            case    DEFTYPE_UNSIGNED64:
                                if(bitOffset & 0xF)
 800510e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005110:	f003 030f 	and.w	r3, r3, #15
 8005114:	2b00      	cmp	r3, #0
 8005116:	d001      	beq.n	800511c <OBJ_Read+0x548>
                                {
                                    /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                    return ABORTIDX_UNSUPPORTED_ACCESS;
 8005118:	2305      	movs	r3, #5
 800511a:	e0cd      	b.n	80052b8 <OBJ_Read+0x6e4>
                                }

                                /* in this example the objects are defined in that way,
                                that the 64 bit type are always starting at an exact WORD offset */
                                pData[0] = pVarPtr[0];
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	881a      	ldrh	r2, [r3, #0]
 8005120:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005122:	801a      	strh	r2, [r3, #0]
                                pData[1] = pVarPtr[1];
 8005124:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005126:	3302      	adds	r3, #2
 8005128:	69ba      	ldr	r2, [r7, #24]
 800512a:	8852      	ldrh	r2, [r2, #2]
 800512c:	801a      	strh	r2, [r3, #0]
                                pData[2] = pVarPtr[2];
 800512e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005130:	3304      	adds	r3, #4
 8005132:	69ba      	ldr	r2, [r7, #24]
 8005134:	8892      	ldrh	r2, [r2, #4]
 8005136:	801a      	strh	r2, [r3, #0]
                                pData[3] = pVarPtr[3];
 8005138:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800513a:	3306      	adds	r3, #6
 800513c:	69ba      	ldr	r2, [r7, #24]
 800513e:	88d2      	ldrh	r2, [r2, #6]
 8005140:	801a      	strh	r2, [r3, #0]
                                pData += 4;
 8005142:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005144:	3308      	adds	r3, #8
 8005146:	653b      	str	r3, [r7, #80]	@ 0x50
                                break;
 8005148:	e05c      	b.n	8005204 <OBJ_Read+0x630>
                            case DEFTYPE_ARRAY_OF_INT :
                            case DEFTYPE_ARRAY_OF_SINT :
                            case DEFTYPE_ARRAY_OF_DINT :
                            case DEFTYPE_ARRAY_OF_UDINT:

                                if(bitOffset & 0xF)
 800514a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800514c:	f003 030f 	and.w	r3, r3, #15
 8005150:	2b00      	cmp	r3, #0
 8005152:	d009      	beq.n	8005168 <OBJ_Read+0x594>
                                {
                                    /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                    return ABORTIDX_UNSUPPORTED_ACCESS;
 8005154:	2305      	movs	r3, #5
 8005156:	e0af      	b.n	80052b8 <OBJ_Read+0x6e4>
 8005158:	03fc8001 	.word	0x03fc8001
 800515c:	00020004 	.word	0x00020004
 8005160:	00010002 	.word	0x00010002
 8005164:	0800bd30 	.word	0x0800bd30
                                }

                                OBJTOMBXMEMCPY(pData, pVarPtr, BIT2BYTE(pEntry->BitLength));
 8005168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800516a:	885b      	ldrh	r3, [r3, #2]
 800516c:	3307      	adds	r3, #7
 800516e:	10db      	asrs	r3, r3, #3
 8005170:	461a      	mov	r2, r3
 8005172:	69b9      	ldr	r1, [r7, #24]
 8005174:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8005176:	f006 fa8f 	bl	800b698 <memcpy>

                                pData += BIT2WORD((pEntry->BitLength & ~0xF));
 800517a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800517c:	885b      	ldrh	r3, [r3, #2]
 800517e:	f023 030f 	bic.w	r3, r3, #15
 8005182:	330f      	adds	r3, #15
 8005184:	111b      	asrs	r3, r3, #4
 8005186:	005b      	lsls	r3, r3, #1
 8005188:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800518a:	4413      	add	r3, r2
 800518c:	653b      	str	r3, [r7, #80]	@ 0x50
                                
                                if((pEntry->BitLength & 0xF) != 0)
 800518e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005190:	885b      	ldrh	r3, [r3, #2]
 8005192:	f003 030f 	and.w	r3, r3, #15
 8005196:	2b00      	cmp	r3, #0
 8005198:	d031      	beq.n	80051fe <OBJ_Read+0x62a>
                                {
                                    /*current entry has an odd word length => clear last byte of next word*/
                                    *pData &= 0xFF;
 800519a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800519c:	881b      	ldrh	r3, [r3, #0]
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	b29a      	uxth	r2, r3
 80051a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051a4:	801a      	strh	r2, [r3, #0]
                                }

                                break;
 80051a6:	e02a      	b.n	80051fe <OBJ_Read+0x62a>
                            case    DEFTYPE_VISIBLESTRING:
                                if(bitOffset & 0xF)
 80051a8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80051aa:	f003 030f 	and.w	r3, r3, #15
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d001      	beq.n	80051b6 <OBJ_Read+0x5e2>
                                {
                                    /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                    return ABORTIDX_UNSUPPORTED_ACCESS;
 80051b2:	2305      	movs	r3, #5
 80051b4:	e080      	b.n	80052b8 <OBJ_Read+0x6e4>
                                }

                                /* in this example the objects are defined in that way,
                                that these types are always starting at an even WORD offset */
                                OBJTOMBXSTRCPY(pData, pVarPtr, BIT2BYTE(pEntry->BitLength));
 80051b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b8:	885b      	ldrh	r3, [r3, #2]
 80051ba:	3307      	adds	r3, #7
 80051bc:	10db      	asrs	r3, r3, #3
 80051be:	461a      	mov	r2, r3
 80051c0:	69b9      	ldr	r1, [r7, #24]
 80051c2:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80051c4:	f006 fa68 	bl	800b698 <memcpy>
                                pData += BIT2WORD((pEntry->BitLength & ~0xF));
 80051c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ca:	885b      	ldrh	r3, [r3, #2]
 80051cc:	f023 030f 	bic.w	r3, r3, #15
 80051d0:	330f      	adds	r3, #15
 80051d2:	111b      	asrs	r3, r3, #4
 80051d4:	005b      	lsls	r3, r3, #1
 80051d6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80051d8:	4413      	add	r3, r2
 80051da:	653b      	str	r3, [r7, #80]	@ 0x50

                                if((pEntry->BitLength & 0xF) != 0)
 80051dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051de:	885b      	ldrh	r3, [r3, #2]
 80051e0:	f003 030f 	and.w	r3, r3, #15
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d00c      	beq.n	8005202 <OBJ_Read+0x62e>
                                {
                                    /*current entry has an odd word length => clear last byte of next word*/
                                    *pData &= 0xFF;
 80051e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051ea:	881b      	ldrh	r3, [r3, #0]
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	b29a      	uxth	r2, r3
 80051f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051f2:	801a      	strh	r2, [r3, #0]
                                }
                                
                                break;
 80051f4:	e005      	b.n	8005202 <OBJ_Read+0x62e>
                            default:
                                /* other data types are not supported from this example */
                                return ABORTIDX_DATA_CANNOT_BE_READ_OR_STORED;
 80051f6:	2318      	movs	r3, #24
 80051f8:	e05e      	b.n	80052b8 <OBJ_Read+0x6e4>
                                break;
 80051fa:	bf00      	nop
 80051fc:	e002      	b.n	8005204 <OBJ_Read+0x630>
                                break;
 80051fe:	bf00      	nop
 8005200:	e000      	b.n	8005204 <OBJ_Read+0x630>
                                break;
 8005202:	bf00      	nop
                            } //switch (deftype)

                            bRead = 1;
 8005204:	2301      	movs	r3, #1
 8005206:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 800520a:	e044      	b.n	8005296 <OBJ_Read+0x6c2>
                    }
                }
                else
                {
                    /*No access to current object entry => shift pData if required*/
                    UINT8 cnt = 0;
 800520c:	2300      	movs	r3, #0
 800520e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

                    /*If this entry is the first in the 16Bit block clear the memory*/
                    if ((bitOffset & 0x0F) == 0) 
 8005212:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005214:	f003 030f 	and.w	r3, r3, #15
 8005218:	2b00      	cmp	r3, #0
 800521a:	d102      	bne.n	8005222 <OBJ_Read+0x64e>
                    {
                        *pData = 0;
 800521c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800521e:	2200      	movs	r2, #0
 8005220:	801a      	strh	r2, [r3, #0]
                    }

                    /*Handle Bit/Byte Offset*/
                    if (((pEntry->BitLength & 0xF) > 0)
 8005222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005224:	885b      	ldrh	r3, [r3, #2]
 8005226:	f003 030f 	and.w	r3, r3, #15
 800522a:	2b00      	cmp	r3, #0
 800522c:	dd0e      	ble.n	800524c <OBJ_Read+0x678>
                        && (((bitOffset + pEntry->BitLength) & 0x0F) == 0 ))
 800522e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005230:	885a      	ldrh	r2, [r3, #2]
 8005232:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005234:	4413      	add	r3, r2
 8005236:	b29b      	uxth	r3, r3
 8005238:	f003 030f 	and.w	r3, r3, #15
 800523c:	2b00      	cmp	r3, #0
 800523e:	d105      	bne.n	800524c <OBJ_Read+0x678>
                    {
                        /* we have reached the UINT16 border */
                        pData++;
 8005240:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005242:	3302      	adds	r3, #2
 8005244:	653b      	str	r3, [r7, #80]	@ 0x50
                        
                        /*Clear new buffer*/
                        *pData = 0;
 8005246:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005248:	2200      	movs	r2, #0
 800524a:	801a      	strh	r2, [r3, #0]
                    }

                    /*increment WORD offset*/
                    for(cnt = 0; cnt <((pEntry->BitLength & 0xF0) >> 4); cnt++)
 800524c:	2300      	movs	r3, #0
 800524e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005252:	e00a      	b.n	800526a <OBJ_Read+0x696>
                    {
                        
                        /*current 16Bit are skipped => clear current buffer */
                        pData++;
 8005254:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005256:	3302      	adds	r3, #2
 8005258:	653b      	str	r3, [r7, #80]	@ 0x50

                        /*Clear new buffer*/
                        *pData = 0;
 800525a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800525c:	2200      	movs	r2, #0
 800525e:	801a      	strh	r2, [r3, #0]
                    for(cnt = 0; cnt <((pEntry->BitLength & 0xF0) >> 4); cnt++)
 8005260:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005264:	3301      	adds	r3, #1
 8005266:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800526a:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800526e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005270:	885b      	ldrh	r3, [r3, #2]
 8005272:	111b      	asrs	r3, r3, #4
 8005274:	f003 030f 	and.w	r3, r3, #15
 8005278:	429a      	cmp	r2, r3
 800527a:	dbeb      	blt.n	8005254 <OBJ_Read+0x680>


                    

                    /* we don't have read access */
                    if ( (pEntry->ObjAccess & ACCESS_READ) == 0 )
 800527c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800527e:	889b      	ldrh	r3, [r3, #4]
 8005280:	f003 0307 	and.w	r3, r3, #7
 8005284:	2b00      	cmp	r3, #0
 8005286:	d103      	bne.n	8005290 <OBJ_Read+0x6bc>
                    {
                        /* it is a write only entry */
                        result = ABORTIDX_WRITE_ONLY_ENTRY;
 8005288:	2306      	movs	r3, #6
 800528a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 800528e:	e002      	b.n	8005296 <OBJ_Read+0x6c2>
                    }
                    else
                    {
                        /* we don't have read access in this state */
                        result = ABORTIDX_IN_THIS_STATE_DATA_CANNOT_BE_READ_OR_STORED;
 8005290:	231a      	movs	r3, #26
 8005292:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
            for (i = subindex; i <= lastSubindex; i++)
 8005296:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005298:	3301      	adds	r3, #1
 800529a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800529c:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800529e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80052a0:	429a      	cmp	r2, r3
 80052a2:	f67f ad9e 	bls.w	8004de2 <OBJ_Read+0x20e>
                    }
                }
            }

            if(bRead == 0)
 80052a6:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d103      	bne.n	80052b6 <OBJ_Read+0x6e2>
            {
                return result;
 80052ae:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80052b2:	e001      	b.n	80052b8 <OBJ_Read+0x6e4>
        {
 80052b4:	bf00      	nop
            }
        }

    return 0;
 80052b6:	2300      	movs	r3, #0
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3744      	adds	r7, #68	@ 0x44
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd90      	pop	{r4, r7, pc}

080052c0 <OBJ_Write>:

 \brief    This function writes the requested object
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 OBJ_Write( UINT16 index, UINT8 subindex, UINT32 dataSize, OBJCONST TOBJECT OBJMEM * pObjEntry, UINT16 MBXMEM * pData, UINT8 bCompleteAccess )
{
 80052c0:	b590      	push	{r4, r7, lr}
 80052c2:	b091      	sub	sp, #68	@ 0x44
 80052c4:	af02      	add	r7, sp, #8
 80052c6:	60ba      	str	r2, [r7, #8]
 80052c8:	607b      	str	r3, [r7, #4]
 80052ca:	4603      	mov	r3, r0
 80052cc:	81fb      	strh	r3, [r7, #14]
 80052ce:	460b      	mov	r3, r1
 80052d0:	737b      	strb	r3, [r7, #13]
    UINT16 i = subindex;
 80052d2:	7b7b      	ldrb	r3, [r7, #13]
 80052d4:	86fb      	strh	r3, [r7, #54]	@ 0x36
    /* get the information of ObjCode and MaxSubindex in local variables to support different types of microcontroller */
    UINT8 objCode = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_OBJCODEMASK) >> OBJFLAGS_OBJCODESHIFT;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	899b      	ldrh	r3, [r3, #12]
 80052da:	121b      	asrs	r3, r3, #8
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	f003 030f 	and.w	r3, r3, #15
 80052e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    UINT16 maxSubindex = 0;
 80052e6:	2300      	movs	r3, #0
 80052e8:	86bb      	strh	r3, [r7, #52]	@ 0x34
    UINT16 maxConfiguredSubindex = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_MAXSUBINDEXMASK) >> OBJFLAGS_MAXSUBINDEXSHIFT; //required to check if value for Subindex0 is valid
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	899b      	ldrh	r3, [r3, #12]
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	843b      	strh	r3, [r7, #32]
    OBJCONST TSDOINFOENTRYDESC OBJMEM *pEntry;
    BOOL bClearSubindex0Required = FALSE;
 80052f2:	2300      	movs	r3, #0
 80052f4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    /* lastSubindex is used for complete access to make loop over the requested entries
       to be read, we initialize this variable with the requested subindex that only
       one loop will be done for a single access */
    UINT16 lastSubindex = subindex;
 80052f8:	7b7b      	ldrb	r3, [r7, #13]
 80052fa:	863b      	strh	r3, [r7, #48]	@ 0x30

    /* if subindex 0 is writable, the maximum subindex should be checked in an object specific function,
        because for the PDO mapping and PDO assign the object shall only be written if subindex 0 is 0. */
    if ( objCode != OBJCODE_VAR )
 80052fc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005300:	2b07      	cmp	r3, #7
 8005302:	d028      	beq.n	8005356 <OBJ_Write+0x96>
    {
        /* if the object is an array or record we have to get the maxSubindex from the
           actual value of subindex 0, which is stored as UINT16 at the beginning of the
            object's variable */
        maxSubindex = (UINT8) ((UINT16 MBXMEM *) (pObjEntry->pVarPtr))[0];
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	699b      	ldr	r3, [r3, #24]
 8005308:	881b      	ldrh	r3, [r3, #0]
 800530a:	b2db      	uxtb	r3, r3
 800530c:	86bb      	strh	r3, [r7, #52]	@ 0x34

        /*If the subindex0 of a PDO assign or PDO mapping object is 0 the maximum subindex is specified by the object description*/
        if(maxSubindex == 0 && (IS_PDO_ASSIGN(index) || IS_RX_PDO(index) || IS_TX_PDO(index) || (index == 0xF030)))
 800530e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8005310:	2b00      	cmp	r3, #0
 8005312:	d120      	bne.n	8005356 <OBJ_Write+0x96>
 8005314:	89fb      	ldrh	r3, [r7, #14]
 8005316:	f641 420f 	movw	r2, #7183	@ 0x1c0f
 800531a:	4293      	cmp	r3, r2
 800531c:	d904      	bls.n	8005328 <OBJ_Write+0x68>
 800531e:	89fb      	ldrh	r3, [r7, #14]
 8005320:	f641 422f 	movw	r2, #7215	@ 0x1c2f
 8005324:	4293      	cmp	r3, r2
 8005326:	d914      	bls.n	8005352 <OBJ_Write+0x92>
 8005328:	89fb      	ldrh	r3, [r7, #14]
 800532a:	f5b3 5fb0 	cmp.w	r3, #5632	@ 0x1600
 800532e:	d303      	bcc.n	8005338 <OBJ_Write+0x78>
 8005330:	89fb      	ldrh	r3, [r7, #14]
 8005332:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8005336:	d30c      	bcc.n	8005352 <OBJ_Write+0x92>
 8005338:	89fb      	ldrh	r3, [r7, #14]
 800533a:	f5b3 5fd0 	cmp.w	r3, #6656	@ 0x1a00
 800533e:	d303      	bcc.n	8005348 <OBJ_Write+0x88>
 8005340:	89fb      	ldrh	r3, [r7, #14]
 8005342:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 8005346:	d304      	bcc.n	8005352 <OBJ_Write+0x92>
 8005348:	89fb      	ldrh	r3, [r7, #14]
 800534a:	f24f 0230 	movw	r2, #61488	@ 0xf030
 800534e:	4293      	cmp	r3, r2
 8005350:	d101      	bne.n	8005356 <OBJ_Write+0x96>
        {
            maxSubindex = maxConfiguredSubindex;
 8005352:	8c3b      	ldrh	r3, [r7, #32]
 8005354:	86bb      	strh	r3, [r7, #52]	@ 0x34
        }
    }


    if ( bCompleteAccess )
 8005356:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800535a:	2b00      	cmp	r3, #0
 800535c:	d012      	beq.n	8005384 <OBJ_Write+0xc4>
    {
        if ( objCode == OBJCODE_VAR )
 800535e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005362:	2b07      	cmp	r3, #7
 8005364:	d101      	bne.n	800536a <OBJ_Write+0xaa>
        {
            /* complete access is not supported with simple objects */
            return ABORTIDX_UNSUPPORTED_ACCESS;
 8005366:	2305      	movs	r3, #5
 8005368:	e37b      	b.n	8005a62 <OBJ_Write+0x7a2>
        }

        if ((subindex == 0) && (dataSize > 0))
 800536a:	7b7b      	ldrb	r3, [r7, #13]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d106      	bne.n	800537e <OBJ_Write+0xbe>
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d003      	beq.n	800537e <OBJ_Write+0xbe>
        {
            /* we change the subindex 0 */
            maxSubindex = (UINT8) SWAPWORD(pData[0]);
 8005376:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005378:	881b      	ldrh	r3, [r3, #0]
 800537a:	b2db      	uxtb	r3, r3
 800537c:	86bb      	strh	r3, [r7, #52]	@ 0x34
        }


        /* we write until the maximum subindex */
        lastSubindex = maxSubindex;
 800537e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8005380:	863b      	strh	r3, [r7, #48]	@ 0x30
 8005382:	e029      	b.n	80053d8 <OBJ_Write+0x118>
    }
    else
    if (subindex > maxSubindex)
 8005384:	7b7b      	ldrb	r3, [r7, #13]
 8005386:	b29b      	uxth	r3, r3
 8005388:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800538a:	429a      	cmp	r2, r3
 800538c:	d201      	bcs.n	8005392 <OBJ_Write+0xd2>
    {
        /* the maximum subindex is reached */
        return ABORTIDX_SUBINDEX_NOT_EXISTING;
 800538e:	2311      	movs	r3, #17
 8005390:	e367      	b.n	8005a62 <OBJ_Write+0x7a2>
    {
        /* we check the write access for single accesses here, a complete write access
           is allowed if at least one entry is writable (in this case the values for the
            read only entries shall be ignored) */
        /* we get the corresponding entry description */
        pEntry = OBJ_GetEntryDesc(pObjEntry, subindex);
 8005392:	7b7b      	ldrb	r3, [r7, #13]
 8005394:	4619      	mov	r1, r3
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f7ff fa14 	bl	80047c4 <OBJ_GetEntryDesc>
 800539c:	61f8      	str	r0, [r7, #28]

        /* check if we have write access (bits 3-5 (PREOP, SAFEOP, OP) of ObjAccess)
           by comparing with the actual state (bits 1-3 (PREOP, SAFEOP, OP) of AL Status) */
        if (0 == (((UINT8)((pEntry->ObjAccess & ACCESS_WRITE) >> 2)) & (nAlStatus & STATE_MASK) ))
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	889b      	ldrh	r3, [r3, #4]
 80053a2:	109b      	asrs	r3, r3, #2
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	f003 020e 	and.w	r2, r3, #14
 80053aa:	4b94      	ldr	r3, [pc, #592]	@ (80055fc <OBJ_Write+0x33c>)
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	f003 030f 	and.w	r3, r3, #15
 80053b2:	4013      	ands	r3, r2
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d10f      	bne.n	80053d8 <OBJ_Write+0x118>
        {
            /* we don't have write access */
            if ( (pEntry->ObjAccess & ACCESS_WRITE) == 0 )
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	889b      	ldrh	r3, [r3, #4]
 80053bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d107      	bne.n	80053d4 <OBJ_Write+0x114>
            {
                if (pEntry->ObjAccess == 0)
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	889b      	ldrh	r3, [r3, #4]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d101      	bne.n	80053d0 <OBJ_Write+0x110>
                {
                        return ABORTIDX_UNSUPPORTED_ACCESS;
 80053cc:	2305      	movs	r3, #5
 80053ce:	e348      	b.n	8005a62 <OBJ_Write+0x7a2>
                }
                else
                {
                        /* it is a read only entry */
                        return ABORTIDX_READ_ONLY_ENTRY;
 80053d0:	2307      	movs	r3, #7
 80053d2:	e346      	b.n	8005a62 <OBJ_Write+0x7a2>
                }
            }
            else
            {
                /* we don't have write access in this state */
                return ABORTIDX_IN_THIS_STATE_DATA_CANNOT_BE_READ_OR_STORED;
 80053d4:	231a      	movs	r3, #26
 80053d6:	e344      	b.n	8005a62 <OBJ_Write+0x7a2>

    }

    /* Subindex 0 shall be set to zero if a single PDO / PDO assign entry is written
    or a complete access without subindex0 is requested */
    if((subindex > 0) &&
 80053d8:	7b7b      	ldrb	r3, [r7, #13]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d029      	beq.n	8005432 <OBJ_Write+0x172>
 80053de:	89fb      	ldrh	r3, [r7, #14]
 80053e0:	f641 420f 	movw	r2, #7183	@ 0x1c0f
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d904      	bls.n	80053f2 <OBJ_Write+0x132>
        (IS_PDO_ASSIGN(index) || IS_RX_PDO(index)|| IS_TX_PDO(index) || (index == 0xF030))
 80053e8:	89fb      	ldrh	r3, [r7, #14]
 80053ea:	f641 422f 	movw	r2, #7215	@ 0x1c2f
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d914      	bls.n	800541c <OBJ_Write+0x15c>
 80053f2:	89fb      	ldrh	r3, [r7, #14]
 80053f4:	f5b3 5fb0 	cmp.w	r3, #5632	@ 0x1600
 80053f8:	d303      	bcc.n	8005402 <OBJ_Write+0x142>
 80053fa:	89fb      	ldrh	r3, [r7, #14]
 80053fc:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8005400:	d30c      	bcc.n	800541c <OBJ_Write+0x15c>
 8005402:	89fb      	ldrh	r3, [r7, #14]
 8005404:	f5b3 5fd0 	cmp.w	r3, #6656	@ 0x1a00
 8005408:	d303      	bcc.n	8005412 <OBJ_Write+0x152>
 800540a:	89fb      	ldrh	r3, [r7, #14]
 800540c:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 8005410:	d304      	bcc.n	800541c <OBJ_Write+0x15c>
 8005412:	89fb      	ldrh	r3, [r7, #14]
 8005414:	f24f 0230 	movw	r2, #61488	@ 0xf030
 8005418:	4293      	cmp	r3, r2
 800541a:	d10a      	bne.n	8005432 <OBJ_Write+0x172>
        )
    {
        /*Check if Subindex0 was cleared before*/
        UINT16 Subindex0 = (*(UINT16 *)pObjEntry->pVarPtr) & 0x00FF;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	699b      	ldr	r3, [r3, #24]
 8005420:	881b      	ldrh	r3, [r3, #0]
 8005422:	b2db      	uxtb	r3, r3
 8005424:	837b      	strh	r3, [r7, #26]
        if(Subindex0 != 0x00)
 8005426:	8b7b      	ldrh	r3, [r7, #26]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d002      	beq.n	8005432 <OBJ_Write+0x172>
        {
            bClearSubindex0Required = TRUE;
 800542c:	2301      	movs	r3, #1
 800542e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        }
    }

    if ( pObjEntry->Write != NULL )
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a1b      	ldr	r3, [r3, #32]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d01d      	beq.n	8005476 <OBJ_Write+0x1b6>
    {
        /* Write function is defined, we call the object specific write function */
        /* ECATCHANGE_START(V5.13) COE4*/
        UINT8 result = 0;
 800543a:	2300      	movs	r3, #0
 800543c:	747b      	strb	r3, [r7, #17]

        result = pObjEntry->Write(index, subindex, dataSize, pData, bCompleteAccess);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a1c      	ldr	r4, [r3, #32]
 8005442:	7b79      	ldrb	r1, [r7, #13]
 8005444:	89f8      	ldrh	r0, [r7, #14]
 8005446:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800544a:	9300      	str	r3, [sp, #0]
 800544c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800544e:	68ba      	ldr	r2, [r7, #8]
 8005450:	47a0      	blx	r4
 8005452:	4603      	mov	r3, r0
 8005454:	747b      	strb	r3, [r7, #17]

        if ((result == 0) && (pAPPL_CoeWriteInd != NULL))
 8005456:	7c7b      	ldrb	r3, [r7, #17]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d10a      	bne.n	8005472 <OBJ_Write+0x1b2>
 800545c:	4b68      	ldr	r3, [pc, #416]	@ (8005600 <OBJ_Write+0x340>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d006      	beq.n	8005472 <OBJ_Write+0x1b2>
        {
            pAPPL_CoeWriteInd(index, subindex, bCompleteAccess);
 8005464:	4b66      	ldr	r3, [pc, #408]	@ (8005600 <OBJ_Write+0x340>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 800546c:	7b79      	ldrb	r1, [r7, #13]
 800546e:	89f8      	ldrh	r0, [r7, #14]
 8005470:	4798      	blx	r3
        }
        
        return result;
 8005472:	7c7b      	ldrb	r3, [r7, #17]
 8005474:	e2f5      	b.n	8005a62 <OBJ_Write+0x7a2>
        /* ECATCHANGE_END(V5.13) COE4*/
    }
    else
    {
        UINT8 bWritten = 0;
 8005476:	2300      	movs	r3, #0
 8005478:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        UINT8 result = ABORTIDX_READ_ONLY_ENTRY;
 800547c:	2307      	movs	r3, #7
 800547e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

        if (dataSize == 0)
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d101      	bne.n	800548c <OBJ_Write+0x1cc>
        {
           return 0; //no error
 8005488:	2300      	movs	r3, #0
 800548a:	e2ea      	b.n	8005a62 <OBJ_Write+0x7a2>
        }

        /* we use the standard write function */
        for (i = subindex; i <= lastSubindex; i++)
 800548c:	7b7b      	ldrb	r3, [r7, #13]
 800548e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005490:	e2cf      	b.n	8005a32 <OBJ_Write+0x772>
        {
            /* if only a single entry is requested, this loop will only be done once */
            UINT16 MBXMEM *pVarPtr = (UINT16 MBXMEM *) pObjEntry->pVarPtr;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	62bb      	str	r3, [r7, #40]	@ 0x28
            UINT16 bitOffset = 0;
 8005498:	2300      	movs	r3, #0
 800549a:	833b      	strh	r3, [r7, #24]

            /* we get the corresponding entry description */
            pEntry = OBJ_GetEntryDesc(pObjEntry,(UINT8) i);
 800549c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	4619      	mov	r1, r3
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f7ff f98e 	bl	80047c4 <OBJ_GetEntryDesc>
 80054a8:	61f8      	str	r0, [r7, #28]

            /*Get the bitOffset before check the access rights to calculate pData offset*/
            bitOffset = OBJ_GetEntryOffset((UINT8)i, pObjEntry);
 80054aa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	6879      	ldr	r1, [r7, #4]
 80054b0:	4618      	mov	r0, r3
 80054b2:	f7ff f9bf 	bl	8004834 <OBJ_GetEntryOffset>
 80054b6:	4603      	mov	r3, r0
 80054b8:	833b      	strh	r3, [r7, #24]

            /* we check if we have write access (bits 3-5 (PREOP, SAFEOP, OP) of ObjAccess)
               by comparing with the actual state (bits 1-3 (PREOP, SAFEOP, OP) of AL Status) */
            if (0 != (((UINT8)((pEntry->ObjAccess & ACCESS_WRITE) >> 2)) & (nAlStatus & STATE_MASK) ))
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	889b      	ldrh	r3, [r3, #4]
 80054be:	109b      	asrs	r3, r3, #2
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	f003 020e 	and.w	r2, r3, #14
 80054c6:	4b4d      	ldr	r3, [pc, #308]	@ (80055fc <OBJ_Write+0x33c>)
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	f003 030f 	and.w	r3, r3, #15
 80054ce:	4013      	ands	r3, r2
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	f000 8287 	beq.w	80059e4 <OBJ_Write+0x724>
            {
                /* we have write access for this entry */
                if (i != 0)
 80054d6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d006      	beq.n	80054ea <OBJ_Write+0x22a>
                {
                    /* we increment the variable pointer to the corresponding word address */
                    pVarPtr += (bitOffset >> 4);
 80054dc:	8b3b      	ldrh	r3, [r7, #24]
 80054de:	091b      	lsrs	r3, r3, #4
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	005b      	lsls	r3, r3, #1
 80054e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054e6:	4413      	add	r3, r2
 80054e8:	62bb      	str	r3, [r7, #40]	@ 0x28
                }


                if ( i == subindex                                     /* requested entry */
 80054ea:	7b7b      	ldrb	r3, [r7, #13]
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d00a      	beq.n	800550a <OBJ_Write+0x24a>
                  || (bCompleteAccess && i >= subindex) )       /* complete access and entry should be read */
 80054f4:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	f000 8297 	beq.w	8005a2c <OBJ_Write+0x76c>
 80054fe:	7b7b      	ldrb	r3, [r7, #13]
 8005500:	b29b      	uxth	r3, r3
 8005502:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005504:	429a      	cmp	r2, r3
 8005506:	f0c0 8291 	bcc.w	8005a2c <OBJ_Write+0x76c>
                {
                    UINT16 bitMask;

                    /* we have to copy the entry */
                    if (i == 0 && objCode != OBJCODE_VAR)
 800550a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800550c:	2b00      	cmp	r3, #0
 800550e:	d115      	bne.n	800553c <OBJ_Write+0x27c>
 8005510:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005514:	2b07      	cmp	r3, #7
 8005516:	d011      	beq.n	800553c <OBJ_Write+0x27c>
                    {
                        /*check if the value for subindex0 is valid */
                        UINT8 NewSubindex0 = (UINT8) SWAPWORD(pData[0]);
 8005518:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800551a:	881b      	ldrh	r3, [r3, #0]
 800551c:	75fb      	strb	r3, [r7, #23]
                        
                        if(maxConfiguredSubindex < NewSubindex0)
 800551e:	7dfb      	ldrb	r3, [r7, #23]
 8005520:	b29b      	uxth	r3, r3
 8005522:	8c3a      	ldrh	r2, [r7, #32]
 8005524:	429a      	cmp	r2, r3
 8005526:	d201      	bcs.n	800552c <OBJ_Write+0x26c>
                        {
                            return ABORTIDX_VALUE_TOO_GREAT;
 8005528:	2313      	movs	r3, #19
 800552a:	e29a      	b.n	8005a62 <OBJ_Write+0x7a2>
                        }

                        /* subindex 0 of an array or record shall be written */
                        pVarPtr[0] = SWAPWORD(pData[0]);
 800552c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800552e:	881a      	ldrh	r2, [r3, #0]
 8005530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005532:	801a      	strh	r2, [r3, #0]
                        /* we increment the destination pointer by 2 because the subindex 0 will be
                           transmitted as UINT16 for a complete access */
                        pData++;
 8005534:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005536:	3302      	adds	r3, #2
 8005538:	64bb      	str	r3, [r7, #72]	@ 0x48
                    {
 800553a:	e24f      	b.n	80059dc <OBJ_Write+0x71c>
                    }
                    else
                    {
                        UINT16 dataType = pEntry->DataType;
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	881b      	ldrh	r3, [r3, #0]
 8005540:	84fb      	strh	r3, [r7, #38]	@ 0x26
                        if (pEntry->DataType >= 0x700)
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	881b      	ldrh	r3, [r3, #0]
 8005546:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800554a:	d315      	bcc.n	8005578 <OBJ_Write+0x2b8>
                        {
                            /* the ENUM data types are defined from index 0x700 in this example
                               convert in standard data type for the write access */
                            if ( pEntry->BitLength <= 8 )
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	885b      	ldrh	r3, [r3, #2]
 8005550:	2b08      	cmp	r3, #8
 8005552:	d804      	bhi.n	800555e <OBJ_Write+0x29e>
                            {
                                dataType = DEFTYPE_BIT1-1+pEntry->BitLength;
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	885b      	ldrh	r3, [r3, #2]
 8005558:	332f      	adds	r3, #47	@ 0x2f
 800555a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800555c:	e00c      	b.n	8005578 <OBJ_Write+0x2b8>
                            }
                            else if ( pEntry->BitLength == 16 )
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	885b      	ldrh	r3, [r3, #2]
 8005562:	2b10      	cmp	r3, #16
 8005564:	d102      	bne.n	800556c <OBJ_Write+0x2ac>
                            {
                                dataType = DEFTYPE_UNSIGNED16;
 8005566:	2306      	movs	r3, #6
 8005568:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800556a:	e005      	b.n	8005578 <OBJ_Write+0x2b8>
                            }
                            else if ( pEntry->BitLength == 32 )
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	885b      	ldrh	r3, [r3, #2]
 8005570:	2b20      	cmp	r3, #32
 8005572:	d101      	bne.n	8005578 <OBJ_Write+0x2b8>
                            {
                                dataType = DEFTYPE_UNSIGNED32;
 8005574:	2307      	movs	r3, #7
 8005576:	84fb      	strh	r3, [r7, #38]	@ 0x26
                            }
                        }

                        switch (dataType)
 8005578:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800557a:	f5b3 7f19 	cmp.w	r3, #612	@ 0x264
 800557e:	f280 822a 	bge.w	80059d6 <OBJ_Write+0x716>
 8005582:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 8005586:	f280 820b 	bge.w	80059a0 <OBJ_Write+0x6e0>
 800558a:	2b37      	cmp	r3, #55	@ 0x37
 800558c:	f300 8223 	bgt.w	80059d6 <OBJ_Write+0x716>
 8005590:	2b1e      	cmp	r3, #30
 8005592:	da10      	bge.n	80055b6 <OBJ_Write+0x2f6>
 8005594:	2b1b      	cmp	r3, #27
 8005596:	f300 821e 	bgt.w	80059d6 <OBJ_Write+0x716>
 800559a:	2b09      	cmp	r3, #9
 800559c:	da38      	bge.n	8005610 <OBJ_Write+0x350>
 800559e:	2b00      	cmp	r3, #0
 80055a0:	f000 8085 	beq.w	80056ae <OBJ_Write+0x3ee>
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	f2c0 8216 	blt.w	80059d6 <OBJ_Write+0x716>
 80055aa:	2b08      	cmp	r3, #8
 80055ac:	f300 8213 	bgt.w	80059d6 <OBJ_Write+0x716>
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	dc5b      	bgt.n	800566c <OBJ_Write+0x3ac>
 80055b4:	e20f      	b.n	80059d6 <OBJ_Write+0x716>
 80055b6:	3b1e      	subs	r3, #30
 80055b8:	2201      	movs	r2, #1
 80055ba:	fa02 f303 	lsl.w	r3, r2, r3
 80055be:	4a11      	ldr	r2, [pc, #68]	@ (8005604 <OBJ_Write+0x344>)
 80055c0:	401a      	ands	r2, r3
 80055c2:	2a00      	cmp	r2, #0
 80055c4:	bf14      	ite	ne
 80055c6:	2201      	movne	r2, #1
 80055c8:	2200      	moveq	r2, #0
 80055ca:	b2d2      	uxtb	r2, r2
 80055cc:	2a00      	cmp	r2, #0
 80055ce:	f040 8090 	bne.w	80056f2 <OBJ_Write+0x432>
 80055d2:	4a0d      	ldr	r2, [pc, #52]	@ (8005608 <OBJ_Write+0x348>)
 80055d4:	401a      	ands	r2, r3
 80055d6:	2a00      	cmp	r2, #0
 80055d8:	bf14      	ite	ne
 80055da:	2201      	movne	r2, #1
 80055dc:	2200      	moveq	r2, #0
 80055de:	b2d2      	uxtb	r2, r2
 80055e0:	2a00      	cmp	r2, #0
 80055e2:	f040 8172 	bne.w	80058ca <OBJ_Write+0x60a>
 80055e6:	4a09      	ldr	r2, [pc, #36]	@ (800560c <OBJ_Write+0x34c>)
 80055e8:	401a      	ands	r2, r3
 80055ea:	2a00      	cmp	r2, #0
 80055ec:	bf14      	ite	ne
 80055ee:	2301      	movne	r3, #1
 80055f0:	2300      	moveq	r3, #0
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	f040 80da 	bne.w	80057ae <OBJ_Write+0x4ee>
 80055fa:	e1ec      	b.n	80059d6 <OBJ_Write+0x716>
 80055fc:	240004fc 	.word	0x240004fc
 8005600:	24000468 	.word	0x24000468
 8005604:	03fc8001 	.word	0x03fc8001
 8005608:	00020004 	.word	0x00020004
 800560c:	00010002 	.word	0x00010002
 8005610:	3b09      	subs	r3, #9
 8005612:	2b12      	cmp	r3, #18
 8005614:	f200 81df 	bhi.w	80059d6 <OBJ_Write+0x716>
 8005618:	a201      	add	r2, pc, #4	@ (adr r2, 8005620 <OBJ_Write+0x360>)
 800561a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800561e:	bf00      	nop
 8005620:	08005957 	.word	0x08005957
 8005624:	080059a1 	.word	0x080059a1
 8005628:	080059a1 	.word	0x080059a1
 800562c:	080059d7 	.word	0x080059d7
 8005630:	080059d7 	.word	0x080059d7
 8005634:	080059d7 	.word	0x080059d7
 8005638:	080059d7 	.word	0x080059d7
 800563c:	080059d7 	.word	0x080059d7
 8005640:	0800591b 	.word	0x0800591b
 8005644:	080059d7 	.word	0x080059d7
 8005648:	080059d7 	.word	0x080059d7
 800564c:	080059d7 	.word	0x080059d7
 8005650:	0800591b 	.word	0x0800591b
 8005654:	080059d7 	.word	0x080059d7
 8005658:	080059d7 	.word	0x080059d7
 800565c:	080059d7 	.word	0x080059d7
 8005660:	080059d7 	.word	0x080059d7
 8005664:	080059d7 	.word	0x080059d7
 8005668:	0800591b 	.word	0x0800591b
 800566c:	461a      	mov	r2, r3
 800566e:	2301      	movs	r3, #1
 8005670:	4093      	lsls	r3, r2
 8005672:	f403 72c8 	and.w	r2, r3, #400	@ 0x190
 8005676:	2a00      	cmp	r2, #0
 8005678:	bf14      	ite	ne
 800567a:	2201      	movne	r2, #1
 800567c:	2200      	moveq	r2, #0
 800567e:	b2d2      	uxtb	r2, r2
 8005680:	2a00      	cmp	r2, #0
 8005682:	f040 8122 	bne.w	80058ca <OBJ_Write+0x60a>
 8005686:	f003 0226 	and.w	r2, r3, #38	@ 0x26
 800568a:	2a00      	cmp	r2, #0
 800568c:	bf14      	ite	ne
 800568e:	2201      	movne	r2, #1
 8005690:	2200      	moveq	r2, #0
 8005692:	b2d2      	uxtb	r2, r2
 8005694:	2a00      	cmp	r2, #0
 8005696:	d12c      	bne.n	80056f2 <OBJ_Write+0x432>
 8005698:	f003 0348 	and.w	r3, r3, #72	@ 0x48
 800569c:	2b00      	cmp	r3, #0
 800569e:	bf14      	ite	ne
 80056a0:	2301      	movne	r3, #1
 80056a2:	2300      	moveq	r3, #0
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	f040 8081 	bne.w	80057ae <OBJ_Write+0x4ee>
 80056ac:	e193      	b.n	80059d6 <OBJ_Write+0x716>
                        {
                        case DEFTYPE_NULL:
                            if(bCompleteAccess)
 80056ae:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d01b      	beq.n	80056ee <OBJ_Write+0x42e>
                            {
                                /*Handle alignment entry*/
                                if (((pEntry->BitLength & 0xF) > 0)
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	885b      	ldrh	r3, [r3, #2]
 80056ba:	f003 030f 	and.w	r3, r3, #15
 80056be:	2b00      	cmp	r3, #0
 80056c0:	dd0b      	ble.n	80056da <OBJ_Write+0x41a>
                                    && (((bitOffset + pEntry->BitLength) & 0x0F) == 0 ))
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	885a      	ldrh	r2, [r3, #2]
 80056c6:	8b3b      	ldrh	r3, [r7, #24]
 80056c8:	4413      	add	r3, r2
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	f003 030f 	and.w	r3, r3, #15
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d102      	bne.n	80056da <OBJ_Write+0x41a>
                                {
                                    /* we have reached the UINT16 border */
                                    pData++;
 80056d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056d6:	3302      	adds	r3, #2
 80056d8:	64bb      	str	r3, [r7, #72]	@ 0x48
                                }

                                /*increment WORD offset*/
                                pData += ((pEntry->BitLength & 0xF0) >> 4);
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	885b      	ldrh	r3, [r3, #2]
 80056de:	111b      	asrs	r3, r3, #4
 80056e0:	f003 030f 	and.w	r3, r3, #15
 80056e4:	005b      	lsls	r3, r3, #1
 80056e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80056e8:	4413      	add	r3, r2
 80056ea:	64bb      	str	r3, [r7, #72]	@ 0x48
                            }
                            else
                            {
                                return ABORTIDX_DATA_CANNOT_BE_READ_OR_STORED;
                            }
                            break;
 80056ec:	e176      	b.n	80059dc <OBJ_Write+0x71c>
                                return ABORTIDX_DATA_CANNOT_BE_READ_OR_STORED;
 80056ee:	2318      	movs	r3, #24
 80056f0:	e1b7      	b.n	8005a62 <OBJ_Write+0x7a2>
                        case    DEFTYPE_INTEGER8:
                        case    DEFTYPE_UNSIGNED8:
                        case    DEFTYPE_BYTE :
                        {
                            /* depending on the bitOffset we have to copy the Hi or the Lo-Byte */
                            UINT16 TmpValue = 0x0000;
 80056f2:	2300      	movs	r3, #0
 80056f4:	84bb      	strh	r3, [r7, #36]	@ 0x24

                            bitMask = cBitMask[pEntry->BitLength] << (bitOffset & 0x0F);
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	885b      	ldrh	r3, [r3, #2]
 80056fa:	461a      	mov	r2, r3
 80056fc:	4b99      	ldr	r3, [pc, #612]	@ (8005964 <OBJ_Write+0x6a4>)
 80056fe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005702:	461a      	mov	r2, r3
 8005704:	8b3b      	ldrh	r3, [r7, #24]
 8005706:	f003 030f 	and.w	r3, r3, #15
 800570a:	fa02 f303 	lsl.w	r3, r2, r3
 800570e:	827b      	strh	r3, [r7, #18]

                            /*Swap object data (if required); all masks and offsets are defined for little endian format*/
                            TmpValue = SWAPWORD(pVarPtr[0]);
 8005710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005712:	881b      	ldrh	r3, [r3, #0]
 8005714:	84bb      	strh	r3, [r7, #36]	@ 0x24

                            /*Clear corresponding bits*/
                            TmpValue &= ~bitMask;
 8005716:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800571a:	43db      	mvns	r3, r3
 800571c:	b21a      	sxth	r2, r3
 800571e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8005722:	4013      	ands	r3, r2
 8005724:	b21b      	sxth	r3, r3
 8005726:	84bb      	strh	r3, [r7, #36]	@ 0x24

                            if (bCompleteAccess) 
 8005728:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800572c:	2b00      	cmp	r3, #0
 800572e:	d008      	beq.n	8005742 <OBJ_Write+0x482>
                            {
                                /*shifting is not required for Complete access because the bits are set to the correct offset by the master*/
                                TmpValue |= (SWAPWORD(pData[0]) & bitMask);
 8005730:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005732:	881a      	ldrh	r2, [r3, #0]
 8005734:	8a7b      	ldrh	r3, [r7, #18]
 8005736:	4013      	ands	r3, r2
 8005738:	b29a      	uxth	r2, r3
 800573a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800573c:	4313      	orrs	r3, r2
 800573e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005740:	e024      	b.n	800578c <OBJ_Write+0x4cc>
                            }
                            else
                            {
                                if((SWAPWORD(pData[0]) & ~cBitMask[pEntry->BitLength]))
 8005742:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005744:	881b      	ldrh	r3, [r3, #0]
 8005746:	461a      	mov	r2, r3
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	885b      	ldrh	r3, [r3, #2]
 800574c:	4619      	mov	r1, r3
 800574e:	4b85      	ldr	r3, [pc, #532]	@ (8005964 <OBJ_Write+0x6a4>)
 8005750:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005754:	43db      	mvns	r3, r3
 8005756:	4013      	ands	r3, r2
 8005758:	2b00      	cmp	r3, #0
 800575a:	d001      	beq.n	8005760 <OBJ_Write+0x4a0>
                                {
                                    /*written value exceed entry range*/
                                    return ABORTIDX_VALUE_EXCEEDED;
 800575c:	2312      	movs	r3, #18
 800575e:	e180      	b.n	8005a62 <OBJ_Write+0x7a2>
                                }
                                else
                                {
                                    /*Shift Bits to corresponding offset within the object memory*/
                                    TmpValue |= ((SWAPWORD(pData[0]) & cBitMask[pEntry->BitLength]) << (bitOffset & 0x0F));
 8005760:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005762:	881a      	ldrh	r2, [r3, #0]
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	885b      	ldrh	r3, [r3, #2]
 8005768:	4619      	mov	r1, r3
 800576a:	4b7e      	ldr	r3, [pc, #504]	@ (8005964 <OBJ_Write+0x6a4>)
 800576c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005770:	4013      	ands	r3, r2
 8005772:	b29b      	uxth	r3, r3
 8005774:	461a      	mov	r2, r3
 8005776:	8b3b      	ldrh	r3, [r7, #24]
 8005778:	f003 030f 	and.w	r3, r3, #15
 800577c:	fa02 f303 	lsl.w	r3, r2, r3
 8005780:	b21a      	sxth	r2, r3
 8005782:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8005786:	4313      	orrs	r3, r2
 8005788:	b21b      	sxth	r3, r3
 800578a:	84bb      	strh	r3, [r7, #36]	@ 0x24
                                }
                            }

                            /*Swap written data to big endian format (if required)*/
                            pVarPtr[0] = SWAPWORD(TmpValue);
 800578c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800578e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005790:	801a      	strh	r2, [r3, #0]

                            if ( ((bitOffset+pEntry->BitLength) & 0x0F) == 0 )
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	885a      	ldrh	r2, [r3, #2]
 8005796:	8b3b      	ldrh	r3, [r7, #24]
 8005798:	4413      	add	r3, r2
 800579a:	b29b      	uxth	r3, r3
 800579c:	f003 030f 	and.w	r3, r3, #15
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	f040 811a 	bne.w	80059da <OBJ_Write+0x71a>
                            {
                                /* we have reached the UINT16 border */
                                pData++;
 80057a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057a8:	3302      	adds	r3, #2
 80057aa:	64bb      	str	r3, [r7, #72]	@ 0x48
                            }
                        }
                            break;
 80057ac:	e115      	b.n	80059da <OBJ_Write+0x71a>
                        case    DEFTYPE_INTEGER16:
                        case    DEFTYPE_UNSIGNED16:
                        case    DEFTYPE_BITARR16:
                        case    DEFTYPE_WORD:
                            if(bitOffset & 0xF)
 80057ae:	8b3b      	ldrh	r3, [r7, #24]
 80057b0:	f003 030f 	and.w	r3, r3, #15
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d001      	beq.n	80057bc <OBJ_Write+0x4fc>
                            {
                                /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                return ABORTIDX_UNSUPPORTED_ACCESS;
 80057b8:	2305      	movs	r3, #5
 80057ba:	e152      	b.n	8005a62 <OBJ_Write+0x7a2>
                            }

                            {
                            /* in this example the objects are defined in that way,
                            that the 16 bit type are always starting at an exact WORD offset */
                            UINT16 u16NewData = SWAPWORD(pData[0]);
 80057bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057be:	881b      	ldrh	r3, [r3, #0]
 80057c0:	82bb      	strh	r3, [r7, #20]
                            if(bClearSubindex0Required && (pVarPtr[0] != u16NewData))
 80057c2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d006      	beq.n	80057d8 <OBJ_Write+0x518>
 80057ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057cc:	881b      	ldrh	r3, [r3, #0]
 80057ce:	8aba      	ldrh	r2, [r7, #20]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d001      	beq.n	80057d8 <OBJ_Write+0x518>
                            {
                                /* try to write new data when subindex0 shall be reset*/
                                return ABORTIDX_ENTRY_CANT_BE_WRITTEN_SI0_NOT_0;
 80057d4:	231c      	movs	r3, #28
 80057d6:	e144      	b.n	8005a62 <OBJ_Write+0x7a2>
                            }

                            /*check value if a new PDO assign entry should be written*/
                            if(IS_PDO_ASSIGN(index))  //PDO assign
 80057d8:	89fb      	ldrh	r3, [r7, #14]
 80057da:	f641 420f 	movw	r2, #7183	@ 0x1c0f
 80057de:	4293      	cmp	r3, r2
 80057e0:	d919      	bls.n	8005816 <OBJ_Write+0x556>
 80057e2:	89fb      	ldrh	r3, [r7, #14]
 80057e4:	f641 422f 	movw	r2, #7215	@ 0x1c2f
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d814      	bhi.n	8005816 <OBJ_Write+0x556>
                            {
                                if (!IS_RX_PDO(u16NewData) && !IS_TX_PDO(u16NewData) && (u16NewData != 0)) //check if the new assign entry value is valid
 80057ec:	8abb      	ldrh	r3, [r7, #20]
 80057ee:	f5b3 5fb0 	cmp.w	r3, #5632	@ 0x1600
 80057f2:	d303      	bcc.n	80057fc <OBJ_Write+0x53c>
 80057f4:	8abb      	ldrh	r3, [r7, #20]
 80057f6:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 80057fa:	d30c      	bcc.n	8005816 <OBJ_Write+0x556>
 80057fc:	8abb      	ldrh	r3, [r7, #20]
 80057fe:	f5b3 5fd0 	cmp.w	r3, #6656	@ 0x1a00
 8005802:	d303      	bcc.n	800580c <OBJ_Write+0x54c>
 8005804:	8abb      	ldrh	r3, [r7, #20]
 8005806:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 800580a:	d304      	bcc.n	8005816 <OBJ_Write+0x556>
 800580c:	8abb      	ldrh	r3, [r7, #20]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d001      	beq.n	8005816 <OBJ_Write+0x556>
                                {
                                    return ABORTIDX_VALUE_EXCEEDED;
 8005812:	2312      	movs	r3, #18
 8005814:	e125      	b.n	8005a62 <OBJ_Write+0x7a2>
                                }
                            }

                            if(index == 0x1C32 || index == 0x1C33)
 8005816:	89fb      	ldrh	r3, [r7, #14]
 8005818:	f641 4232 	movw	r2, #7218	@ 0x1c32
 800581c:	4293      	cmp	r3, r2
 800581e:	d004      	beq.n	800582a <OBJ_Write+0x56a>
 8005820:	89fb      	ldrh	r3, [r7, #14]
 8005822:	f641 4233 	movw	r2, #7219	@ 0x1c33
 8005826:	4293      	cmp	r3, r2
 8005828:	d148      	bne.n	80058bc <OBJ_Write+0x5fc>
                            {
                               if (i == 1) /* "Synchronisation type" written */
 800582a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800582c:	2b01      	cmp	r3, #1
 800582e:	d117      	bne.n	8005860 <OBJ_Write+0x5a0>
                               {
                                  /* The Synchronisation type (0x1C3x.1) was written by the user => the Sync type will not be calculated based on the register settings (if they don't match an error will be returned P_2_S)*/
                                  if (pVarPtr[0] != u16NewData)
 8005830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005832:	881b      	ldrh	r3, [r3, #0]
 8005834:	8aba      	ldrh	r2, [r7, #20]
 8005836:	429a      	cmp	r2, r3
 8005838:	d00f      	beq.n	800585a <OBJ_Write+0x59a>
                                  {
                                     result = CheckSyncTypeValue(index, u16NewData);
 800583a:	8aba      	ldrh	r2, [r7, #20]
 800583c:	89fb      	ldrh	r3, [r7, #14]
 800583e:	4611      	mov	r1, r2
 8005840:	4618      	mov	r0, r3
 8005842:	f7ff f8ed 	bl	8004a20 <CheckSyncTypeValue>
 8005846:	4603      	mov	r3, r0
 8005848:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

                                     if (result != 0)
 800584c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005850:	2b00      	cmp	r3, #0
 8005852:	d002      	beq.n	800585a <OBJ_Write+0x59a>
                                     {
                                        return result;
 8005854:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005858:	e103      	b.n	8005a62 <OBJ_Write+0x7a2>
                                     }
                                  }

                                  /* The user may force to current Sync Mode for that reason the flag has also to be set if the same value was written */
                                  bSyncSetByUser = TRUE;
 800585a:	4b43      	ldr	r3, [pc, #268]	@ (8005968 <OBJ_Write+0x6a8>)
 800585c:	2201      	movs	r2, #1
 800585e:	701a      	strb	r2, [r3, #0]
                               }

                               if (i == 8) /* "Get Cycle Time" written*/
 8005860:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005862:	2b08      	cmp	r3, #8
 8005864:	d12a      	bne.n	80058bc <OBJ_Write+0x5fc>
                               {

                                   sSyncManOutPar.u32CalcAndCopyTime = (PD_OUTPUT_CALC_AND_COPY_TIME);
 8005866:	4b41      	ldr	r3, [pc, #260]	@ (800596c <OBJ_Write+0x6ac>)
 8005868:	2200      	movs	r2, #0
 800586a:	615a      	str	r2, [r3, #20]
                                   sSyncManOutPar.u32MinCycleTime = (MIN_PD_CYCLE_TIME);
 800586c:	4b3f      	ldr	r3, [pc, #252]	@ (800596c <OBJ_Write+0x6ac>)
 800586e:	4a40      	ldr	r2, [pc, #256]	@ (8005970 <OBJ_Write+0x6b0>)
 8005870:	611a      	str	r2, [r3, #16]
                                   sSyncManOutPar.u32CycleTime = 0;
 8005872:	4b3e      	ldr	r3, [pc, #248]	@ (800596c <OBJ_Write+0x6ac>)
 8005874:	2200      	movs	r2, #0
 8005876:	605a      	str	r2, [r3, #4]

                                   sSyncManInPar.u32CalcAndCopyTime = (PD_INPUT_CALC_AND_COPY_TIME);
 8005878:	4b3e      	ldr	r3, [pc, #248]	@ (8005974 <OBJ_Write+0x6b4>)
 800587a:	2200      	movs	r2, #0
 800587c:	615a      	str	r2, [r3, #20]
                                   sSyncManInPar.u32MinCycleTime = (MIN_PD_CYCLE_TIME);
 800587e:	4b3d      	ldr	r3, [pc, #244]	@ (8005974 <OBJ_Write+0x6b4>)
 8005880:	4a3b      	ldr	r2, [pc, #236]	@ (8005970 <OBJ_Write+0x6b0>)
 8005882:	611a      	str	r2, [r3, #16]
                                   sSyncManInPar.u32CycleTime = 0;
 8005884:	4b3b      	ldr	r3, [pc, #236]	@ (8005974 <OBJ_Write+0x6b4>)
 8005886:	2200      	movs	r2, #0
 8005888:	605a      	str	r2, [r3, #4]


                                  if ((u16NewData & 0x2) == 0x2)
 800588a:	8abb      	ldrh	r3, [r7, #20]
 800588c:	f003 0302 	and.w	r3, r3, #2
 8005890:	2b00      	cmp	r3, #0
 8005892:	d013      	beq.n	80058bc <OBJ_Write+0x5fc>
                                  {
                                     /* reset the error counters*/
                                     sSyncManOutPar.u16CycleExceededCounter = 0;
 8005894:	4b35      	ldr	r3, [pc, #212]	@ (800596c <OBJ_Write+0x6ac>)
 8005896:	2200      	movs	r2, #0
 8005898:	855a      	strh	r2, [r3, #42]	@ 0x2a
                                     sSyncManOutPar.u16SmEventMissedCounter = 0;
 800589a:	4b34      	ldr	r3, [pc, #208]	@ (800596c <OBJ_Write+0x6ac>)
 800589c:	2200      	movs	r2, #0
 800589e:	851a      	strh	r2, [r3, #40]	@ 0x28
                                     sSyncManOutPar.u8SyncError = 0;
 80058a0:	4b32      	ldr	r3, [pc, #200]	@ (800596c <OBJ_Write+0x6ac>)
 80058a2:	2200      	movs	r2, #0
 80058a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

                                     sSyncManInPar.u16CycleExceededCounter = 0;
 80058a8:	4b32      	ldr	r3, [pc, #200]	@ (8005974 <OBJ_Write+0x6b4>)
 80058aa:	2200      	movs	r2, #0
 80058ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
                                     sSyncManInPar.u16SmEventMissedCounter = 0;
 80058ae:	4b31      	ldr	r3, [pc, #196]	@ (8005974 <OBJ_Write+0x6b4>)
 80058b0:	2200      	movs	r2, #0
 80058b2:	851a      	strh	r2, [r3, #40]	@ 0x28
                                     sSyncManInPar.u8SyncError = 0;
 80058b4:	4b2f      	ldr	r3, [pc, #188]	@ (8005974 <OBJ_Write+0x6b4>)
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                                  }
                               } /* Subindex 8 written*/
                            }

                            pVarPtr[0] = u16NewData;
 80058bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058be:	8aba      	ldrh	r2, [r7, #20]
 80058c0:	801a      	strh	r2, [r3, #0]
                            pData++;
 80058c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80058c4:	3302      	adds	r3, #2
 80058c6:	64bb      	str	r3, [r7, #72]	@ 0x48
                            }
                            break;
 80058c8:	e088      	b.n	80059dc <OBJ_Write+0x71c>
                        case    DEFTYPE_UNSIGNED32:
                        case    DEFTYPE_INTEGER32:
                        case    DEFTYPE_REAL32:
                        case    DEFTYPE_BITARR32:
                        case    DEFTYPE_DWORD:
                            if(bitOffset & 0xF)
 80058ca:	8b3b      	ldrh	r3, [r7, #24]
 80058cc:	f003 030f 	and.w	r3, r3, #15
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d001      	beq.n	80058d8 <OBJ_Write+0x618>
                            {
                                /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                return ABORTIDX_UNSUPPORTED_ACCESS;
 80058d4:	2305      	movs	r3, #5
 80058d6:	e0c4      	b.n	8005a62 <OBJ_Write+0x7a2>
                            }
                            {

                            /* in this example the objects are defined in that way,
                               that the 32 bit type are always starting at an exact WORD offset */
                            if(bClearSubindex0Required && 
 80058d8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d00f      	beq.n	8005900 <OBJ_Write+0x640>
                                ((pVarPtr[0] != pData[0])
 80058e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058e2:	881a      	ldrh	r2, [r3, #0]
 80058e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80058e6:	881b      	ldrh	r3, [r3, #0]
                            if(bClearSubindex0Required && 
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d107      	bne.n	80058fc <OBJ_Write+0x63c>
                                || (pVarPtr[1] != pData[1])))
 80058ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ee:	3302      	adds	r3, #2
 80058f0:	881a      	ldrh	r2, [r3, #0]
 80058f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80058f4:	3302      	adds	r3, #2
 80058f6:	881b      	ldrh	r3, [r3, #0]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d001      	beq.n	8005900 <OBJ_Write+0x640>
                            {
                                /* try to write new data when subindex0 shall be reset*/
                                return ABORTIDX_ENTRY_CANT_BE_WRITTEN_SI0_NOT_0;
 80058fc:	231c      	movs	r3, #28
 80058fe:	e0b0      	b.n	8005a62 <OBJ_Write+0x7a2>
                            }

                            pVarPtr[0] = pData[0];
 8005900:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005902:	881a      	ldrh	r2, [r3, #0]
 8005904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005906:	801a      	strh	r2, [r3, #0]
                            pVarPtr[1] = pData[1];
 8005908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800590a:	3302      	adds	r3, #2
 800590c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800590e:	8852      	ldrh	r2, [r2, #2]
 8005910:	801a      	strh	r2, [r3, #0]
                            pData += 2;
 8005912:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005914:	3304      	adds	r3, #4
 8005916:	64bb      	str	r3, [r7, #72]	@ 0x48
                            }
                            break;
 8005918:	e060      	b.n	80059dc <OBJ_Write+0x71c>
                        case    DEFTYPE_REAL64:
                        case 	DEFTYPE_INTEGER64:
                        case    DEFTYPE_UNSIGNED64:
                            if(bitOffset & 0xF)
 800591a:	8b3b      	ldrh	r3, [r7, #24]
 800591c:	f003 030f 	and.w	r3, r3, #15
 8005920:	2b00      	cmp	r3, #0
 8005922:	d001      	beq.n	8005928 <OBJ_Write+0x668>
                            {
                                /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                return ABORTIDX_UNSUPPORTED_ACCESS;
 8005924:	2305      	movs	r3, #5
 8005926:	e09c      	b.n	8005a62 <OBJ_Write+0x7a2>
                            }
                            /* in this example the objects are defined in that way,
                               that the 64 bit type are always starting at an exact WORD offset */
                            pVarPtr[0] = pData[0];
 8005928:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800592a:	881a      	ldrh	r2, [r3, #0]
 800592c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800592e:	801a      	strh	r2, [r3, #0]
                            pVarPtr[1] = pData[1];
 8005930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005932:	3302      	adds	r3, #2
 8005934:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005936:	8852      	ldrh	r2, [r2, #2]
 8005938:	801a      	strh	r2, [r3, #0]
                            pVarPtr[2] = pData[2];
 800593a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800593c:	3304      	adds	r3, #4
 800593e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005940:	8892      	ldrh	r2, [r2, #4]
 8005942:	801a      	strh	r2, [r3, #0]
                            pVarPtr[3] = pData[3];
 8005944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005946:	3306      	adds	r3, #6
 8005948:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800594a:	88d2      	ldrh	r2, [r2, #6]
 800594c:	801a      	strh	r2, [r3, #0]
                            pData += 4;
 800594e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005950:	3308      	adds	r3, #8
 8005952:	64bb      	str	r3, [r7, #72]	@ 0x48
                            break;
 8005954:	e042      	b.n	80059dc <OBJ_Write+0x71c>
                        case    DEFTYPE_VISIBLESTRING:
                            if(bitOffset & 0xF)
 8005956:	8b3b      	ldrh	r3, [r7, #24]
 8005958:	f003 030f 	and.w	r3, r3, #15
 800595c:	2b00      	cmp	r3, #0
 800595e:	d00b      	beq.n	8005978 <OBJ_Write+0x6b8>
                            {
                                /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                return ABORTIDX_UNSUPPORTED_ACCESS;
 8005960:	2305      	movs	r3, #5
 8005962:	e07e      	b.n	8005a62 <OBJ_Write+0x7a2>
 8005964:	0800bd30 	.word	0x0800bd30
 8005968:	240005a1 	.word	0x240005a1
 800596c:	240005a8 	.word	0x240005a8
 8005970:	000186a0 	.word	0x000186a0
 8005974:	240005ec 	.word	0x240005ec
                            }

                            OBJTOMBXSTRCPY(pVarPtr, pData, BIT2BYTE(pEntry->BitLength));
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	885b      	ldrh	r3, [r3, #2]
 800597c:	3307      	adds	r3, #7
 800597e:	10db      	asrs	r3, r3, #3
 8005980:	461a      	mov	r2, r3
 8005982:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005984:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005986:	f005 fe87 	bl	800b698 <memcpy>

                            pData += BIT2WORD((pEntry->BitLength)& ~0xF);
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	885b      	ldrh	r3, [r3, #2]
 800598e:	f023 030f 	bic.w	r3, r3, #15
 8005992:	330f      	adds	r3, #15
 8005994:	111b      	asrs	r3, r3, #4
 8005996:	005b      	lsls	r3, r3, #1
 8005998:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800599a:	4413      	add	r3, r2
 800599c:	64bb      	str	r3, [r7, #72]	@ 0x48
                            break;
 800599e:	e01d      	b.n	80059dc <OBJ_Write+0x71c>
                        case    DEFTYPE_UNICODE_STRING:
                            case DEFTYPE_ARRAY_OF_INT :
                            case DEFTYPE_ARRAY_OF_SINT :
                            case DEFTYPE_ARRAY_OF_DINT :
                            case DEFTYPE_ARRAY_OF_UDINT:
                            if(bitOffset & 0xF)
 80059a0:	8b3b      	ldrh	r3, [r7, #24]
 80059a2:	f003 030f 	and.w	r3, r3, #15
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d001      	beq.n	80059ae <OBJ_Write+0x6ee>
                            {
                                /* return an error in case of an odd word offset (to support 16bit data type on odd word addresses an object specific access function need to be implemented and register in the object dictionary, see SSC Application Note)*/
                                return ABORTIDX_UNSUPPORTED_ACCESS;
 80059aa:	2305      	movs	r3, #5
 80059ac:	e059      	b.n	8005a62 <OBJ_Write+0x7a2>
                            }

                            /* in this example the objects are defined in that way,
                               that the other types are always starting at an even byte offset */
                            OBJTOMBXMEMCPY(pVarPtr, pData, BIT2BYTE(pEntry->BitLength));
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	885b      	ldrh	r3, [r3, #2]
 80059b2:	3307      	adds	r3, #7
 80059b4:	10db      	asrs	r3, r3, #3
 80059b6:	461a      	mov	r2, r3
 80059b8:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80059ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059bc:	f005 fe6c 	bl	800b698 <memcpy>
                            pData += BIT2WORD((pEntry->BitLength) & ~0xF);
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	885b      	ldrh	r3, [r3, #2]
 80059c4:	f023 030f 	bic.w	r3, r3, #15
 80059c8:	330f      	adds	r3, #15
 80059ca:	111b      	asrs	r3, r3, #4
 80059cc:	005b      	lsls	r3, r3, #1
 80059ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80059d0:	4413      	add	r3, r2
 80059d2:	64bb      	str	r3, [r7, #72]	@ 0x48

                            break;
 80059d4:	e002      	b.n	80059dc <OBJ_Write+0x71c>
                        default:
                            /* other data types are not supported from this example */
                            return ABORTIDX_DATA_CANNOT_BE_READ_OR_STORED;
 80059d6:	2318      	movs	r3, #24
 80059d8:	e043      	b.n	8005a62 <OBJ_Write+0x7a2>
                            break;
 80059da:	bf00      	nop
                        }
                    }

                    /* set flag */
                    bWritten = 1;
 80059dc:	2301      	movs	r3, #1
 80059de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80059e2:	e023      	b.n	8005a2c <OBJ_Write+0x76c>

                }
            }
            else
            {
                if(i == 0)
 80059e4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d103      	bne.n	80059f2 <OBJ_Write+0x732>
                {
                    /* For SubIndex0 16Bit are reserved even if the BitLength is 8 */
                    pData++;
 80059ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059ec:	3302      	adds	r3, #2
 80059ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059f0:	e019      	b.n	8005a26 <OBJ_Write+0x766>
                }
                else
                {
                    /*Handle Bit/Byte Offset*/
                    if (((pEntry->BitLength & 0xF) > 0)
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	885b      	ldrh	r3, [r3, #2]
 80059f6:	f003 030f 	and.w	r3, r3, #15
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	dd0b      	ble.n	8005a16 <OBJ_Write+0x756>
                        && (((bitOffset + pEntry->BitLength) & 0x0F) == 0 ))
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	885a      	ldrh	r2, [r3, #2]
 8005a02:	8b3b      	ldrh	r3, [r7, #24]
 8005a04:	4413      	add	r3, r2
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	f003 030f 	and.w	r3, r3, #15
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d102      	bne.n	8005a16 <OBJ_Write+0x756>
                    {
                        /* we have reached the UINT16 border */
                        pData++;
 8005a10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a12:	3302      	adds	r3, #2
 8005a14:	64bb      	str	r3, [r7, #72]	@ 0x48
                    }

                    /*increment WORD offset*/
                    pData += ((pEntry->BitLength & 0xFFF0) >> 4);
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	885b      	ldrh	r3, [r3, #2]
 8005a1a:	091b      	lsrs	r3, r3, #4
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	005b      	lsls	r3, r3, #1
 8005a20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a22:	4413      	add	r3, r2
 8005a24:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
                /*If no other entry was written this result will be returned*/
                result = ABORTIDX_DATA_CANNOT_BE_READ_OR_STORED;
 8005a26:	2318      	movs	r3, #24
 8005a28:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        for (i = subindex; i <= lastSubindex; i++)
 8005a2c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005a2e:	3301      	adds	r3, #1
 8005a30:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005a32:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005a34:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005a36:	429a      	cmp	r2, r3
 8005a38:	f67f ad2b 	bls.w	8005492 <OBJ_Write+0x1d2>
            }
        }

        if (bWritten == 0)
 8005a3c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d102      	bne.n	8005a4a <OBJ_Write+0x78a>
        {
            /* we didn't write anything, so we have to return the stored error code */
            return result;
 8005a44:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005a48:	e00b      	b.n	8005a62 <OBJ_Write+0x7a2>
        }
    }

    /* ECATCHANGE_START(V5.13) COE4*/
    if (pAPPL_CoeWriteInd != NULL)
 8005a4a:	4b08      	ldr	r3, [pc, #32]	@ (8005a6c <OBJ_Write+0x7ac>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d006      	beq.n	8005a60 <OBJ_Write+0x7a0>
    {
        pAPPL_CoeWriteInd(index, subindex, bCompleteAccess);
 8005a52:	4b06      	ldr	r3, [pc, #24]	@ (8005a6c <OBJ_Write+0x7ac>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 8005a5a:	7b79      	ldrb	r1, [r7, #13]
 8005a5c:	89f8      	ldrh	r0, [r7, #14]
 8005a5e:	4798      	blx	r3
    }
    /* ECATCHANGE_END(V5.13) COE4*/

    return 0;
 8005a60:	2300      	movs	r3, #0
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	373c      	adds	r7, #60	@ 0x3c
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd90      	pop	{r4, r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	24000468 	.word	0x24000468

08005a70 <SdoDownloadSegmentInd>:
			the data will be written to the object dictionary. The
			function sends a response by itself.
*////////////////////////////////////////////////////////////////////////////////////////

static UINT8 SdoDownloadSegmentInd(TDOWNLOADSDOSEGREQMBX MBXMEM * pSdoInd)
{
 8005a70:	b5b0      	push	{r4, r5, r7, lr}
 8005a72:	b088      	sub	sp, #32
 8005a74:	af02      	add	r7, sp, #8
 8005a76:	6078      	str	r0, [r7, #4]
	UINT8 abort = 0;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	75fb      	strb	r3, [r7, #23]
	UINT32 bytesToSave = 0;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	613b      	str	r3, [r7, #16]

	if (SWAPWORD(pSdoInd->SdoHeader.SegHeader & SEGHEADER_TOGGLE) == bSdoSegLastToggle)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	891b      	ldrh	r3, [r3, #8]
 8005a84:	f003 0310 	and.w	r3, r3, #16
 8005a88:	4a95      	ldr	r2, [pc, #596]	@ (8005ce0 <SdoDownloadSegmentInd+0x270>)
 8005a8a:	7812      	ldrb	r2, [r2, #0]
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d102      	bne.n	8005a96 <SdoDownloadSegmentInd+0x26>
	{
		/* toggle bit has not toggled... */
		abort = ABORTIDX_TOGGLE_BIT_NOT_CHANGED;
 8005a90:	2301      	movs	r3, #1
 8005a92:	75fb      	strb	r3, [r7, #23]
 8005a94:	e157      	b.n	8005d46 <SdoDownloadSegmentInd+0x2d6>
	}
	else
	{
		/* maxData contains the maximum data to be received with a SDO-DownloadSegment */
		UINT16 maxData = u16ReceiveMbxSize - MBX_HEADER_SIZE - SEGMENT_NORM_HEADER_SIZE;
 8005a96:	4b93      	ldr	r3, [pc, #588]	@ (8005ce4 <SdoDownloadSegmentInd+0x274>)
 8005a98:	881b      	ldrh	r3, [r3, #0]
 8005a9a:	3b09      	subs	r3, #9
 8005a9c:	81bb      	strh	r3, [r7, #12]
		/* the new toggle bit is stored in bSdoSegLastToggle */
		bSdoSegLastToggle = SWAPWORD(pSdoInd->SdoHeader.SegHeader & SEGHEADER_TOGGLE);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	891b      	ldrh	r3, [r3, #8]
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	f003 0310 	and.w	r3, r3, #16
 8005aa8:	b2da      	uxtb	r2, r3
 8005aaa:	4b8d      	ldr	r3, [pc, #564]	@ (8005ce0 <SdoDownloadSegmentInd+0x270>)
 8005aac:	701a      	strb	r2, [r3, #0]

		/* a SDO-Download Segment is only allowed if a SDO-Download Request was received before,
		   in that case a buffer for the received data was allocated in SDOS_SdoInd before */
		if (pSdoSegData)
 8005aae:	4b8e      	ldr	r3, [pc, #568]	@ (8005ce8 <SdoDownloadSegmentInd+0x278>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	f000 8145 	beq.w	8005d42 <SdoDownloadSegmentInd+0x2d2>
		{
			/* bytesToSave contains the remaining data with this and maybe the following
			   SDO-Download Segment services */
			bytesToSave = nSdoSegCompleteSize - nSdoSegBytesToHandle;
 8005ab8:	4b8c      	ldr	r3, [pc, #560]	@ (8005cec <SdoDownloadSegmentInd+0x27c>)
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	4b8c      	ldr	r3, [pc, #560]	@ (8005cf0 <SdoDownloadSegmentInd+0x280>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	613b      	str	r3, [r7, #16]

			if (pSdoInd->SdoHeader.SegHeader & SEGHEADER_NOMOREFOLLOWS)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	891b      	ldrh	r3, [r3, #8]
 8005ac8:	f003 0301 	and.w	r3, r3, #1
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d02a      	beq.n	8005b26 <SdoDownloadSegmentInd+0xb6>
			{
				/* the last segment is received, check if the length of the remaining data is the
				   same as the length of the received data */
				if (bytesToSave <= maxData)
 8005ad0:	89bb      	ldrh	r3, [r7, #12]
 8005ad2:	693a      	ldr	r2, [r7, #16]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d823      	bhi.n	8005b20 <SdoDownloadSegmentInd+0xb0>
				{
					UINT16 mbxSize = SWAPWORD(pSdoInd->MbxHeader.Length);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	881b      	ldrh	r3, [r3, #0]
 8005adc:	817b      	strh	r3, [r7, #10]

					/* for the check it is distinguished if the remaining bytes are less than 8 (in that
					   case 7 data bytes were sent and the SDO-Download Segment header contains the information
						how much bytes are valid (CAN-compatibility)), otherwise the length has to match exactly
						and the SDO-Download Segment-Headerbyte is ignored */
					if (((bytesToSave <= (UINT32)(mbxSize - SEGMENT_NORM_HEADER_SIZE))
 8005ade:	897b      	ldrh	r3, [r7, #10]
 8005ae0:	3b03      	subs	r3, #3
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d80a      	bhi.n	8005b00 <SdoDownloadSegmentInd+0x90>
						&& (bytesToSave == ((UINT16)(MIN_SEGMENTED_DATA - ((pSdoInd->SdoHeader.SegHeader & SEGHEADER_SEGDATASIZE) >> SEGHEADERSHIFT_SEGDATASIZE))))
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	891b      	ldrh	r3, [r3, #8]
 8005aee:	105b      	asrs	r3, r3, #1
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	43db      	mvns	r3, r3
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	f003 0307 	and.w	r3, r3, #7
 8005afa:	693a      	ldr	r2, [r7, #16]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d008      	beq.n	8005b12 <SdoDownloadSegmentInd+0xa2>
						)
						|| ((bytesToSave > MIN_SEGMENTED_DATA)
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	2b07      	cmp	r3, #7
 8005b04:	d909      	bls.n	8005b1a <SdoDownloadSegmentInd+0xaa>
							&& (bytesToSave == (UINT32)(mbxSize - SEGMENT_NORM_HEADER_SIZE))
 8005b06:	897b      	ldrh	r3, [r7, #10]
 8005b08:	3b03      	subs	r3, #3
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d103      	bne.n	8005b1a <SdoDownloadSegmentInd+0xaa>
							))
					{
						/* length is correct */
						bSdoSegFollows = FALSE;
 8005b12:	4b78      	ldr	r3, [pc, #480]	@ (8005cf4 <SdoDownloadSegmentInd+0x284>)
 8005b14:	2200      	movs	r2, #0
 8005b16:	701a      	strb	r2, [r3, #0]
 8005b18:	e011      	b.n	8005b3e <SdoDownloadSegmentInd+0xce>
					}
					else
					{
						abort = ABORTIDX_PARAM_LENGTH_ERROR;
 8005b1a:	230e      	movs	r3, #14
 8005b1c:	75fb      	strb	r3, [r7, #23]
 8005b1e:	e00e      	b.n	8005b3e <SdoDownloadSegmentInd+0xce>
					}
				}
				else
				{
					abort = ABORTIDX_PARAM_LENGTH_ERROR;
 8005b20:	230e      	movs	r3, #14
 8005b22:	75fb      	strb	r3, [r7, #23]
 8005b24:	e00b      	b.n	8005b3e <SdoDownloadSegmentInd+0xce>
				}
			}
			else
			{
				/* its not the last segment */
				bSdoSegFollows = TRUE;
 8005b26:	4b73      	ldr	r3, [pc, #460]	@ (8005cf4 <SdoDownloadSegmentInd+0x284>)
 8005b28:	2201      	movs	r2, #1
 8005b2a:	701a      	strb	r2, [r3, #0]
				/* we have to check if we expect less bytes than the maximum size which can be send with a single
				   SDO Download Segment */
				if (bytesToSave <= maxData)
 8005b2c:	89bb      	ldrh	r3, [r7, #12]
 8005b2e:	693a      	ldr	r2, [r7, #16]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d802      	bhi.n	8005b3a <SdoDownloadSegmentInd+0xca>
				{
					abort = ABORTIDX_PARAM_LENGTH_ERROR;
 8005b34:	230e      	movs	r3, #14
 8005b36:	75fb      	strb	r3, [r7, #23]
 8005b38:	e001      	b.n	8005b3e <SdoDownloadSegmentInd+0xce>
				}
				else
				{
					/* length is okay, bytesToSave contains the data size to be copied */
					bytesToSave = maxData;
 8005b3a:	89bb      	ldrh	r3, [r7, #12]
 8005b3c:	613b      	str	r3, [r7, #16]
				}
			}

			if (abort == 0)
 8005b3e:	7dfb      	ldrb	r3, [r7, #23]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	f040 8100 	bne.w	8005d46 <SdoDownloadSegmentInd+0x2d6>
			{
				/* the received data is copied in the buffer */
				UINT16 i = 0;
 8005b46:	2300      	movs	r3, #0
 8005b48:	81fb      	strh	r3, [r7, #14]

				if ((nSdoSegBytesToHandle & 0x1) == 0x01)
 8005b4a:	4b69      	ldr	r3, [pc, #420]	@ (8005cf0 <SdoDownloadSegmentInd+0x280>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 0301 	and.w	r3, r3, #1
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d03c      	beq.n	8005bd0 <SdoDownloadSegmentInd+0x160>
				{
					// Data0 will be copied to an odd address of pSdoSegData, Data1 to an even address (Segment 2, 4, ...)
					// Read Data0
					pSdoSegData[(nSdoSegBytesToHandle >> 1)] &= ~SEGHDATA_MASK;
 8005b56:	4b64      	ldr	r3, [pc, #400]	@ (8005ce8 <SdoDownloadSegmentInd+0x278>)
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	4b65      	ldr	r3, [pc, #404]	@ (8005cf0 <SdoDownloadSegmentInd+0x280>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	085b      	lsrs	r3, r3, #1
 8005b60:	005b      	lsls	r3, r3, #1
 8005b62:	4413      	add	r3, r2
 8005b64:	8819      	ldrh	r1, [r3, #0]
 8005b66:	4b60      	ldr	r3, [pc, #384]	@ (8005ce8 <SdoDownloadSegmentInd+0x278>)
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	4b61      	ldr	r3, [pc, #388]	@ (8005cf0 <SdoDownloadSegmentInd+0x280>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	085b      	lsrs	r3, r3, #1
 8005b70:	005b      	lsls	r3, r3, #1
 8005b72:	4413      	add	r3, r2
 8005b74:	b2ca      	uxtb	r2, r1
 8005b76:	b292      	uxth	r2, r2
 8005b78:	801a      	strh	r2, [r3, #0]
					pSdoSegData[(nSdoSegBytesToHandle >> 1)] |= (pSdoInd->SdoHeader.SegHeader & SEGHDATA_MASK);
 8005b7a:	4b5b      	ldr	r3, [pc, #364]	@ (8005ce8 <SdoDownloadSegmentInd+0x278>)
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	4b5c      	ldr	r3, [pc, #368]	@ (8005cf0 <SdoDownloadSegmentInd+0x280>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	085b      	lsrs	r3, r3, #1
 8005b84:	005b      	lsls	r3, r3, #1
 8005b86:	4413      	add	r3, r2
 8005b88:	881b      	ldrh	r3, [r3, #0]
 8005b8a:	b21a      	sxth	r2, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	891b      	ldrh	r3, [r3, #8]
 8005b90:	b21b      	sxth	r3, r3
 8005b92:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005b96:	b21b      	sxth	r3, r3
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	b219      	sxth	r1, r3
 8005b9c:	4b52      	ldr	r3, [pc, #328]	@ (8005ce8 <SdoDownloadSegmentInd+0x278>)
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	4b53      	ldr	r3, [pc, #332]	@ (8005cf0 <SdoDownloadSegmentInd+0x280>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	085b      	lsrs	r3, r3, #1
 8005ba6:	005b      	lsls	r3, r3, #1
 8005ba8:	4413      	add	r3, r2
 8005baa:	b28a      	uxth	r2, r1
 8005bac:	801a      	strh	r2, [r3, #0]
					// Copy Data1 - DataN
					MBXMEMCPY(&pSdoSegData[(nSdoSegBytesToHandle >> 1) + 1], pSdoInd->SdoHeader.Data, bytesToSave - 1);
 8005bae:	4b4e      	ldr	r3, [pc, #312]	@ (8005ce8 <SdoDownloadSegmentInd+0x278>)
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	4b4f      	ldr	r3, [pc, #316]	@ (8005cf0 <SdoDownloadSegmentInd+0x280>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	085b      	lsrs	r3, r3, #1
 8005bb8:	3301      	adds	r3, #1
 8005bba:	005b      	lsls	r3, r3, #1
 8005bbc:	18d0      	adds	r0, r2, r3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f103 010a 	add.w	r1, r3, #10
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	3b01      	subs	r3, #1
 8005bc8:	461a      	mov	r2, r3
 8005bca:	f005 fd65 	bl	800b698 <memcpy>
 8005bce:	e03e      	b.n	8005c4e <SdoDownloadSegmentInd+0x1de>
				}
				else
				{
					// Data0 will be copied to an even address of pSdoSegData, Data1 to an odd address (Segment 1, 3,...)
					// Read Data0 and Data1
					pSdoSegData[(nSdoSegBytesToHandle >> 1)] = ((pSdoInd->SdoHeader.SegHeader >> SEGDATASHIFT) &~SEGHDATA_MASK) | ((pSdoInd->SdoHeader.Data[0] << 8) & SEGHDATA_MASK);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	891b      	ldrh	r3, [r3, #8]
 8005bd4:	0a1b      	lsrs	r3, r3, #8
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	b21a      	sxth	r2, r3
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	895b      	ldrh	r3, [r3, #10]
 8005bde:	021b      	lsls	r3, r3, #8
 8005be0:	b21b      	sxth	r3, r3
 8005be2:	4313      	orrs	r3, r2
 8005be4:	b219      	sxth	r1, r3
 8005be6:	4b40      	ldr	r3, [pc, #256]	@ (8005ce8 <SdoDownloadSegmentInd+0x278>)
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	4b41      	ldr	r3, [pc, #260]	@ (8005cf0 <SdoDownloadSegmentInd+0x280>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	085b      	lsrs	r3, r3, #1
 8005bf0:	005b      	lsls	r3, r3, #1
 8005bf2:	4413      	add	r3, r2
 8005bf4:	b28a      	uxth	r2, r1
 8005bf6:	801a      	strh	r2, [r3, #0]

					// Copy Data2 - DataN
					for (i = 1; i < ((bytesToSave + 1) >> 1); i++)
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	81fb      	strh	r3, [r7, #14]
 8005bfc:	e021      	b.n	8005c42 <SdoDownloadSegmentInd+0x1d2>
					{
						pSdoSegData[(nSdoSegBytesToHandle >> 1) + i] = ((pSdoInd->SdoHeader.Data[i - 1] >> SEGDATASHIFT) & ~SEGHDATA_MASK) | ((pSdoInd->SdoHeader.Data[i] << 8) & SEGHDATA_MASK);
 8005bfe:	89fb      	ldrh	r3, [r7, #14]
 8005c00:	3b01      	subs	r3, #1
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	3304      	adds	r3, #4
 8005c06:	005b      	lsls	r3, r3, #1
 8005c08:	4413      	add	r3, r2
 8005c0a:	885b      	ldrh	r3, [r3, #2]
 8005c0c:	0a1b      	lsrs	r3, r3, #8
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	b21a      	sxth	r2, r3
 8005c12:	89fb      	ldrh	r3, [r7, #14]
 8005c14:	6879      	ldr	r1, [r7, #4]
 8005c16:	3304      	adds	r3, #4
 8005c18:	005b      	lsls	r3, r3, #1
 8005c1a:	440b      	add	r3, r1
 8005c1c:	885b      	ldrh	r3, [r3, #2]
 8005c1e:	021b      	lsls	r3, r3, #8
 8005c20:	b21b      	sxth	r3, r3
 8005c22:	4313      	orrs	r3, r2
 8005c24:	b218      	sxth	r0, r3
 8005c26:	4b30      	ldr	r3, [pc, #192]	@ (8005ce8 <SdoDownloadSegmentInd+0x278>)
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	4b31      	ldr	r3, [pc, #196]	@ (8005cf0 <SdoDownloadSegmentInd+0x280>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	0859      	lsrs	r1, r3, #1
 8005c30:	89fb      	ldrh	r3, [r7, #14]
 8005c32:	440b      	add	r3, r1
 8005c34:	005b      	lsls	r3, r3, #1
 8005c36:	4413      	add	r3, r2
 8005c38:	b282      	uxth	r2, r0
 8005c3a:	801a      	strh	r2, [r3, #0]
					for (i = 1; i < ((bytesToSave + 1) >> 1); i++)
 8005c3c:	89fb      	ldrh	r3, [r7, #14]
 8005c3e:	3301      	adds	r3, #1
 8005c40:	81fb      	strh	r3, [r7, #14]
 8005c42:	89fa      	ldrh	r2, [r7, #14]
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	3301      	adds	r3, #1
 8005c48:	085b      	lsrs	r3, r3, #1
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d3d7      	bcc.n	8005bfe <SdoDownloadSegmentInd+0x18e>
						// (If bytesToSave is odd, one byte too much is copied. But, that is not a problem.)
					}
				}

				if (bSdoSegFollows == FALSE)
 8005c4e:	4b29      	ldr	r3, [pc, #164]	@ (8005cf4 <SdoDownloadSegmentInd+0x284>)
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d177      	bne.n	8005d46 <SdoDownloadSegmentInd+0x2d6>
				{
					/* it was the last segment, OBJ_Write will called to make the Write-operation */
					abort = OBJ_Write(nSdoSegIndex, nSdoSegSubindex, nSdoSegCompleteSize, pSdoSegObjEntry, (UINT16 MBXMEM *) pSdoSegData, bSdoSegAccess);
 8005c56:	4b28      	ldr	r3, [pc, #160]	@ (8005cf8 <SdoDownloadSegmentInd+0x288>)
 8005c58:	8818      	ldrh	r0, [r3, #0]
 8005c5a:	4b28      	ldr	r3, [pc, #160]	@ (8005cfc <SdoDownloadSegmentInd+0x28c>)
 8005c5c:	7819      	ldrb	r1, [r3, #0]
 8005c5e:	4b23      	ldr	r3, [pc, #140]	@ (8005cec <SdoDownloadSegmentInd+0x27c>)
 8005c60:	681c      	ldr	r4, [r3, #0]
 8005c62:	4b27      	ldr	r3, [pc, #156]	@ (8005d00 <SdoDownloadSegmentInd+0x290>)
 8005c64:	681d      	ldr	r5, [r3, #0]
 8005c66:	4b20      	ldr	r3, [pc, #128]	@ (8005ce8 <SdoDownloadSegmentInd+0x278>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a26      	ldr	r2, [pc, #152]	@ (8005d04 <SdoDownloadSegmentInd+0x294>)
 8005c6c:	7812      	ldrb	r2, [r2, #0]
 8005c6e:	9201      	str	r2, [sp, #4]
 8005c70:	9300      	str	r3, [sp, #0]
 8005c72:	462b      	mov	r3, r5
 8005c74:	4622      	mov	r2, r4
 8005c76:	f7ff fb23 	bl	80052c0 <OBJ_Write>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	75fb      	strb	r3, [r7, #23]
					if (abort == ABORTIDX_WORKING)
 8005c7e:	7dfb      	ldrb	r3, [r7, #23]
 8005c80:	2bff      	cmp	r3, #255	@ 0xff
 8005c82:	d155      	bne.n	8005d30 <SdoDownloadSegmentInd+0x2c0>
					{
						/* the application generates the SDO-Response later on by calling SDOS_SdoRes (only possible if object access function pointer is defined) */
						u8PendingSdo = SDO_PENDING_SEG_WRITE;
 8005c84:	4b20      	ldr	r3, [pc, #128]	@ (8005d08 <SdoDownloadSegmentInd+0x298>)
 8005c86:	2202      	movs	r2, #2
 8005c88:	701a      	strb	r2, [r3, #0]
						bStoreCompleteAccess = bSdoSegAccess;
 8005c8a:	4b1e      	ldr	r3, [pc, #120]	@ (8005d04 <SdoDownloadSegmentInd+0x294>)
 8005c8c:	781a      	ldrb	r2, [r3, #0]
 8005c8e:	4b1f      	ldr	r3, [pc, #124]	@ (8005d0c <SdoDownloadSegmentInd+0x29c>)
 8005c90:	701a      	strb	r2, [r3, #0]
						u8StoreSubindex = nSdoSegSubindex;
 8005c92:	4b1a      	ldr	r3, [pc, #104]	@ (8005cfc <SdoDownloadSegmentInd+0x28c>)
 8005c94:	781a      	ldrb	r2, [r3, #0]
 8005c96:	4b1e      	ldr	r3, [pc, #120]	@ (8005d10 <SdoDownloadSegmentInd+0x2a0>)
 8005c98:	701a      	strb	r2, [r3, #0]
						u16StoreIndex = nSdoSegIndex;
 8005c9a:	4b17      	ldr	r3, [pc, #92]	@ (8005cf8 <SdoDownloadSegmentInd+0x288>)
 8005c9c:	881a      	ldrh	r2, [r3, #0]
 8005c9e:	4b1d      	ldr	r3, [pc, #116]	@ (8005d14 <SdoDownloadSegmentInd+0x2a4>)
 8005ca0:	801a      	strh	r2, [r3, #0]
						u32StoreDataSize = nSdoSegCompleteSize;
 8005ca2:	4b12      	ldr	r3, [pc, #72]	@ (8005cec <SdoDownloadSegmentInd+0x27c>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a1c      	ldr	r2, [pc, #112]	@ (8005d18 <SdoDownloadSegmentInd+0x2a8>)
 8005ca8:	6013      	str	r3, [r2, #0]
						pStoreData = pSdoSegData;
 8005caa:	4b0f      	ldr	r3, [pc, #60]	@ (8005ce8 <SdoDownloadSegmentInd+0x278>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a1b      	ldr	r2, [pc, #108]	@ (8005d1c <SdoDownloadSegmentInd+0x2ac>)
 8005cb0:	6013      	str	r3, [r2, #0]

						pSdoPendFunc = pSdoSegObjEntry->Write;
 8005cb2:	4b13      	ldr	r3, [pc, #76]	@ (8005d00 <SdoDownloadSegmentInd+0x290>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	6a1b      	ldr	r3, [r3, #32]
 8005cb8:	4a19      	ldr	r2, [pc, #100]	@ (8005d20 <SdoDownloadSegmentInd+0x2b0>)
 8005cba:	6013      	str	r3, [r2, #0]

						bSdoInWork = TRUE;
 8005cbc:	4b19      	ldr	r3, [pc, #100]	@ (8005d24 <SdoDownloadSegmentInd+0x2b4>)
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	701a      	strb	r2, [r3, #0]
						pSdoResStored = (TINITSDOMBX MBXMEM *) pSdoInd;
 8005cc2:	4a19      	ldr	r2, [pc, #100]	@ (8005d28 <SdoDownloadSegmentInd+0x2b8>)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6013      	str	r3, [r2, #0]

						bSdoSegFollows = FALSE;
 8005cc8:	4b0a      	ldr	r3, [pc, #40]	@ (8005cf4 <SdoDownloadSegmentInd+0x284>)
 8005cca:	2200      	movs	r2, #0
 8005ccc:	701a      	strb	r2, [r3, #0]
						nSdoSegService = 0;
 8005cce:	4b17      	ldr	r3, [pc, #92]	@ (8005d2c <SdoDownloadSegmentInd+0x2bc>)
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	701a      	strb	r2, [r3, #0]
						nSdoSegBytesToHandle = 0;
 8005cd4:	4b06      	ldr	r3, [pc, #24]	@ (8005cf0 <SdoDownloadSegmentInd+0x280>)
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	601a      	str	r2, [r3, #0]

						return ABORTIDX_WORKING;
 8005cda:	23ff      	movs	r3, #255	@ 0xff
 8005cdc:	e07a      	b.n	8005dd4 <SdoDownloadSegmentInd+0x364>
 8005cde:	bf00      	nop
 8005ce0:	24000670 	.word	0x24000670
 8005ce4:	2400051c 	.word	0x2400051c
 8005ce8:	24000654 	.word	0x24000654
 8005cec:	24000674 	.word	0x24000674
 8005cf0:	2400066c 	.word	0x2400066c
 8005cf4:	24000666 	.word	0x24000666
 8005cf8:	24000668 	.word	0x24000668
 8005cfc:	2400066a 	.word	0x2400066a
 8005d00:	24000678 	.word	0x24000678
 8005d04:	24000667 	.word	0x24000667
 8005d08:	24000630 	.word	0x24000630
 8005d0c:	24000631 	.word	0x24000631
 8005d10:	24000632 	.word	0x24000632
 8005d14:	24000634 	.word	0x24000634
 8005d18:	24000638 	.word	0x24000638
 8005d1c:	2400063c 	.word	0x2400063c
 8005d20:	24000640 	.word	0x24000640
 8005d24:	24000664 	.word	0x24000664
 8005d28:	24000660 	.word	0x24000660
 8005d2c:	24000665 	.word	0x24000665
					}
					else
					{
						/* the allocated buffer can be released */
						FREEMEM((UINT16 VARMEM *) pSdoSegData);
 8005d30:	4b2a      	ldr	r3, [pc, #168]	@ (8005ddc <SdoDownloadSegmentInd+0x36c>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4618      	mov	r0, r3
 8005d36:	f005 fbb5 	bl	800b4a4 <free>
						pSdoSegData = NULL;
 8005d3a:	4b28      	ldr	r3, [pc, #160]	@ (8005ddc <SdoDownloadSegmentInd+0x36c>)
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	601a      	str	r2, [r3, #0]
 8005d40:	e001      	b.n	8005d46 <SdoDownloadSegmentInd+0x2d6>
				}
			}
		}
		else
		{
			abort = ABORTIDX_COMMAND_SPECIFIER_UNKNOWN;
 8005d42:	2303      	movs	r3, #3
 8005d44:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (abort == 0)
 8005d46:	7dfb      	ldrb	r3, [r7, #23]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d12d      	bne.n	8005da8 <SdoDownloadSegmentInd+0x338>
	{
		/* send the SDO Download Segment response */
		pSdoInd->MbxHeader.Length = SEGMENT_NORM_RES_SIZE;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	220a      	movs	r2, #10
 8005d50:	801a      	strh	r2, [r3, #0]
		pSdoInd->CoeHeader &= ~COEHEADER_COESERVICEMASK;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	88db      	ldrh	r3, [r3, #6]
 8005d56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d5a:	b29a      	uxth	r2, r3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	80da      	strh	r2, [r3, #6]
		pSdoInd->CoeHeader |= ((UINT16)COESERVICE_SDORESPONSE) << COEHEADER_COESERVICESHIFT;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	88db      	ldrh	r3, [r3, #6]
 8005d64:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 8005d68:	b29a      	uxth	r2, r3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	80da      	strh	r2, [r3, #6]
		/* the SDO Download Segment header depends if it was the last segment or not */
		if (bSdoSegLastToggle)
 8005d6e:	4b1c      	ldr	r3, [pc, #112]	@ (8005de0 <SdoDownloadSegmentInd+0x370>)
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d003      	beq.n	8005d7e <SdoDownloadSegmentInd+0x30e>
		{
			pSdoInd->SdoHeader.SegHeader = SWAPWORD(SDOSERVICE_DOWNLOADSEGMENTRES | SEGHEADER_TOGGLE);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2230      	movs	r2, #48	@ 0x30
 8005d7a:	811a      	strh	r2, [r3, #8]
 8005d7c:	e002      	b.n	8005d84 <SdoDownloadSegmentInd+0x314>
		}
		else
		{
			pSdoInd->SdoHeader.SegHeader = SWAPWORD(SDOSERVICE_DOWNLOADSEGMENTRES);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2220      	movs	r2, #32
 8005d82:	811a      	strh	r2, [r3, #8]
		}

		if (bSdoSegFollows == TRUE)
 8005d84:	4b17      	ldr	r3, [pc, #92]	@ (8005de4 <SdoDownloadSegmentInd+0x374>)
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d106      	bne.n	8005d9a <SdoDownloadSegmentInd+0x32a>
		{
			/* segments are still expected, nSdoSegBytesToHandle contains the number of received data bytes */
			nSdoSegBytesToHandle += bytesToSave;
 8005d8c:	4b16      	ldr	r3, [pc, #88]	@ (8005de8 <SdoDownloadSegmentInd+0x378>)
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	4413      	add	r3, r2
 8005d94:	4a14      	ldr	r2, [pc, #80]	@ (8005de8 <SdoDownloadSegmentInd+0x378>)
 8005d96:	6013      	str	r3, [r2, #0]
 8005d98:	e01b      	b.n	8005dd2 <SdoDownloadSegmentInd+0x362>
		}
		else
		{
			/* the last segment was received, the variables are reset */
			nSdoSegBytesToHandle = 0;
 8005d9a:	4b13      	ldr	r3, [pc, #76]	@ (8005de8 <SdoDownloadSegmentInd+0x378>)
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	601a      	str	r2, [r3, #0]
			nSdoSegService = 0;
 8005da0:	4b12      	ldr	r3, [pc, #72]	@ (8005dec <SdoDownloadSegmentInd+0x37c>)
 8005da2:	2200      	movs	r2, #0
 8005da4:	701a      	strb	r2, [r3, #0]
 8005da6:	e014      	b.n	8005dd2 <SdoDownloadSegmentInd+0x362>
		}
	}
	else
	{
		/* the Abort-Response will be sent in SDOS_SdoInd*/
		bSdoSegFollows = FALSE;
 8005da8:	4b0e      	ldr	r3, [pc, #56]	@ (8005de4 <SdoDownloadSegmentInd+0x374>)
 8005daa:	2200      	movs	r2, #0
 8005dac:	701a      	strb	r2, [r3, #0]
		nSdoSegService = 0;
 8005dae:	4b0f      	ldr	r3, [pc, #60]	@ (8005dec <SdoDownloadSegmentInd+0x37c>)
 8005db0:	2200      	movs	r2, #0
 8005db2:	701a      	strb	r2, [r3, #0]
		if (pSdoSegData)
 8005db4:	4b09      	ldr	r3, [pc, #36]	@ (8005ddc <SdoDownloadSegmentInd+0x36c>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d007      	beq.n	8005dcc <SdoDownloadSegmentInd+0x35c>
		{
			/* the memory has to be released if it is not released before.
			In case of AbortIdx_Working the buffer will be freed in SDOS_SdoRes*/
			FREEMEM((UINT16 VARMEM *) pSdoSegData);
 8005dbc:	4b07      	ldr	r3, [pc, #28]	@ (8005ddc <SdoDownloadSegmentInd+0x36c>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f005 fb6f 	bl	800b4a4 <free>
			pSdoSegData = NULL;
 8005dc6:	4b05      	ldr	r3, [pc, #20]	@ (8005ddc <SdoDownloadSegmentInd+0x36c>)
 8005dc8:	2200      	movs	r2, #0
 8005dca:	601a      	str	r2, [r3, #0]
		}

		nSdoSegBytesToHandle = 0;
 8005dcc:	4b06      	ldr	r3, [pc, #24]	@ (8005de8 <SdoDownloadSegmentInd+0x378>)
 8005dce:	2200      	movs	r2, #0
 8005dd0:	601a      	str	r2, [r3, #0]
	}

	return abort;
 8005dd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3718      	adds	r7, #24
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bdb0      	pop	{r4, r5, r7, pc}
 8005ddc:	24000654 	.word	0x24000654
 8005de0:	24000670 	.word	0x24000670
 8005de4:	24000666 	.word	0x24000666
 8005de8:	2400066c 	.word	0x2400066c
 8005dec:	24000665 	.word	0x24000665

08005df0 <SdoUploadSegmentInd>:
			is received from the master. It prepares and operates the
			response and sends it by itself.
*////////////////////////////////////////////////////////////////////////////////////////

static UINT8 SdoUploadSegmentInd(TUPLOADSDOSEGREQMBX MBXMEM * pSdoInd)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b088      	sub	sp, #32
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
	UINT8 abort = 0;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	77fb      	strb	r3, [r7, #31]
	TUPLOADSDOSEGRESMBX MBXMEM * pSdoSegRes = (TUPLOADSDOSEGRESMBX MBXMEM *)pSdoInd;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	613b      	str	r3, [r7, #16]

	if (SWAPWORD(pSdoInd->SegHeader & SEGHEADER_TOGGLE) == bSdoSegLastToggle)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	7a1b      	ldrb	r3, [r3, #8]
 8005e04:	f003 0310 	and.w	r3, r3, #16
 8005e08:	4a83      	ldr	r2, [pc, #524]	@ (8006018 <SdoUploadSegmentInd+0x228>)
 8005e0a:	7812      	ldrb	r2, [r2, #0]
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d102      	bne.n	8005e16 <SdoUploadSegmentInd+0x26>
	{
		/* toggle bit has not toggled... */
		abort = ABORTIDX_TOGGLE_BIT_NOT_CHANGED;
 8005e10:	2301      	movs	r3, #1
 8005e12:	77fb      	strb	r3, [r7, #31]
 8005e14:	e0fa      	b.n	800600c <SdoUploadSegmentInd+0x21c>
	}
	else
	{
		/* maxData contains the maximum data to be sent with a SDO-Upload Segment response */

		UINT32 size = 0;
 8005e16:	2300      	movs	r3, #0
 8005e18:	61bb      	str	r3, [r7, #24]
		UINT16 maxData;

		{
			maxData = u16SendMbxSize - MBX_HEADER_SIZE - SEGMENT_NORM_HEADER_SIZE;
 8005e1a:	4b80      	ldr	r3, [pc, #512]	@ (800601c <SdoUploadSegmentInd+0x22c>)
 8005e1c:	881b      	ldrh	r3, [r3, #0]
 8005e1e:	3b09      	subs	r3, #9
 8005e20:	81fb      	strh	r3, [r7, #14]
		}

		/* the new toggle bit is stored in bSdoSegLastToggle */
		bSdoSegLastToggle = pSdoInd->SegHeader & SEGHEADER_TOGGLE;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	7a1b      	ldrb	r3, [r3, #8]
 8005e26:	f003 0310 	and.w	r3, r3, #16
 8005e2a:	b2da      	uxtb	r2, r3
 8005e2c:	4b7a      	ldr	r3, [pc, #488]	@ (8006018 <SdoUploadSegmentInd+0x228>)
 8005e2e:	701a      	strb	r2, [r3, #0]

		if (nSdoSegCompleteSize < (nSdoSegBytesToHandle + maxData))
 8005e30:	89fa      	ldrh	r2, [r7, #14]
 8005e32:	4b7b      	ldr	r3, [pc, #492]	@ (8006020 <SdoUploadSegmentInd+0x230>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	441a      	add	r2, r3
 8005e38:	4b7a      	ldr	r3, [pc, #488]	@ (8006024 <SdoUploadSegmentInd+0x234>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d909      	bls.n	8005e54 <SdoUploadSegmentInd+0x64>
		{
			/* the remaining data can be send with one SDO Upload Segment response,
			   size contains the data to be copied */
			size = nSdoSegCompleteSize - nSdoSegBytesToHandle;
 8005e40:	4b78      	ldr	r3, [pc, #480]	@ (8006024 <SdoUploadSegmentInd+0x234>)
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	4b76      	ldr	r3, [pc, #472]	@ (8006020 <SdoUploadSegmentInd+0x230>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	61bb      	str	r3, [r7, #24]
			bSdoSegFollows = FALSE;
 8005e4c:	4b76      	ldr	r3, [pc, #472]	@ (8006028 <SdoUploadSegmentInd+0x238>)
 8005e4e:	2200      	movs	r2, #0
 8005e50:	701a      	strb	r2, [r3, #0]
 8005e52:	e004      	b.n	8005e5e <SdoUploadSegmentInd+0x6e>
		}
		else
		{
			/* more data will follow, size contains the data to be copied */
			size = maxData;
 8005e54:	89fb      	ldrh	r3, [r7, #14]
 8005e56:	61bb      	str	r3, [r7, #24]
			bSdoSegFollows = TRUE;
 8005e58:	4b73      	ldr	r3, [pc, #460]	@ (8006028 <SdoUploadSegmentInd+0x238>)
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	701a      	strb	r2, [r3, #0]
		}

		/* copy the object data in the SDO Upload segment response */
		// Clear Data0
		pSdoSegRes->SdoHeader.SegHeader &= ~SEGHDATA_MASK;
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	891b      	ldrh	r3, [r3, #8]
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	b29a      	uxth	r2, r3
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	811a      	strh	r2, [r3, #8]
		if ((nSdoSegBytesToHandle & 0x1) == 0x01)
 8005e6a:	4b6d      	ldr	r3, [pc, #436]	@ (8006020 <SdoUploadSegmentInd+0x230>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 0301 	and.w	r3, r3, #1
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d024      	beq.n	8005ec0 <SdoUploadSegmentInd+0xd0>
		{
			// Data starts at odd byte number (Segment 2, 4,...): Data0 is at high byte, Data1 lies at an even address
			// Write Data0
			pSdoSegRes->SdoHeader.SegHeader |= (pSdoSegData[(nSdoSegBytesToHandle >> 1)] & SEGHDATA_MASK);
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	891b      	ldrh	r3, [r3, #8]
 8005e7a:	b21a      	sxth	r2, r3
 8005e7c:	4b6b      	ldr	r3, [pc, #428]	@ (800602c <SdoUploadSegmentInd+0x23c>)
 8005e7e:	6819      	ldr	r1, [r3, #0]
 8005e80:	4b67      	ldr	r3, [pc, #412]	@ (8006020 <SdoUploadSegmentInd+0x230>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	085b      	lsrs	r3, r3, #1
 8005e86:	005b      	lsls	r3, r3, #1
 8005e88:	440b      	add	r3, r1
 8005e8a:	881b      	ldrh	r3, [r3, #0]
 8005e8c:	b21b      	sxth	r3, r3
 8005e8e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005e92:	b21b      	sxth	r3, r3
 8005e94:	4313      	orrs	r3, r2
 8005e96:	b21b      	sxth	r3, r3
 8005e98:	b29a      	uxth	r2, r3
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	811a      	strh	r2, [r3, #8]
			// Copy Data1 - DataN
			MBXMEMCPY(pSdoSegRes->SdoHeader.Data, &pSdoSegData[(nSdoSegBytesToHandle >> 1) + 1], size - 1);
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	f103 000a 	add.w	r0, r3, #10
 8005ea4:	4b61      	ldr	r3, [pc, #388]	@ (800602c <SdoUploadSegmentInd+0x23c>)
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	4b5d      	ldr	r3, [pc, #372]	@ (8006020 <SdoUploadSegmentInd+0x230>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	085b      	lsrs	r3, r3, #1
 8005eae:	3301      	adds	r3, #1
 8005eb0:	005b      	lsls	r3, r3, #1
 8005eb2:	18d1      	adds	r1, r2, r3
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	3b01      	subs	r3, #1
 8005eb8:	461a      	mov	r2, r3
 8005eba:	f005 fbed 	bl	800b698 <memcpy>
 8005ebe:	e045      	b.n	8005f4c <SdoUploadSegmentInd+0x15c>
		}
		else
		{
			UINT16 i = 0;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	82fb      	strh	r3, [r7, #22]
			UINT32 nIndexOffset = nSdoSegBytesToHandle >> 1;
 8005ec4:	4b56      	ldr	r3, [pc, #344]	@ (8006020 <SdoUploadSegmentInd+0x230>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	085b      	lsrs	r3, r3, #1
 8005eca:	60bb      	str	r3, [r7, #8]

			// Data starts at even byte number (Segment 1,3, ...): Data0 is at low byte, Data1 lies at an odd address
			// Write Data0
			pSdoSegRes->SdoHeader.SegHeader |= ((pSdoSegData[(nSdoSegBytesToHandle >> 1)] << SEGDATASHIFT) & SEGHDATA_MASK);
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	891b      	ldrh	r3, [r3, #8]
 8005ed0:	b21a      	sxth	r2, r3
 8005ed2:	4b56      	ldr	r3, [pc, #344]	@ (800602c <SdoUploadSegmentInd+0x23c>)
 8005ed4:	6819      	ldr	r1, [r3, #0]
 8005ed6:	4b52      	ldr	r3, [pc, #328]	@ (8006020 <SdoUploadSegmentInd+0x230>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	085b      	lsrs	r3, r3, #1
 8005edc:	005b      	lsls	r3, r3, #1
 8005ede:	440b      	add	r3, r1
 8005ee0:	881b      	ldrh	r3, [r3, #0]
 8005ee2:	021b      	lsls	r3, r3, #8
 8005ee4:	b21b      	sxth	r3, r3
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	b21b      	sxth	r3, r3
 8005eea:	b29a      	uxth	r2, r3
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	811a      	strh	r2, [r3, #8]
			// Copy Data1 - DataN

			for (i = 0; i < (size >> 1); i++)
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	82fb      	strh	r3, [r7, #22]
 8005ef4:	e025      	b.n	8005f42 <SdoUploadSegmentInd+0x152>
			{
				pSdoSegRes->SdoHeader.Data[i] = ((pSdoSegData[i + nIndexOffset] & SEGHDATA_MASK) >> 8) | ((pSdoSegData[i + nIndexOffset + 1] & ~SEGHDATA_MASK) << 8);
 8005ef6:	4b4d      	ldr	r3, [pc, #308]	@ (800602c <SdoUploadSegmentInd+0x23c>)
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	8af9      	ldrh	r1, [r7, #22]
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	440b      	add	r3, r1
 8005f00:	005b      	lsls	r3, r3, #1
 8005f02:	4413      	add	r3, r2
 8005f04:	881b      	ldrh	r3, [r3, #0]
 8005f06:	0a1b      	lsrs	r3, r3, #8
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	b21a      	sxth	r2, r3
 8005f0c:	4b47      	ldr	r3, [pc, #284]	@ (800602c <SdoUploadSegmentInd+0x23c>)
 8005f0e:	6819      	ldr	r1, [r3, #0]
 8005f10:	8af8      	ldrh	r0, [r7, #22]
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	4403      	add	r3, r0
 8005f16:	3301      	adds	r3, #1
 8005f18:	005b      	lsls	r3, r3, #1
 8005f1a:	440b      	add	r3, r1
 8005f1c:	881b      	ldrh	r3, [r3, #0]
 8005f1e:	021b      	lsls	r3, r3, #8
 8005f20:	b21b      	sxth	r3, r3
 8005f22:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005f26:	b21b      	sxth	r3, r3
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	b21a      	sxth	r2, r3
 8005f2c:	8afb      	ldrh	r3, [r7, #22]
 8005f2e:	b291      	uxth	r1, r2
 8005f30:	693a      	ldr	r2, [r7, #16]
 8005f32:	3304      	adds	r3, #4
 8005f34:	005b      	lsls	r3, r3, #1
 8005f36:	4413      	add	r3, r2
 8005f38:	460a      	mov	r2, r1
 8005f3a:	805a      	strh	r2, [r3, #2]
			for (i = 0; i < (size >> 1); i++)
 8005f3c:	8afb      	ldrh	r3, [r7, #22]
 8005f3e:	3301      	adds	r3, #1
 8005f40:	82fb      	strh	r3, [r7, #22]
 8005f42:	8afa      	ldrh	r2, [r7, #22]
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	085b      	lsrs	r3, r3, #1
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d3d4      	bcc.n	8005ef6 <SdoUploadSegmentInd+0x106>
				// (If size is even, one byte too much is copied. But, that is not a problem.)
			}
		}

		/* the SDO Upload Segment header depends if there is still data to be sent */
		pSdoSegRes->CoeHeader &= ~COEHEADER_COESERVICEMASK;
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	88db      	ldrh	r3, [r3, #6]
 8005f50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f54:	b29a      	uxth	r2, r3
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	80da      	strh	r2, [r3, #6]
		pSdoSegRes->CoeHeader |= ((UINT16)COESERVICE_SDORESPONSE) << COEHEADER_COESERVICESHIFT;
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	88db      	ldrh	r3, [r3, #6]
 8005f5e:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 8005f62:	b29a      	uxth	r2, r3
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	80da      	strh	r2, [r3, #6]

		/*Clear SDO header*/
		pSdoSegRes->SdoHeader.SegHeader &= ~SEGHEADER_MASK;
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	891b      	ldrh	r3, [r3, #8]
 8005f6c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005f70:	b29a      	uxth	r2, r3
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	811a      	strh	r2, [r3, #8]
		if (bSdoSegFollows)
 8005f76:	4b2c      	ldr	r3, [pc, #176]	@ (8006028 <SdoUploadSegmentInd+0x238>)
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d008      	beq.n	8005f90 <SdoUploadSegmentInd+0x1a0>
		{
			pSdoSegRes->SdoHeader.SegHeader |= SWAPWORD(SDOSERVICE_UPLOADSEGMENTRES | bSdoSegLastToggle);
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	891b      	ldrh	r3, [r3, #8]
 8005f82:	4a25      	ldr	r2, [pc, #148]	@ (8006018 <SdoUploadSegmentInd+0x228>)
 8005f84:	7812      	ldrb	r2, [r2, #0]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	b29a      	uxth	r2, r3
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	811a      	strh	r2, [r3, #8]
 8005f8e:	e00a      	b.n	8005fa6 <SdoUploadSegmentInd+0x1b6>
		}
		else
		{
			pSdoSegRes->SdoHeader.SegHeader |= SWAPWORD(SDOSERVICE_UPLOADSEGMENTRES | bSdoSegLastToggle | SEGHEADER_NOMOREFOLLOWS);
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	891b      	ldrh	r3, [r3, #8]
 8005f94:	4a20      	ldr	r2, [pc, #128]	@ (8006018 <SdoUploadSegmentInd+0x228>)
 8005f96:	7812      	ldrb	r2, [r2, #0]
 8005f98:	f042 0201 	orr.w	r2, r2, #1
 8005f9c:	b2d2      	uxtb	r2, r2
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	b29a      	uxth	r2, r3
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	811a      	strh	r2, [r3, #8]
		}

				// operate CAN specific flag segDataSize:
				/* HBu 06.02.06: the sizes were wrong */
		if (size < MIN_SEGMENTED_DATA)
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	2b06      	cmp	r3, #6
 8005faa:	d810      	bhi.n	8005fce <SdoUploadSegmentInd+0x1de>
		{
			// at least    MIN_SEGMENTED_DATA bytes have to be send:
			pSdoSegRes->MbxHeader.Length = SEGMENT_NORM_RES_SIZE;
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	220a      	movs	r2, #10
 8005fb0:	801a      	strh	r2, [r3, #0]
			pSdoSegRes->SdoHeader.SegHeader |= (MIN_SEGMENTED_DATA - size) << SEGHEADERSHIFT_SEGDATASIZE;
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	891a      	ldrh	r2, [r3, #8]
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	f1c3 0307 	rsb	r3, r3, #7
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	005b      	lsls	r3, r3, #1
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	b29a      	uxth	r2, r3
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	811a      	strh	r2, [r3, #8]
 8005fcc:	e005      	b.n	8005fda <SdoUploadSegmentInd+0x1ea>
		}
		else
		{
			pSdoSegRes->MbxHeader.Length = ((UINT16)size) + SEGMENT_NORM_HEADER_SIZE;
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	3303      	adds	r3, #3
 8005fd4:	b29a      	uxth	r2, r3
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	801a      	strh	r2, [r3, #0]
		}

		if (bSdoSegFollows == TRUE)
 8005fda:	4b13      	ldr	r3, [pc, #76]	@ (8006028 <SdoUploadSegmentInd+0x238>)
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d106      	bne.n	8005ff0 <SdoUploadSegmentInd+0x200>
		{
			// updating the value of send bytes:
			nSdoSegBytesToHandle += size;
 8005fe2:	4b0f      	ldr	r3, [pc, #60]	@ (8006020 <SdoUploadSegmentInd+0x230>)
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	4413      	add	r3, r2
 8005fea:	4a0d      	ldr	r2, [pc, #52]	@ (8006020 <SdoUploadSegmentInd+0x230>)
 8005fec:	6013      	str	r3, [r2, #0]
 8005fee:	e00d      	b.n	800600c <SdoUploadSegmentInd+0x21c>
		}
		else
		{
			FREEMEM((UINT16 VARMEM *) pSdoSegData);
 8005ff0:	4b0e      	ldr	r3, [pc, #56]	@ (800602c <SdoUploadSegmentInd+0x23c>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f005 fa55 	bl	800b4a4 <free>
			pSdoSegData = NULL;
 8005ffa:	4b0c      	ldr	r3, [pc, #48]	@ (800602c <SdoUploadSegmentInd+0x23c>)
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	601a      	str	r2, [r3, #0]
			nSdoSegBytesToHandle = 0;
 8006000:	4b07      	ldr	r3, [pc, #28]	@ (8006020 <SdoUploadSegmentInd+0x230>)
 8006002:	2200      	movs	r2, #0
 8006004:	601a      	str	r2, [r3, #0]
			nSdoSegService = 0;
 8006006:	4b0a      	ldr	r3, [pc, #40]	@ (8006030 <SdoUploadSegmentInd+0x240>)
 8006008:	2200      	movs	r2, #0
 800600a:	701a      	strb	r2, [r3, #0]
		}
	}

	return abort;
 800600c:	7ffb      	ldrb	r3, [r7, #31]
}
 800600e:	4618      	mov	r0, r3
 8006010:	3720      	adds	r7, #32
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}
 8006016:	bf00      	nop
 8006018:	24000670 	.word	0x24000670
 800601c:	2400051a 	.word	0x2400051a
 8006020:	2400066c 	.word	0x2400066c
 8006024:	24000674 	.word	0x24000674
 8006028:	24000666 	.word	0x24000666
 800602c:	24000654 	.word	0x24000654
 8006030:	24000665 	.word	0x24000665

08006034 <SdoRes>:

 \brief    This function is called when a SDO response shall be sent
*////////////////////////////////////////////////////////////////////////////////////////

void SdoRes(UINT8 abort, UINT8 command, UINT8 completeAccess, UINT16 dataSize, UINT32 objLength, TINITSDOMBX MBXMEM *pSdoRes)
{
 8006034:	b590      	push	{r4, r7, lr}
 8006036:	b083      	sub	sp, #12
 8006038:	af00      	add	r7, sp, #0
 800603a:	4604      	mov	r4, r0
 800603c:	4608      	mov	r0, r1
 800603e:	4611      	mov	r1, r2
 8006040:	461a      	mov	r2, r3
 8006042:	4623      	mov	r3, r4
 8006044:	71fb      	strb	r3, [r7, #7]
 8006046:	4603      	mov	r3, r0
 8006048:	71bb      	strb	r3, [r7, #6]
 800604a:	460b      	mov	r3, r1
 800604c:	717b      	strb	r3, [r7, #5]
 800604e:	4613      	mov	r3, r2
 8006050:	807b      	strh	r3, [r7, #2]
	/* for an upload segment response the toggle bit was overwritten */
	if ((command != SDOSERVICE_UPLOADSEGMENTREQ) && (command != SDOSERVICE_DOWNLOADSEGMENTREQ))
 8006052:	79bb      	ldrb	r3, [r7, #6]
 8006054:	2b60      	cmp	r3, #96	@ 0x60
 8006056:	d009      	beq.n	800606c <SdoRes+0x38>
 8006058:	79bb      	ldrb	r3, [r7, #6]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d006      	beq.n	800606c <SdoRes+0x38>
	{
		pSdoRes->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] &= 0xFF00;
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	891b      	ldrh	r3, [r3, #8]
 8006062:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006066:	b29a      	uxth	r2, r3
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	811a      	strh	r2, [r3, #8]
	}
	if (abort == 0)
 800606c:	79fb      	ldrb	r3, [r7, #7]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d171      	bne.n	8006156 <SdoRes+0x122>
	{
		/* SDO-Download or SDO-Upload was successful, generate the SDO- and CoE-Header */
		pSdoRes->CoeHeader &= ~COEHEADER_COESERVICEMASK;
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	88db      	ldrh	r3, [r3, #6]
 8006076:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800607a:	b29a      	uxth	r2, r3
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	80da      	strh	r2, [r3, #6]
		pSdoRes->CoeHeader |= ((UINT16)COESERVICE_SDORESPONSE) << COEHEADER_COESERVICESHIFT;
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	88db      	ldrh	r3, [r3, #6]
 8006084:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 8006088:	b29a      	uxth	r2, r3
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	80da      	strh	r2, [r3, #6]
		if (command == SDOSERVICE_INITIATEUPLOADREQ)
 800608e:	79bb      	ldrb	r3, [r7, #6]
 8006090:	2b40      	cmp	r3, #64	@ 0x40
 8006092:	d144      	bne.n	800611e <SdoRes+0xea>
		{
			// HBu 06.02.06: Complete Access Bit in the SDO-Upload-Response too */
			if ((objLength <= 4) && (objLength > 0))
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	2b04      	cmp	r3, #4
 8006098:	d81d      	bhi.n	80060d6 <SdoRes+0xa2>
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d01a      	beq.n	80060d6 <SdoRes+0xa2>
			{
				/* Expedited Upload Response */
				pSdoRes->MbxHeader.Length = EXPEDITED_FRAME_SIZE;
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	220a      	movs	r2, #10
 80060a4:	801a      	strh	r2, [r3, #0]
				pSdoRes->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] |= SWAPWORD(SDOHEADER_SIZEINDICATOR |
 80060a6:	69fb      	ldr	r3, [r7, #28]
 80060a8:	891a      	ldrh	r2, [r3, #8]
 80060aa:	797b      	ldrb	r3, [r7, #5]
 80060ac:	f043 0303 	orr.w	r3, r3, #3
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	b219      	sxth	r1, r3
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	f1c3 0304 	rsb	r3, r3, #4
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	b21b      	sxth	r3, r3
 80060c0:	430b      	orrs	r3, r1
 80060c2:	b21b      	sxth	r3, r3
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	4313      	orrs	r3, r2
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80060ce:	b29a      	uxth	r2, r3
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	811a      	strh	r2, [r3, #8]
 80060d4:	e05d      	b.n	8006192 <SdoRes+0x15e>
					SDOSERVICE_INITIATEUPLOADRES);
			}
			else
			{
				/* Normal or Segmented Upload Response */
				if (dataSize < objLength)
 80060d6:	887b      	ldrh	r3, [r7, #2]
 80060d8:	69ba      	ldr	r2, [r7, #24]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d905      	bls.n	80060ea <SdoRes+0xb6>
				{
					pSdoRes->MbxHeader.Length = UPLOAD_NORM_RES_SIZE + dataSize;
 80060de:	887b      	ldrh	r3, [r7, #2]
 80060e0:	330a      	adds	r3, #10
 80060e2:	b29a      	uxth	r2, r3
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	801a      	strh	r2, [r3, #0]
 80060e8:	e005      	b.n	80060f6 <SdoRes+0xc2>
				}
				else
				{
					pSdoRes->MbxHeader.Length = UPLOAD_NORM_RES_SIZE + ((UINT16)objLength);
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	330a      	adds	r3, #10
 80060f0:	b29a      	uxth	r2, r3
 80060f2:	69fb      	ldr	r3, [r7, #28]
 80060f4:	801a      	strh	r2, [r3, #0]
				}
				((TINITSDOUPLOADNORMRESMBX MBXMEM *) pSdoRes)->CompleteSize[0] = SWAPWORD((UINT16)objLength);
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	b29a      	uxth	r2, r3
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	819a      	strh	r2, [r3, #12]
				((TINITSDOUPLOADNORMRESMBX MBXMEM *) pSdoRes)->CompleteSize[1] = SWAPWORD((UINT16)(objLength >> 16));
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	0c1b      	lsrs	r3, r3, #16
 8006102:	b29a      	uxth	r2, r3
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	81da      	strh	r2, [r3, #14]
				pSdoRes->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] |= SWAPWORD(SDOHEADER_SIZEINDICATOR |
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	891b      	ldrh	r3, [r3, #8]
 800610c:	797a      	ldrb	r2, [r7, #5]
 800610e:	f042 0241 	orr.w	r2, r2, #65	@ 0x41
 8006112:	b2d2      	uxtb	r2, r2
 8006114:	4313      	orrs	r3, r2
 8006116:	b29a      	uxth	r2, r3
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	811a      	strh	r2, [r3, #8]
 800611c:	e039      	b.n	8006192 <SdoRes+0x15e>
					SDOSERVICE_INITIATEUPLOADRES);

			}
		}
		/* for a segmented response the command was wrong in the response */
		else if (command == SDOSERVICE_DOWNLOADSEGMENTREQ)
 800611e:	79bb      	ldrb	r3, [r7, #6]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d10a      	bne.n	800613a <SdoRes+0x106>
		{
			/* Download segmented response */
			pSdoRes->MbxHeader.Length = DOWNLOAD_NORM_RES_SIZE;
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	220a      	movs	r2, #10
 8006128:	801a      	strh	r2, [r3, #0]
			pSdoRes->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] |= SWAPWORD(SDOSERVICE_DOWNLOADSEGMENTRES);
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	891b      	ldrh	r3, [r3, #8]
 800612e:	f043 0320 	orr.w	r3, r3, #32
 8006132:	b29a      	uxth	r2, r3
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	811a      	strh	r2, [r3, #8]
 8006138:	e02b      	b.n	8006192 <SdoRes+0x15e>
		}
		else if (command != SDOSERVICE_UPLOADSEGMENTREQ)
 800613a:	79bb      	ldrb	r3, [r7, #6]
 800613c:	2b60      	cmp	r3, #96	@ 0x60
 800613e:	d028      	beq.n	8006192 <SdoRes+0x15e>
		{
			/* Download response */
			pSdoRes->MbxHeader.Length = DOWNLOAD_NORM_RES_SIZE;
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	220a      	movs	r2, #10
 8006144:	801a      	strh	r2, [r3, #0]
			pSdoRes->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] |= SWAPWORD(SDOSERVICE_INITIATEDOWNLOADRES);
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	891b      	ldrh	r3, [r3, #8]
 800614a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800614e:	b29a      	uxth	r2, r3
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	811a      	strh	r2, [r3, #8]
 8006154:	e01d      	b.n	8006192 <SdoRes+0x15e>
		}
	}
	else
	{
		/* generate a SDO-Abort-Request */
		pSdoRes->MbxHeader.Length = ABORT_NORM_RES_SIZE;
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	220a      	movs	r2, #10
 800615a:	801a      	strh	r2, [r3, #0]
		pSdoRes->CoeHeader &= ~COEHEADER_COESERVICEMASK;
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	88db      	ldrh	r3, [r3, #6]
 8006160:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006164:	b29a      	uxth	r2, r3
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	80da      	strh	r2, [r3, #6]
		pSdoRes->CoeHeader |= ((UINT16)COESERVICE_SDOREQUEST) << COEHEADER_COESERVICESHIFT;
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	88db      	ldrh	r3, [r3, #6]
 800616e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006172:	b29a      	uxth	r2, r3
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	80da      	strh	r2, [r3, #6]
		pSdoRes->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] |= SWAPWORD(SDOSERVICE_ABORTTRANSFER);
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	891b      	ldrh	r3, [r3, #8]
 800617c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006180:	b29a      	uxth	r2, r3
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	811a      	strh	r2, [r3, #8]

		((TABORTSDOTRANSFERREQMBX MBXMEM *) pSdoRes)->AbortCode = SWAPDWORD(cAbortCode[abort]);
 8006186:	79fb      	ldrb	r3, [r7, #7]
 8006188:	4a09      	ldr	r2, [pc, #36]	@ (80061b0 <SdoRes+0x17c>)
 800618a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	60da      	str	r2, [r3, #12]
	}

	// HBu 02.05.06: if the CoE-response could not be sent because the
	//               send mailbox is full it should be stored
	if (MBX_MailboxSendReq((TMBX MBXMEM *) pSdoRes, COE_SERVICE) != 0)
 8006192:	2102      	movs	r1, #2
 8006194:	69f8      	ldr	r0, [r7, #28]
 8006196:	f7fd fee7 	bl	8003f68 <MBX_MailboxSendReq>
 800619a:	4603      	mov	r3, r0
 800619c:	2b00      	cmp	r3, #0
 800619e:	d002      	beq.n	80061a6 <SdoRes+0x172>
	{
		/* we store the CoE mailbox service to send it later (in COE_ContinueInd) when the mailbox is read */
		pCoeSendStored = (TMBX MBXMEM *) pSdoRes;
 80061a0:	4a04      	ldr	r2, [pc, #16]	@ (80061b4 <SdoRes+0x180>)
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	6013      	str	r3, [r2, #0]
	}
}
 80061a6:	bf00      	nop
 80061a8:	370c      	adds	r7, #12
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd90      	pop	{r4, r7, pc}
 80061ae:	bf00      	nop
 80061b0:	0800bd50 	.word	0x0800bd50
 80061b4:	240004c4 	.word	0x240004c4

080061b8 <SDOS_SdoInd>:
			is received from the master and calls depending from
			the command the concerning function.
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 SDOS_SdoInd(TINITSDOMBX MBXMEM *pSdoInd)
{
 80061b8:	b590      	push	{r4, r7, lr}
 80061ba:	b091      	sub	sp, #68	@ 0x44
 80061bc:	af02      	add	r7, sp, #8
 80061be:	6078      	str	r0, [r7, #4]
	UINT8 abort = 0;
 80061c0:	2300      	movs	r3, #0
 80061c2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	UINT8 sdoHeader = (pSdoInd->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] & SDOHEADER_COMMANDMASK) >> SDOHEADER_COMMANDSHIFT;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	891b      	ldrh	r3, [r3, #8]
 80061ca:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	/* the SDO-command is in bit 5-7 of the first SDO-Byte */
	UINT8 command = (sdoHeader & SDOHEADER_COMMAND);
 80061ce:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80061d2:	f023 031f 	bic.w	r3, r3, #31
 80061d6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	/* mbxSize contains the size of the mailbox (CoE-Header (2 Bytes) + SDO-Header (8 Bytes) + SDO-Data (if the data length is greater than 4)) */
	UINT16 mbxSize = SWAPWORD(pSdoInd->MbxHeader.Length);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	881b      	ldrh	r3, [r3, #0]
 80061de:	83fb      	strh	r3, [r7, #30]
	UINT16 index;
	UINT8 subindex;
	OBJCONST TOBJECT OBJMEM * pObjEntry;
	/* this variable contains the information, if all entries of an object will be read (bCompleteAccess > 0) or a single entry */
	UINT8 bCompleteAccess = 0;
 80061e0:	2300      	movs	r3, #0
 80061e2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	UINT32 objLength = 0;
 80061e6:	2300      	movs	r3, #0
 80061e8:	633b      	str	r3, [r7, #48]	@ 0x30
	UINT32 dataSize = 0;
 80061ea:	2300      	movs	r3, #0
 80061ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if (bSdoInWork)
 80061ee:	4b9d      	ldr	r3, [pc, #628]	@ (8006464 <SDOS_SdoInd+0x2ac>)
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d001      	beq.n	80061fa <SDOS_SdoInd+0x42>
	{
		/* the last SDO is still in work */
		return MBXERR_SERVICEINWORK;
 80061f6:	2309      	movs	r3, #9
 80061f8:	e2c0      	b.n	800677c <SDOS_SdoInd+0x5c4>
	}

/* ECATCHANGE_START(V5.13) COE5*/
	if (sdoHeader & SDOHEADER_COMPLETEACCESS)
 80061fa:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80061fe:	f003 0310 	and.w	r3, r3, #16
 8006202:	2b00      	cmp	r3, #0
 8006204:	d002      	beq.n	800620c <SDOS_SdoInd+0x54>
	{
		bCompleteAccess = 1;
 8006206:	2301      	movs	r3, #1
 8006208:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	}
/* ECATCHANGE_END(V5.13) COE5*/

	switch (command)
 800620c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006210:	2b60      	cmp	r3, #96	@ 0x60
 8006212:	f000 825d 	beq.w	80066d0 <SDOS_SdoInd+0x518>
 8006216:	2b60      	cmp	r3, #96	@ 0x60
 8006218:	f300 8276 	bgt.w	8006708 <SDOS_SdoInd+0x550>
 800621c:	2b40      	cmp	r3, #64	@ 0x40
 800621e:	d008      	beq.n	8006232 <SDOS_SdoInd+0x7a>
 8006220:	2b40      	cmp	r3, #64	@ 0x40
 8006222:	f300 8271 	bgt.w	8006708 <SDOS_SdoInd+0x550>
 8006226:	2b00      	cmp	r3, #0
 8006228:	f000 8252 	beq.w	80066d0 <SDOS_SdoInd+0x518>
 800622c:	2b20      	cmp	r3, #32
 800622e:	f040 826b 	bne.w	8006708 <SDOS_SdoInd+0x550>
	{
	case SDOSERVICE_INITIATEDOWNLOADREQ:
	case SDOSERVICE_INITIATEUPLOADREQ:
		/* the variable index contains the requested index of the SDO service */
		index = pSdoInd->SdoHeader.Sdo[SDOHEADER_INDEXHIOFFSET] & SDOHEADER_INDEXHIMASK;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	895b      	ldrh	r3, [r3, #10]
 8006236:	b2db      	uxtb	r3, r3
 8006238:	83bb      	strh	r3, [r7, #28]
		index <<= 8;
 800623a:	8bbb      	ldrh	r3, [r7, #28]
 800623c:	021b      	lsls	r3, r3, #8
 800623e:	83bb      	strh	r3, [r7, #28]
		index += (pSdoInd->SdoHeader.Sdo[SDOHEADER_INDEXLOOFFSET] >> SDOHEADER_INDEXLOSHIFT) & SDOHEADER_INDEXLOMASK;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	891b      	ldrh	r3, [r3, #8]
 8006244:	0a1b      	lsrs	r3, r3, #8
 8006246:	b29a      	uxth	r2, r3
 8006248:	8bbb      	ldrh	r3, [r7, #28]
 800624a:	4413      	add	r3, r2
 800624c:	83bb      	strh	r3, [r7, #28]
		/* the variable subindex contains the requested subindex of the SDO service */
		subindex = (pSdoInd->SdoHeader.Sdo[SDOHEADER_SUBINDEXOFFSET] >> SDOHEADER_SUBINDEXSHIFT) & SDOHEADER_SUBINDEXMASK;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	895b      	ldrh	r3, [r3, #10]
 8006252:	0a1b      	lsrs	r3, r3, #8
 8006254:	b29b      	uxth	r3, r3
 8006256:	76fb      	strb	r3, [r7, #27]




		/* OBJ_GetObjectHandle checks if the requested index is defined in the object dictionary */
		pObjEntry = OBJ_GetObjectHandle(index);
 8006258:	8bbb      	ldrh	r3, [r7, #28]
 800625a:	4618      	mov	r0, r3
 800625c:	f7fe f85e 	bl	800431c <OBJ_GetObjectHandle>
 8006260:	6178      	str	r0, [r7, #20]

		if (pObjEntry)
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	2b00      	cmp	r3, #0
 8006266:	f000 822f 	beq.w	80066c8 <SDOS_SdoInd+0x510>
		{
			/* transferType contains the information if the SDO Download Request or the SDO Upload Response
			   can be an expedited service (SDO data length <= 4, that means the data is stored in the
				SDO-Header completely */
			UINT8 bTransferType = 0;
 800626a:	2300      	movs	r3, #0
 800626c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* pData is the pointer to the received (SDO-Download) or sent (SDO-Upload) SDO data in the mailbox */
			UINT16 MBXMEM * pData = NULL;
 8006270:	2300      	movs	r3, #0
 8006272:	627b      	str	r3, [r7, #36]	@ 0x24
			UINT8 segTransfer = 0;
 8006274:	2300      	movs	r3, #0
 8006276:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

			{
				UINT8 maxSubindex = (pObjEntry->ObjDesc.ObjFlags & OBJFLAGS_MAXSUBINDEXMASK) >> OBJFLAGS_MAXSUBINDEXSHIFT;
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	899b      	ldrh	r3, [r3, #12]
 800627e:	74fb      	strb	r3, [r7, #19]

				if (subindex > maxSubindex)
 8006280:	7efa      	ldrb	r2, [r7, #27]
 8006282:	7cfb      	ldrb	r3, [r7, #19]
 8006284:	429a      	cmp	r2, r3
 8006286:	d903      	bls.n	8006290 <SDOS_SdoInd+0xd8>
				{
					abort = ABORTIDX_SUBINDEX_NOT_EXISTING;
 8006288:	2311      	movs	r3, #17
 800628a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800628e:	e00c      	b.n	80062aa <SDOS_SdoInd+0xf2>
				}
				else
				{
					dataSize = objLength = OBJ_GetObjectLength(index, subindex, pObjEntry, (UINT8)(sdoHeader & SDOHEADER_COMPLETEACCESS));
 8006290:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8006294:	f003 0310 	and.w	r3, r3, #16
 8006298:	b2db      	uxtb	r3, r3
 800629a:	7ef9      	ldrb	r1, [r7, #27]
 800629c:	8bb8      	ldrh	r0, [r7, #28]
 800629e:	697a      	ldr	r2, [r7, #20]
 80062a0:	f7fe f857 	bl	8004352 <OBJ_GetObjectLength>
 80062a4:	6338      	str	r0, [r7, #48]	@ 0x30
 80062a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
				}

				if (abort == 0)
 80062aa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d132      	bne.n	8006318 <SDOS_SdoInd+0x160>
				{
					if (command == SDOSERVICE_INITIATEUPLOADREQ)
 80062b2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80062b6:	2b40      	cmp	r3, #64	@ 0x40
 80062b8:	d128      	bne.n	800630c <SDOS_SdoInd+0x154>
					{
						/* SDO Upload */
						if (mbxSize != EXPEDITED_FRAME_SIZE)
 80062ba:	8bfb      	ldrh	r3, [r7, #30]
 80062bc:	2b0a      	cmp	r3, #10
 80062be:	d001      	beq.n	80062c4 <SDOS_SdoInd+0x10c>
						{
							/* a SDO Upload request has always a fixed size (2 Byte CoE-Header plus 8 Byte SDO-Header) */
							return MBXERR_INVALIDSIZE;
 80062c0:	2308      	movs	r3, #8
 80062c2:	e25b      	b.n	800677c <SDOS_SdoInd+0x5c4>
						}
						/* distinguish between expedited and normal upload response within the length of the response data */
						if ((objLength <= MAX_EXPEDITED_DATA) && objLength != 0)
 80062c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062c6:	2b04      	cmp	r3, #4
 80062c8:	d810      	bhi.n	80062ec <SDOS_SdoInd+0x134>
 80062ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d00d      	beq.n	80062ec <SDOS_SdoInd+0x134>
						{
							/* Expedited Upload */
							bTransferType = 1;
 80062d0:	2301      	movs	r3, #1
 80062d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
							/* pData is the pointer where the object data has to be copied for the response */
							pData = (UINT16 MBXMEM *) ((TINITSDOUPLOADEXPRESMBX MBXMEM *) pSdoInd)->Data;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	330c      	adds	r3, #12
 80062da:	627b      	str	r3, [r7, #36]	@ 0x24
													/* initialize the 4 data bytes of the SDO upload response because the requested object data
														could be less than 4 */
							pData[0] = 0;
 80062dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062de:	2200      	movs	r2, #0
 80062e0:	801a      	strh	r2, [r3, #0]
							pData[1] = 0;
 80062e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e4:	3302      	adds	r3, #2
 80062e6:	2200      	movs	r2, #0
 80062e8:	801a      	strh	r2, [r3, #0]
 80062ea:	e015      	b.n	8006318 <SDOS_SdoInd+0x160>
						}
						else
						{
							/* HBu 06.02.06: the variable dataSize has to be set to the available size in one mailbox */
							dataSize = u16SendMbxSize - MBX_HEADER_SIZE - UPLOAD_NORM_RES_SIZE;
 80062ec:	4b5e      	ldr	r3, [pc, #376]	@ (8006468 <SDOS_SdoInd+0x2b0>)
 80062ee:	881b      	ldrh	r3, [r3, #0]
 80062f0:	3b10      	subs	r3, #16
 80062f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
							if (dataSize < objLength)
 80062f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d203      	bcs.n	8006304 <SDOS_SdoInd+0x14c>
							{
								/* Segmented Upload */
								segTransfer = 1;
 80062fc:	2301      	movs	r3, #1
 80062fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006302:	e009      	b.n	8006318 <SDOS_SdoInd+0x160>
							else
							{
								/* Normal Upload */

								/* pData is the pointer where the object data has to be copied for the response */
								pData = (UINT16 MBXMEM *) ((TINITSDOUPLOADNORMRESMBX MBXMEM *) pSdoInd)->Data;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	3310      	adds	r3, #16
 8006308:	627b      	str	r3, [r7, #36]	@ 0x24
 800630a:	e005      	b.n	8006318 <SDOS_SdoInd+0x160>
						}
					}
					else
					{
						/* SDO-Download: store if the request is a expedited or normal request  */
						bTransferType = sdoHeader & SDOHEADER_TRANSFERTYPE;
 800630c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8006310:	f003 0302 	and.w	r3, r3, #2
 8006314:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
					}
				}
			}

			if ((abort == 0) && (command == SDOSERVICE_INITIATEDOWNLOADREQ))
 8006318:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800631c:	2b00      	cmp	r3, #0
 800631e:	d142      	bne.n	80063a6 <SDOS_SdoInd+0x1ee>
 8006320:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006324:	2b20      	cmp	r3, #32
 8006326:	d13e      	bne.n	80063a6 <SDOS_SdoInd+0x1ee>
			{
				/* SDO Download */
				if (bTransferType)
 8006328:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800632c:	2b00      	cmp	r3, #0
 800632e:	d010      	beq.n	8006352 <SDOS_SdoInd+0x19a>
				{
					/* Expedited Download */
					if (mbxSize != EXPEDITED_FRAME_SIZE)
 8006330:	8bfb      	ldrh	r3, [r7, #30]
 8006332:	2b0a      	cmp	r3, #10
 8006334:	d001      	beq.n	800633a <SDOS_SdoInd+0x182>
					{
						/* an Expedited SDO Download request has always a fixed size (2 Byte CoE-Header plus 8 Byte SDO-Header) */
						return MBXERR_INVALIDSIZE;
 8006336:	2308      	movs	r3, #8
 8006338:	e220      	b.n	800677c <SDOS_SdoInd+0x5c4>
					}
					/* dataSize gets the real size of the downloaded object data (1,2,3 or 4) */
					dataSize = MAX_EXPEDITED_DATA - ((sdoHeader & SDOHEADER_DATASETSIZE) >> SDOHEADERSHIFT_DATASETSIZE);
 800633a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800633e:	109b      	asrs	r3, r3, #2
 8006340:	f003 0303 	and.w	r3, r3, #3
 8006344:	f1c3 0304 	rsb	r3, r3, #4
 8006348:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* pData is the pointer to the downloaded object data */
					pData = (UINT16 MBXMEM *) &pSdoInd[1];
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	330c      	adds	r3, #12
 800634e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006350:	e029      	b.n	80063a6 <SDOS_SdoInd+0x1ee>
				{
					/* Normal Download */
					/* downloadSize gets the real size of the downloaded data */
					/* '&' operator was too much */

					UINT32 downloadSize = ((UINT32)(SWAPWORD(((TINITSDODOWNLOADNORMREQMBX MBXMEM *) pSdoInd)->CompleteSize[1])) << 16) + (SWAPWORD(((TINITSDODOWNLOADNORMREQMBX MBXMEM *) pSdoInd)->CompleteSize[0]));
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	89db      	ldrh	r3, [r3, #14]
 8006356:	041b      	lsls	r3, r3, #16
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	8992      	ldrh	r2, [r2, #12]
 800635c:	4413      	add	r3, r2
 800635e:	60fb      	str	r3, [r7, #12]

					/* HBu 29.03.06: if it is a segmented download the mbxSize has to be the complete mailbox size */
					if ((MBX_HEADER_SIZE + EXPEDITED_FRAME_SIZE + downloadSize) > u16ReceiveMbxSize)
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	3310      	adds	r3, #16
 8006364:	4a41      	ldr	r2, [pc, #260]	@ (800646c <SDOS_SdoInd+0x2b4>)
 8006366:	8812      	ldrh	r2, [r2, #0]
 8006368:	4293      	cmp	r3, r2
 800636a:	d907      	bls.n	800637c <SDOS_SdoInd+0x1c4>
					{
						if (mbxSize != (u16ReceiveMbxSize - MBX_HEADER_SIZE))
 800636c:	8bfa      	ldrh	r2, [r7, #30]
 800636e:	4b3f      	ldr	r3, [pc, #252]	@ (800646c <SDOS_SdoInd+0x2b4>)
 8006370:	881b      	ldrh	r3, [r3, #0]
 8006372:	3b06      	subs	r3, #6
 8006374:	429a      	cmp	r2, r3
 8006376:	d008      	beq.n	800638a <SDOS_SdoInd+0x1d2>
						{
							return MBXERR_INVALIDSIZE;
 8006378:	2308      	movs	r3, #8
 800637a:	e1ff      	b.n	800677c <SDOS_SdoInd+0x5c4>
						}
					}
					else
					{
						if (mbxSize != (EXPEDITED_FRAME_SIZE + downloadSize))
 800637c:	8bfa      	ldrh	r2, [r7, #30]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	330a      	adds	r3, #10
 8006382:	429a      	cmp	r2, r3
 8006384:	d001      	beq.n	800638a <SDOS_SdoInd+0x1d2>
						{
							/* the mbxSize and the downloadSize are not consistent (mbxSize = downloadSize + 2 byte CoE-Header + 8 byte SDO Header */
							return MBXERR_INVALIDSIZE;
 8006386:	2308      	movs	r3, #8
 8006388:	e1f8      	b.n	800677c <SDOS_SdoInd+0x5c4>
						}
					}

					/* pData is the pointer to the downloaded object data */
					pData = (UINT16 MBXMEM *) ((TINITSDODOWNLOADNORMREQMBX MBXMEM *) pSdoInd)->Data;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	3310      	adds	r3, #16
 800638e:	627b      	str	r3, [r7, #36]	@ 0x24
					/* the received dataSize will be checked in the object specific functions called from
					   OBJ_Write (in objdef.c) */
					dataSize = downloadSize;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	62fb      	str	r3, [r7, #44]	@ 0x2c
					if (dataSize > (UINT32)(mbxSize - DOWNLOAD_NORM_REQ_SIZE))
 8006394:	8bfb      	ldrh	r3, [r7, #30]
 8006396:	3b0a      	subs	r3, #10
 8006398:	461a      	mov	r2, r3
 800639a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800639c:	4293      	cmp	r3, r2
 800639e:	d902      	bls.n	80063a6 <SDOS_SdoInd+0x1ee>
					{
						/* Segmented Download */
						segTransfer = 1;
 80063a0:	2301      	movs	r3, #1
 80063a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
					}
				}
			}

/* ECATCHANGE_START(V5.13) COE5*/
			if ((abort == 0) && (bCompleteAccess == 1))
 80063a6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d109      	bne.n	80063c2 <SDOS_SdoInd+0x20a>
 80063ae:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d105      	bne.n	80063c2 <SDOS_SdoInd+0x20a>
/* ECATCHANGE_END(V5.13) COE5*/
			{
				// HBu 02.05.06: Complete Access is only supported with subindex 0 and 1
				if (subindex > 1)
 80063b6:	7efb      	ldrb	r3, [r7, #27]
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d902      	bls.n	80063c2 <SDOS_SdoInd+0x20a>
				{
					abort = ABORTIDX_UNSUPPORTED_ACCESS;
 80063bc:	2305      	movs	r3, #5
 80063be:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				}
			}

			if (abort == 0)
 80063c2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	f040 81c0 	bne.w	800674c <SDOS_SdoInd+0x594>
			{
				if (segTransfer)
 80063cc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	f000 80d4 	beq.w	800657e <SDOS_SdoInd+0x3c6>
				{
					bSdoSegFollows = TRUE;
 80063d6:	4b26      	ldr	r3, [pc, #152]	@ (8006470 <SDOS_SdoInd+0x2b8>)
 80063d8:	2201      	movs	r2, #1
 80063da:	701a      	strb	r2, [r3, #0]
					bSdoSegLastToggle = 1;
 80063dc:	4b25      	ldr	r3, [pc, #148]	@ (8006474 <SDOS_SdoInd+0x2bc>)
 80063de:	2201      	movs	r2, #1
 80063e0:	701a      	strb	r2, [r3, #0]
					bSdoSegAccess = bCompleteAccess;
 80063e2:	4a25      	ldr	r2, [pc, #148]	@ (8006478 <SDOS_SdoInd+0x2c0>)
 80063e4:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80063e8:	7013      	strb	r3, [r2, #0]
					nSdoSegIndex = index;
 80063ea:	4a24      	ldr	r2, [pc, #144]	@ (800647c <SDOS_SdoInd+0x2c4>)
 80063ec:	8bbb      	ldrh	r3, [r7, #28]
 80063ee:	8013      	strh	r3, [r2, #0]
					nSdoSegSubindex = subindex;
 80063f0:	4a23      	ldr	r2, [pc, #140]	@ (8006480 <SDOS_SdoInd+0x2c8>)
 80063f2:	7efb      	ldrb	r3, [r7, #27]
 80063f4:	7013      	strb	r3, [r2, #0]
					pSdoSegObjEntry = pObjEntry;
 80063f6:	4a23      	ldr	r2, [pc, #140]	@ (8006484 <SDOS_SdoInd+0x2cc>)
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	6013      	str	r3, [r2, #0]
					if (command == SDOSERVICE_INITIATEUPLOADREQ)
 80063fc:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006400:	2b40      	cmp	r3, #64	@ 0x40
 8006402:	d103      	bne.n	800640c <SDOS_SdoInd+0x254>
					{
						nSdoSegCompleteSize = objLength;
 8006404:	4a20      	ldr	r2, [pc, #128]	@ (8006488 <SDOS_SdoInd+0x2d0>)
 8006406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006408:	6013      	str	r3, [r2, #0]
 800640a:	e002      	b.n	8006412 <SDOS_SdoInd+0x25a>
					}
					else
					{
						nSdoSegCompleteSize = dataSize;
 800640c:	4a1e      	ldr	r2, [pc, #120]	@ (8006488 <SDOS_SdoInd+0x2d0>)
 800640e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006410:	6013      	str	r3, [r2, #0]
					}

					if (pSdoSegData != NULL)
 8006412:	4b1e      	ldr	r3, [pc, #120]	@ (800648c <SDOS_SdoInd+0x2d4>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d007      	beq.n	800642a <SDOS_SdoInd+0x272>
					{
						FREEMEM((UINT16 VARMEM *) pSdoSegData);
 800641a:	4b1c      	ldr	r3, [pc, #112]	@ (800648c <SDOS_SdoInd+0x2d4>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4618      	mov	r0, r3
 8006420:	f005 f840 	bl	800b4a4 <free>
						pSdoSegData = NULL;
 8006424:	4b19      	ldr	r3, [pc, #100]	@ (800648c <SDOS_SdoInd+0x2d4>)
 8006426:	2200      	movs	r2, #0
 8006428:	601a      	str	r2, [r3, #0]
					}
					pSdoSegData = (UINT16 VARMEM *) ALLOCMEM(ROUNDUPBYTE2WORD(nSdoSegCompleteSize));
 800642a:	4b17      	ldr	r3, [pc, #92]	@ (8006488 <SDOS_SdoInd+0x2d0>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	3301      	adds	r3, #1
 8006430:	f023 0301 	bic.w	r3, r3, #1
 8006434:	4618      	mov	r0, r3
 8006436:	f005 f82d 	bl	800b494 <malloc>
 800643a:	4603      	mov	r3, r0
 800643c:	461a      	mov	r2, r3
 800643e:	4b13      	ldr	r3, [pc, #76]	@ (800648c <SDOS_SdoInd+0x2d4>)
 8006440:	601a      	str	r2, [r3, #0]

					if (pSdoSegData == NULL)
 8006442:	4b12      	ldr	r3, [pc, #72]	@ (800648c <SDOS_SdoInd+0x2d4>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d122      	bne.n	8006490 <SDOS_SdoInd+0x2d8>
					{
						if (bCompleteAccess)
 800644a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800644e:	2b00      	cmp	r3, #0
 8006450:	d003      	beq.n	800645a <SDOS_SdoInd+0x2a2>
						{
							abort = ABORTIDX_UNSUPPORTED_ACCESS;
 8006452:	2305      	movs	r3, #5
 8006454:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		} //if(pObjEntry) (Object handle found)
		else
		{
			abort = ABORTIDX_OBJECT_NOT_EXISTING;
		}
		break;
 8006458:	e178      	b.n	800674c <SDOS_SdoInd+0x594>
							abort = ABORTIDX_OUT_OF_MEMORY;
 800645a:	2304      	movs	r3, #4
 800645c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		break;
 8006460:	e174      	b.n	800674c <SDOS_SdoInd+0x594>
 8006462:	bf00      	nop
 8006464:	24000664 	.word	0x24000664
 8006468:	2400051a 	.word	0x2400051a
 800646c:	2400051c 	.word	0x2400051c
 8006470:	24000666 	.word	0x24000666
 8006474:	24000670 	.word	0x24000670
 8006478:	24000667 	.word	0x24000667
 800647c:	24000668 	.word	0x24000668
 8006480:	2400066a 	.word	0x2400066a
 8006484:	24000678 	.word	0x24000678
 8006488:	24000674 	.word	0x24000674
 800648c:	24000654 	.word	0x24000654
						if (command == SDOSERVICE_INITIATEUPLOADREQ)
 8006490:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006494:	2b40      	cmp	r3, #64	@ 0x40
 8006496:	d15e      	bne.n	8006556 <SDOS_SdoInd+0x39e>
							abort = OBJ_Read(index, subindex, objLength, pObjEntry, (UINT16 MBXMEM *) pSdoSegData, bCompleteAccess);
 8006498:	4b9d      	ldr	r3, [pc, #628]	@ (8006710 <SDOS_SdoInd+0x558>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	7ef9      	ldrb	r1, [r7, #27]
 800649e:	8bb8      	ldrh	r0, [r7, #28]
 80064a0:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 80064a4:	9201      	str	r2, [sp, #4]
 80064a6:	9300      	str	r3, [sp, #0]
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064ac:	f7fe fb92 	bl	8004bd4 <OBJ_Read>
 80064b0:	4603      	mov	r3, r0
 80064b2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
							if (abort == 0)
 80064b6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d10b      	bne.n	80064d6 <SDOS_SdoInd+0x31e>
								MBXMEMCPY((UINT16 *)((TINITSDOUPLOADNORMRESMBX MBXMEM *) pSdoInd)->Data, pSdoSegData, dataSize);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	3310      	adds	r3, #16
 80064c2:	4a93      	ldr	r2, [pc, #588]	@ (8006710 <SDOS_SdoInd+0x558>)
 80064c4:	6811      	ldr	r1, [r2, #0]
 80064c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80064c8:	4618      	mov	r0, r3
 80064ca:	f005 f8e5 	bl	800b698 <memcpy>
								nSdoSegService = SDOSERVICE_UPLOADSEGMENTREQ;
 80064ce:	4b91      	ldr	r3, [pc, #580]	@ (8006714 <SDOS_SdoInd+0x55c>)
 80064d0:	2260      	movs	r2, #96	@ 0x60
 80064d2:	701a      	strb	r2, [r3, #0]
 80064d4:	e04f      	b.n	8006576 <SDOS_SdoInd+0x3be>
							else if (abort == ABORTIDX_WORKING)
 80064d6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80064da:	2bff      	cmp	r3, #255	@ 0xff
 80064dc:	d14b      	bne.n	8006576 <SDOS_SdoInd+0x3be>
								u8PendingSdo = SDO_PENDING_SEG_READ;
 80064de:	4b8e      	ldr	r3, [pc, #568]	@ (8006718 <SDOS_SdoInd+0x560>)
 80064e0:	2204      	movs	r2, #4
 80064e2:	701a      	strb	r2, [r3, #0]
								bStoreCompleteAccess = bCompleteAccess;
 80064e4:	4a8d      	ldr	r2, [pc, #564]	@ (800671c <SDOS_SdoInd+0x564>)
 80064e6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80064ea:	7013      	strb	r3, [r2, #0]
								u8StoreSubindex = subindex;
 80064ec:	4a8c      	ldr	r2, [pc, #560]	@ (8006720 <SDOS_SdoInd+0x568>)
 80064ee:	7efb      	ldrb	r3, [r7, #27]
 80064f0:	7013      	strb	r3, [r2, #0]
								u16StoreIndex = index;
 80064f2:	4a8c      	ldr	r2, [pc, #560]	@ (8006724 <SDOS_SdoInd+0x56c>)
 80064f4:	8bbb      	ldrh	r3, [r7, #28]
 80064f6:	8013      	strh	r3, [r2, #0]
								u32StoreDataSize = objLength;
 80064f8:	4a8b      	ldr	r2, [pc, #556]	@ (8006728 <SDOS_SdoInd+0x570>)
 80064fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064fc:	6013      	str	r3, [r2, #0]
								pStoreData = pSdoSegData;
 80064fe:	4b84      	ldr	r3, [pc, #528]	@ (8006710 <SDOS_SdoInd+0x558>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a8a      	ldr	r2, [pc, #552]	@ (800672c <SDOS_SdoInd+0x574>)
 8006504:	6013      	str	r3, [r2, #0]
								pSdoPendFunc = pObjEntry->Read;
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	69db      	ldr	r3, [r3, #28]
 800650a:	4a89      	ldr	r2, [pc, #548]	@ (8006730 <SDOS_SdoInd+0x578>)
 800650c:	6013      	str	r3, [r2, #0]
								bSdoInWork = TRUE;
 800650e:	4b89      	ldr	r3, [pc, #548]	@ (8006734 <SDOS_SdoInd+0x57c>)
 8006510:	2201      	movs	r2, #1
 8006512:	701a      	strb	r2, [r3, #0]
								pSdoResStored = pSdoInd;
 8006514:	4a88      	ldr	r2, [pc, #544]	@ (8006738 <SDOS_SdoInd+0x580>)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6013      	str	r3, [r2, #0]
								pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] &= ~SDOHEADER_COMMANDMASK;
 800651a:	4b87      	ldr	r3, [pc, #540]	@ (8006738 <SDOS_SdoInd+0x580>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	891a      	ldrh	r2, [r3, #8]
 8006520:	4b85      	ldr	r3, [pc, #532]	@ (8006738 <SDOS_SdoInd+0x580>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006528:	b292      	uxth	r2, r2
 800652a:	811a      	strh	r2, [r3, #8]
								pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] |= (sdoHeader & (SDOHEADER_COMPLETEACCESS | SDOHEADER_COMMAND));
 800652c:	4b82      	ldr	r3, [pc, #520]	@ (8006738 <SDOS_SdoInd+0x580>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	891b      	ldrh	r3, [r3, #8]
 8006532:	b21a      	sxth	r2, r3
 8006534:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8006538:	b21b      	sxth	r3, r3
 800653a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800653e:	b21b      	sxth	r3, r3
 8006540:	4313      	orrs	r3, r2
 8006542:	b21a      	sxth	r2, r3
 8006544:	4b7c      	ldr	r3, [pc, #496]	@ (8006738 <SDOS_SdoInd+0x580>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	b292      	uxth	r2, r2
 800654a:	811a      	strh	r2, [r3, #8]
								nSdoSegService = SDOSERVICE_UPLOADSEGMENTREQ;
 800654c:	4b71      	ldr	r3, [pc, #452]	@ (8006714 <SDOS_SdoInd+0x55c>)
 800654e:	2260      	movs	r2, #96	@ 0x60
 8006550:	701a      	strb	r2, [r3, #0]
								return 0;
 8006552:	2300      	movs	r3, #0
 8006554:	e112      	b.n	800677c <SDOS_SdoInd+0x5c4>
							MBXMEMCPY(pSdoSegData, (UINT16 *)((TINITSDODOWNLOADNORMREQMBX MBXMEM *) pSdoInd)->Data, mbxSize - DOWNLOAD_NORM_REQ_SIZE);
 8006556:	4b6e      	ldr	r3, [pc, #440]	@ (8006710 <SDOS_SdoInd+0x558>)
 8006558:	6818      	ldr	r0, [r3, #0]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f103 0110 	add.w	r1, r3, #16
 8006560:	8bfb      	ldrh	r3, [r7, #30]
 8006562:	3b0a      	subs	r3, #10
 8006564:	461a      	mov	r2, r3
 8006566:	f005 f897 	bl	800b698 <memcpy>
							nSdoSegService = SDOSERVICE_DOWNLOADSEGMENTREQ;
 800656a:	4b6a      	ldr	r3, [pc, #424]	@ (8006714 <SDOS_SdoInd+0x55c>)
 800656c:	2200      	movs	r2, #0
 800656e:	701a      	strb	r2, [r3, #0]
							dataSize = (mbxSize - DOWNLOAD_NORM_REQ_SIZE);
 8006570:	8bfb      	ldrh	r3, [r7, #30]
 8006572:	3b0a      	subs	r3, #10
 8006574:	62fb      	str	r3, [r7, #44]	@ 0x2c
						nSdoSegBytesToHandle = dataSize;
 8006576:	4a71      	ldr	r2, [pc, #452]	@ (800673c <SDOS_SdoInd+0x584>)
 8006578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800657a:	6013      	str	r3, [r2, #0]
		break;
 800657c:	e0e6      	b.n	800674c <SDOS_SdoInd+0x594>
					if (objLength == 0)
 800657e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006580:	2b00      	cmp	r3, #0
 8006582:	d108      	bne.n	8006596 <SDOS_SdoInd+0x3de>
						nSdoSegIndex = index;
 8006584:	4a6e      	ldr	r2, [pc, #440]	@ (8006740 <SDOS_SdoInd+0x588>)
 8006586:	8bbb      	ldrh	r3, [r7, #28]
 8006588:	8013      	strh	r3, [r2, #0]
						nSdoSegSubindex = subindex;
 800658a:	4a6e      	ldr	r2, [pc, #440]	@ (8006744 <SDOS_SdoInd+0x58c>)
 800658c:	7efb      	ldrb	r3, [r7, #27]
 800658e:	7013      	strb	r3, [r2, #0]
						pSdoSegObjEntry = pObjEntry;
 8006590:	4a6d      	ldr	r2, [pc, #436]	@ (8006748 <SDOS_SdoInd+0x590>)
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	6013      	str	r3, [r2, #0]
					if (command == SDOSERVICE_INITIATEUPLOADREQ)
 8006596:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800659a:	2b40      	cmp	r3, #64	@ 0x40
 800659c:	d14a      	bne.n	8006634 <SDOS_SdoInd+0x47c>
						abort = OBJ_Read(index, subindex, objLength, pObjEntry, pData, bCompleteAccess);
 800659e:	7ef9      	ldrb	r1, [r7, #27]
 80065a0:	8bb8      	ldrh	r0, [r7, #28]
 80065a2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80065a6:	9301      	str	r3, [sp, #4]
 80065a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065aa:	9300      	str	r3, [sp, #0]
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065b0:	f7fe fb10 	bl	8004bd4 <OBJ_Read>
 80065b4:	4603      	mov	r3, r0
 80065b6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
						if (abort == ABORTIDX_WORKING)
 80065ba:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80065be:	2bff      	cmp	r3, #255	@ 0xff
 80065c0:	f040 80c4 	bne.w	800674c <SDOS_SdoInd+0x594>
							u8PendingSdo = SDO_PENDING_READ;
 80065c4:	4b54      	ldr	r3, [pc, #336]	@ (8006718 <SDOS_SdoInd+0x560>)
 80065c6:	2203      	movs	r2, #3
 80065c8:	701a      	strb	r2, [r3, #0]
							bStoreCompleteAccess = bCompleteAccess;
 80065ca:	4a54      	ldr	r2, [pc, #336]	@ (800671c <SDOS_SdoInd+0x564>)
 80065cc:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80065d0:	7013      	strb	r3, [r2, #0]
							u8StoreSubindex = subindex;
 80065d2:	4a53      	ldr	r2, [pc, #332]	@ (8006720 <SDOS_SdoInd+0x568>)
 80065d4:	7efb      	ldrb	r3, [r7, #27]
 80065d6:	7013      	strb	r3, [r2, #0]
							u16StoreIndex = index;
 80065d8:	4a52      	ldr	r2, [pc, #328]	@ (8006724 <SDOS_SdoInd+0x56c>)
 80065da:	8bbb      	ldrh	r3, [r7, #28]
 80065dc:	8013      	strh	r3, [r2, #0]
							u32StoreDataSize = objLength;
 80065de:	4a52      	ldr	r2, [pc, #328]	@ (8006728 <SDOS_SdoInd+0x570>)
 80065e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065e2:	6013      	str	r3, [r2, #0]
							pStoreData = pData;
 80065e4:	4a51      	ldr	r2, [pc, #324]	@ (800672c <SDOS_SdoInd+0x574>)
 80065e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065e8:	6013      	str	r3, [r2, #0]
							pSdoPendFunc = pObjEntry->Read;
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	69db      	ldr	r3, [r3, #28]
 80065ee:	4a50      	ldr	r2, [pc, #320]	@ (8006730 <SDOS_SdoInd+0x578>)
 80065f0:	6013      	str	r3, [r2, #0]
							bSdoInWork = TRUE;
 80065f2:	4b50      	ldr	r3, [pc, #320]	@ (8006734 <SDOS_SdoInd+0x57c>)
 80065f4:	2201      	movs	r2, #1
 80065f6:	701a      	strb	r2, [r3, #0]
							pSdoResStored = pSdoInd;
 80065f8:	4a4f      	ldr	r2, [pc, #316]	@ (8006738 <SDOS_SdoInd+0x580>)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6013      	str	r3, [r2, #0]
							pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] &= ~SDOHEADER_COMMANDMASK;
 80065fe:	4b4e      	ldr	r3, [pc, #312]	@ (8006738 <SDOS_SdoInd+0x580>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	891a      	ldrh	r2, [r3, #8]
 8006604:	4b4c      	ldr	r3, [pc, #304]	@ (8006738 <SDOS_SdoInd+0x580>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800660c:	b292      	uxth	r2, r2
 800660e:	811a      	strh	r2, [r3, #8]
							pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] |= (sdoHeader & (SDOHEADER_COMPLETEACCESS | SDOHEADER_COMMAND));
 8006610:	4b49      	ldr	r3, [pc, #292]	@ (8006738 <SDOS_SdoInd+0x580>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	891b      	ldrh	r3, [r3, #8]
 8006616:	b21a      	sxth	r2, r3
 8006618:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800661c:	b21b      	sxth	r3, r3
 800661e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006622:	b21b      	sxth	r3, r3
 8006624:	4313      	orrs	r3, r2
 8006626:	b21a      	sxth	r2, r3
 8006628:	4b43      	ldr	r3, [pc, #268]	@ (8006738 <SDOS_SdoInd+0x580>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	b292      	uxth	r2, r2
 800662e:	811a      	strh	r2, [r3, #8]
							return 0;
 8006630:	2300      	movs	r3, #0
 8006632:	e0a3      	b.n	800677c <SDOS_SdoInd+0x5c4>
						abort = OBJ_Write(index, subindex, dataSize, pObjEntry, pData, bCompleteAccess);
 8006634:	7ef9      	ldrb	r1, [r7, #27]
 8006636:	8bb8      	ldrh	r0, [r7, #28]
 8006638:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800663c:	9301      	str	r3, [sp, #4]
 800663e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006640:	9300      	str	r3, [sp, #0]
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006646:	f7fe fe3b 	bl	80052c0 <OBJ_Write>
 800664a:	4603      	mov	r3, r0
 800664c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
						if (abort == ABORTIDX_WORKING)
 8006650:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006654:	2bff      	cmp	r3, #255	@ 0xff
 8006656:	d179      	bne.n	800674c <SDOS_SdoInd+0x594>
							u8PendingSdo = SDO_PENDING_WRITE;
 8006658:	4b2f      	ldr	r3, [pc, #188]	@ (8006718 <SDOS_SdoInd+0x560>)
 800665a:	2201      	movs	r2, #1
 800665c:	701a      	strb	r2, [r3, #0]
							bStoreCompleteAccess = bCompleteAccess;
 800665e:	4a2f      	ldr	r2, [pc, #188]	@ (800671c <SDOS_SdoInd+0x564>)
 8006660:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8006664:	7013      	strb	r3, [r2, #0]
							u8StoreSubindex = subindex;
 8006666:	4a2e      	ldr	r2, [pc, #184]	@ (8006720 <SDOS_SdoInd+0x568>)
 8006668:	7efb      	ldrb	r3, [r7, #27]
 800666a:	7013      	strb	r3, [r2, #0]
							u16StoreIndex = index;
 800666c:	4a2d      	ldr	r2, [pc, #180]	@ (8006724 <SDOS_SdoInd+0x56c>)
 800666e:	8bbb      	ldrh	r3, [r7, #28]
 8006670:	8013      	strh	r3, [r2, #0]
							u32StoreDataSize = dataSize;
 8006672:	4a2d      	ldr	r2, [pc, #180]	@ (8006728 <SDOS_SdoInd+0x570>)
 8006674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006676:	6013      	str	r3, [r2, #0]
							pStoreData = pData;
 8006678:	4a2c      	ldr	r2, [pc, #176]	@ (800672c <SDOS_SdoInd+0x574>)
 800667a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800667c:	6013      	str	r3, [r2, #0]
							pSdoPendFunc = pObjEntry->Write;
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	6a1b      	ldr	r3, [r3, #32]
 8006682:	4a2b      	ldr	r2, [pc, #172]	@ (8006730 <SDOS_SdoInd+0x578>)
 8006684:	6013      	str	r3, [r2, #0]
							bSdoInWork = TRUE;
 8006686:	4b2b      	ldr	r3, [pc, #172]	@ (8006734 <SDOS_SdoInd+0x57c>)
 8006688:	2201      	movs	r2, #1
 800668a:	701a      	strb	r2, [r3, #0]
							pSdoResStored = pSdoInd;
 800668c:	4a2a      	ldr	r2, [pc, #168]	@ (8006738 <SDOS_SdoInd+0x580>)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6013      	str	r3, [r2, #0]
							pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] &= ~SDOHEADER_COMMANDMASK;
 8006692:	4b29      	ldr	r3, [pc, #164]	@ (8006738 <SDOS_SdoInd+0x580>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	891a      	ldrh	r2, [r3, #8]
 8006698:	4b27      	ldr	r3, [pc, #156]	@ (8006738 <SDOS_SdoInd+0x580>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80066a0:	b292      	uxth	r2, r2
 80066a2:	811a      	strh	r2, [r3, #8]
							pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] |= (sdoHeader & (SDOHEADER_COMPLETEACCESS | SDOHEADER_COMMAND));
 80066a4:	4b24      	ldr	r3, [pc, #144]	@ (8006738 <SDOS_SdoInd+0x580>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	891b      	ldrh	r3, [r3, #8]
 80066aa:	b21a      	sxth	r2, r3
 80066ac:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80066b0:	b21b      	sxth	r3, r3
 80066b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80066b6:	b21b      	sxth	r3, r3
 80066b8:	4313      	orrs	r3, r2
 80066ba:	b21a      	sxth	r2, r3
 80066bc:	4b1e      	ldr	r3, [pc, #120]	@ (8006738 <SDOS_SdoInd+0x580>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	b292      	uxth	r2, r2
 80066c2:	811a      	strh	r2, [r3, #8]
							return 0;
 80066c4:	2300      	movs	r3, #0
 80066c6:	e059      	b.n	800677c <SDOS_SdoInd+0x5c4>
			abort = ABORTIDX_OBJECT_NOT_EXISTING;
 80066c8:	2308      	movs	r3, #8
 80066ca:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		break;
 80066ce:	e03d      	b.n	800674c <SDOS_SdoInd+0x594>

	case SDOSERVICE_DOWNLOADSEGMENTREQ:
	case SDOSERVICE_UPLOADSEGMENTREQ:
		if (command == nSdoSegService)
 80066d0:	4b10      	ldr	r3, [pc, #64]	@ (8006714 <SDOS_SdoInd+0x55c>)
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 80066d8:	429a      	cmp	r2, r3
 80066da:	d111      	bne.n	8006700 <SDOS_SdoInd+0x548>
		{
			if (command == SDOSERVICE_DOWNLOADSEGMENTREQ)
 80066dc:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d106      	bne.n	80066f2 <SDOS_SdoInd+0x53a>
			{
				abort = SdoDownloadSegmentInd((TDOWNLOADSDOSEGREQMBX MBXMEM *) pSdoInd);
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f7ff f9c3 	bl	8005a70 <SdoDownloadSegmentInd>
 80066ea:	4603      	mov	r3, r0
 80066ec:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		}
		else
		{
			abort = ABORTIDX_COMMAND_SPECIFIER_UNKNOWN;
		}
		break;
 80066f0:	e02d      	b.n	800674e <SDOS_SdoInd+0x596>
				abort = SdoUploadSegmentInd((TUPLOADSDOSEGREQMBX MBXMEM *) pSdoInd);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f7ff fb7c 	bl	8005df0 <SdoUploadSegmentInd>
 80066f8:	4603      	mov	r3, r0
 80066fa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		break;
 80066fe:	e026      	b.n	800674e <SDOS_SdoInd+0x596>
			abort = ABORTIDX_COMMAND_SPECIFIER_UNKNOWN;
 8006700:	2303      	movs	r3, #3
 8006702:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		break;
 8006706:	e022      	b.n	800674e <SDOS_SdoInd+0x596>

	default:
		abort = ABORTIDX_COMMAND_SPECIFIER_UNKNOWN;
 8006708:	2303      	movs	r3, #3
 800670a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		break;
 800670e:	e01e      	b.n	800674e <SDOS_SdoInd+0x596>
 8006710:	24000654 	.word	0x24000654
 8006714:	24000665 	.word	0x24000665
 8006718:	24000630 	.word	0x24000630
 800671c:	24000631 	.word	0x24000631
 8006720:	24000632 	.word	0x24000632
 8006724:	24000634 	.word	0x24000634
 8006728:	24000638 	.word	0x24000638
 800672c:	2400063c 	.word	0x2400063c
 8006730:	24000640 	.word	0x24000640
 8006734:	24000664 	.word	0x24000664
 8006738:	24000660 	.word	0x24000660
 800673c:	2400066c 	.word	0x2400066c
 8006740:	24000668 	.word	0x24000668
 8006744:	2400066a 	.word	0x2400066a
 8006748:	24000678 	.word	0x24000678
		break;
 800674c:	bf00      	nop
	}

	if (abort != ABORTIDX_WORKING)
 800674e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006752:	2bff      	cmp	r3, #255	@ 0xff
 8006754:	d011      	beq.n	800677a <SDOS_SdoInd+0x5c2>
	{
		/*  type cast was added because of warning */
		SdoRes(abort, command, (UINT8)(sdoHeader & SDOHEADER_COMPLETEACCESS), (UINT16)dataSize, objLength, pSdoInd);
 8006756:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800675a:	f003 0310 	and.w	r3, r3, #16
 800675e:	b2da      	uxtb	r2, r3
 8006760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006762:	b29c      	uxth	r4, r3
 8006764:	f897 1021 	ldrb.w	r1, [r7, #33]	@ 0x21
 8006768:	f897 0037 	ldrb.w	r0, [r7, #55]	@ 0x37
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	9301      	str	r3, [sp, #4]
 8006770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006772:	9300      	str	r3, [sp, #0]
 8006774:	4623      	mov	r3, r4
 8006776:	f7ff fc5d 	bl	8006034 <SdoRes>
	}

	return 0;
 800677a:	2300      	movs	r3, #0
}
 800677c:	4618      	mov	r0, r3
 800677e:	373c      	adds	r7, #60	@ 0x3c
 8006780:	46bd      	mov	sp, r7
 8006782:	bd90      	pop	{r4, r7, pc}

08006784 <SDOS_SdoRes>:

 \brief    This function is called when a SDO response shall be sent
*////////////////////////////////////////////////////////////////////////////////////////

void SDOS_SdoRes(UINT8 abort, UINT32 objLength, UINT16 MBXMEM *pData)
{
 8006784:	b590      	push	{r4, r7, lr}
 8006786:	b089      	sub	sp, #36	@ 0x24
 8006788:	af02      	add	r7, sp, #8
 800678a:	4603      	mov	r3, r0
 800678c:	60b9      	str	r1, [r7, #8]
 800678e:	607a      	str	r2, [r7, #4]
 8006790:	73fb      	strb	r3, [r7, #15]
	UINT16 dataSize = 0;
 8006792:	2300      	movs	r3, #0
 8006794:	82fb      	strh	r3, [r7, #22]

	if (bSdoInWork)
 8006796:	4b38      	ldr	r3, [pc, #224]	@ (8006878 <SDOS_SdoRes+0xf4>)
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d068      	beq.n	8006870 <SDOS_SdoRes+0xec>
	{
		/* SDO-Response is expected */
		UINT8 command = pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] & SDOHEADER_COMMAND;
 800679e:	4b37      	ldr	r3, [pc, #220]	@ (800687c <SDOS_SdoRes+0xf8>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	891b      	ldrh	r3, [r3, #8]
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	f023 031f 	bic.w	r3, r3, #31
 80067aa:	757b      	strb	r3, [r7, #21]
		UINT8 completeAccess = pSdoResStored->SdoHeader.Sdo[SDOHEADER_COMMANDOFFSET] & SDOHEADER_COMPLETEACCESS;
 80067ac:	4b33      	ldr	r3, [pc, #204]	@ (800687c <SDOS_SdoRes+0xf8>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	891b      	ldrh	r3, [r3, #8]
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	f003 0310 	and.w	r3, r3, #16
 80067b8:	753b      	strb	r3, [r7, #20]

		if (command == SDOSERVICE_INITIATEUPLOADREQ)
 80067ba:	7d7b      	ldrb	r3, [r7, #21]
 80067bc:	2b40      	cmp	r3, #64	@ 0x40
 80067be:	d148      	bne.n	8006852 <SDOS_SdoRes+0xce>
		{
			/* dataSize contains the available size in one mailbox */
			dataSize = u16SendMbxSize - MBX_HEADER_SIZE - UPLOAD_NORM_RES_SIZE;
 80067c0:	4b2f      	ldr	r3, [pc, #188]	@ (8006880 <SDOS_SdoRes+0xfc>)
 80067c2:	881b      	ldrh	r3, [r3, #0]
 80067c4:	3b10      	subs	r3, #16
 80067c6:	82fb      	strh	r3, [r7, #22]
			if (dataSize < objLength)
 80067c8:	8afb      	ldrh	r3, [r7, #22]
 80067ca:	68ba      	ldr	r2, [r7, #8]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d91d      	bls.n	800680c <SDOS_SdoRes+0x88>
			{
				/* Segmented Upload, the variables for the segmented transfer should be initialized */
				bSdoSegFollows = TRUE;
 80067d0:	4b2c      	ldr	r3, [pc, #176]	@ (8006884 <SDOS_SdoRes+0x100>)
 80067d2:	2201      	movs	r2, #1
 80067d4:	701a      	strb	r2, [r3, #0]
				bSdoSegLastToggle = 1;
 80067d6:	4b2c      	ldr	r3, [pc, #176]	@ (8006888 <SDOS_SdoRes+0x104>)
 80067d8:	2201      	movs	r2, #1
 80067da:	701a      	strb	r2, [r3, #0]
				bSdoSegAccess = completeAccess;
 80067dc:	4a2b      	ldr	r2, [pc, #172]	@ (800688c <SDOS_SdoRes+0x108>)
 80067de:	7d3b      	ldrb	r3, [r7, #20]
 80067e0:	7013      	strb	r3, [r2, #0]
				nSdoSegCompleteSize = objLength;
 80067e2:	4a2b      	ldr	r2, [pc, #172]	@ (8006890 <SDOS_SdoRes+0x10c>)
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	6013      	str	r3, [r2, #0]
				nSdoSegService = SDOSERVICE_UPLOADSEGMENTREQ;
 80067e8:	4b2a      	ldr	r3, [pc, #168]	@ (8006894 <SDOS_SdoRes+0x110>)
 80067ea:	2260      	movs	r2, #96	@ 0x60
 80067ec:	701a      	strb	r2, [r3, #0]
				pSdoSegData = (UINT16 VARMEM *) pData;
 80067ee:	4a2a      	ldr	r2, [pc, #168]	@ (8006898 <SDOS_SdoRes+0x114>)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6013      	str	r3, [r2, #0]
				/* the first segment shall be copied */
				MBXMEMCPY((UINT16 *)((TINITSDOUPLOADNORMRESMBX MBXMEM *) pSdoResStored)->Data, pData, dataSize);
 80067f4:	4b21      	ldr	r3, [pc, #132]	@ (800687c <SDOS_SdoRes+0xf8>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	3310      	adds	r3, #16
 80067fa:	8afa      	ldrh	r2, [r7, #22]
 80067fc:	6879      	ldr	r1, [r7, #4]
 80067fe:	4618      	mov	r0, r3
 8006800:	f004 ff4a 	bl	800b698 <memcpy>
				nSdoSegBytesToHandle = dataSize;
 8006804:	8afb      	ldrh	r3, [r7, #22]
 8006806:	4a25      	ldr	r2, [pc, #148]	@ (800689c <SDOS_SdoRes+0x118>)
 8006808:	6013      	str	r3, [r2, #0]
 800680a:	e022      	b.n	8006852 <SDOS_SdoRes+0xce>
			}
			else
				if ((objLength <= 4) && (objLength > 0))
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	2b04      	cmp	r3, #4
 8006810:	d811      	bhi.n	8006836 <SDOS_SdoRes+0xb2>
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d00e      	beq.n	8006836 <SDOS_SdoRes+0xb2>
				{
					/* Expedited response */
					if (pData != ((TINITSDOUPLOADEXPRESMBX MBXMEM *) pSdoResStored)->Data)
 8006818:	4b18      	ldr	r3, [pc, #96]	@ (800687c <SDOS_SdoRes+0xf8>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	330c      	adds	r3, #12
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	429a      	cmp	r2, r3
 8006822:	d016      	beq.n	8006852 <SDOS_SdoRes+0xce>
					{
						/* the data is not in the response buffer yet, it shall be copied */
						MBXMEMCPY((UINT16 *)((TINITSDOUPLOADEXPRESMBX MBXMEM *) pSdoResStored)->Data, pData, objLength);
 8006824:	4b15      	ldr	r3, [pc, #84]	@ (800687c <SDOS_SdoRes+0xf8>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	330c      	adds	r3, #12
 800682a:	68ba      	ldr	r2, [r7, #8]
 800682c:	6879      	ldr	r1, [r7, #4]
 800682e:	4618      	mov	r0, r3
 8006830:	f004 ff32 	bl	800b698 <memcpy>
					if (pData != ((TINITSDOUPLOADEXPRESMBX MBXMEM *) pSdoResStored)->Data)
 8006834:	e00d      	b.n	8006852 <SDOS_SdoRes+0xce>
					}
				}
				else
				{
					/* Normal response */
					if (pData != ((TINITSDOUPLOADNORMRESMBX MBXMEM *) pSdoResStored)->Data)
 8006836:	4b11      	ldr	r3, [pc, #68]	@ (800687c <SDOS_SdoRes+0xf8>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	3310      	adds	r3, #16
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	429a      	cmp	r2, r3
 8006840:	d007      	beq.n	8006852 <SDOS_SdoRes+0xce>
					{
						/* the data is not in the response buffer yet, it shall be copied */
						MBXMEMCPY((UINT16 *)((TINITSDOUPLOADNORMRESMBX MBXMEM *) pSdoResStored)->Data, pData, objLength);
 8006842:	4b0e      	ldr	r3, [pc, #56]	@ (800687c <SDOS_SdoRes+0xf8>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	3310      	adds	r3, #16
 8006848:	68ba      	ldr	r2, [r7, #8]
 800684a:	6879      	ldr	r1, [r7, #4]
 800684c:	4618      	mov	r0, r3
 800684e:	f004 ff23 	bl	800b698 <memcpy>
					}
				}
		}

		/* SDO access is finished, send the response */
		bSdoInWork = FALSE;
 8006852:	4b09      	ldr	r3, [pc, #36]	@ (8006878 <SDOS_SdoRes+0xf4>)
 8006854:	2200      	movs	r2, #0
 8006856:	701a      	strb	r2, [r3, #0]
		SdoRes(abort, command, completeAccess, dataSize, objLength, pSdoResStored);
 8006858:	4b08      	ldr	r3, [pc, #32]	@ (800687c <SDOS_SdoRes+0xf8>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	8afc      	ldrh	r4, [r7, #22]
 800685e:	7d3a      	ldrb	r2, [r7, #20]
 8006860:	7d79      	ldrb	r1, [r7, #21]
 8006862:	7bf8      	ldrb	r0, [r7, #15]
 8006864:	9301      	str	r3, [sp, #4]
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	9300      	str	r3, [sp, #0]
 800686a:	4623      	mov	r3, r4
 800686c:	f7ff fbe2 	bl	8006034 <SdoRes>
	}
}
 8006870:	bf00      	nop
 8006872:	371c      	adds	r7, #28
 8006874:	46bd      	mov	sp, r7
 8006876:	bd90      	pop	{r4, r7, pc}
 8006878:	24000664 	.word	0x24000664
 800687c:	24000660 	.word	0x24000660
 8006880:	2400051a 	.word	0x2400051a
 8006884:	24000666 	.word	0x24000666
 8006888:	24000670 	.word	0x24000670
 800688c:	24000667 	.word	0x24000667
 8006890:	24000674 	.word	0x24000674
 8006894:	24000665 	.word	0x24000665
 8006898:	24000654 	.word	0x24000654
 800689c:	2400066c 	.word	0x2400066c

080068a0 <SDOS_ClearPendingResponse>:
\brief    Clear the variables handling a pending SDO Response
		   This function shall be called before the other mailbox data pointer are set to NULL
*////////////////////////////////////////////////////////////////////////////////////////

void  SDOS_ClearPendingResponse(void)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	af00      	add	r7, sp, #0
	if ((bSdoInWork == TRUE) && (pSdoResStored != NULL) && (((TMBX MBXMEM *)pSdoResStored) != psRepeatMbx) && (((TMBX MBXMEM *)pSdoResStored) != psStoreMbx))
 80068a4:	4b23      	ldr	r3, [pc, #140]	@ (8006934 <SDOS_ClearPendingResponse+0x94>)
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d117      	bne.n	80068dc <SDOS_ClearPendingResponse+0x3c>
 80068ac:	4b22      	ldr	r3, [pc, #136]	@ (8006938 <SDOS_ClearPendingResponse+0x98>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d013      	beq.n	80068dc <SDOS_ClearPendingResponse+0x3c>
 80068b4:	4b20      	ldr	r3, [pc, #128]	@ (8006938 <SDOS_ClearPendingResponse+0x98>)
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	4b20      	ldr	r3, [pc, #128]	@ (800693c <SDOS_ClearPendingResponse+0x9c>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	429a      	cmp	r2, r3
 80068be:	d00d      	beq.n	80068dc <SDOS_ClearPendingResponse+0x3c>
 80068c0:	4b1d      	ldr	r3, [pc, #116]	@ (8006938 <SDOS_ClearPendingResponse+0x98>)
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	4b1e      	ldr	r3, [pc, #120]	@ (8006940 <SDOS_ClearPendingResponse+0xa0>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d007      	beq.n	80068dc <SDOS_ClearPendingResponse+0x3c>
	{
		APPL_FreeMailboxBuffer(pSdoResStored);
 80068cc:	4b1a      	ldr	r3, [pc, #104]	@ (8006938 <SDOS_ClearPendingResponse+0x98>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4618      	mov	r0, r3
 80068d2:	f004 fde7 	bl	800b4a4 <free>
		pSdoResStored = NULL;
 80068d6:	4b18      	ldr	r3, [pc, #96]	@ (8006938 <SDOS_ClearPendingResponse+0x98>)
 80068d8:	2200      	movs	r2, #0
 80068da:	601a      	str	r2, [r3, #0]
	}

	u8PendingSdo = 0;
 80068dc:	4b19      	ldr	r3, [pc, #100]	@ (8006944 <SDOS_ClearPendingResponse+0xa4>)
 80068de:	2200      	movs	r2, #0
 80068e0:	701a      	strb	r2, [r3, #0]
	bStoreCompleteAccess = FALSE;
 80068e2:	4b19      	ldr	r3, [pc, #100]	@ (8006948 <SDOS_ClearPendingResponse+0xa8>)
 80068e4:	2200      	movs	r2, #0
 80068e6:	701a      	strb	r2, [r3, #0]
	u16StoreIndex = 0;
 80068e8:	4b18      	ldr	r3, [pc, #96]	@ (800694c <SDOS_ClearPendingResponse+0xac>)
 80068ea:	2200      	movs	r2, #0
 80068ec:	801a      	strh	r2, [r3, #0]
	u8StoreSubindex = 0;
 80068ee:	4b18      	ldr	r3, [pc, #96]	@ (8006950 <SDOS_ClearPendingResponse+0xb0>)
 80068f0:	2200      	movs	r2, #0
 80068f2:	701a      	strb	r2, [r3, #0]
	u32StoreDataSize = 0;
 80068f4:	4b17      	ldr	r3, [pc, #92]	@ (8006954 <SDOS_ClearPendingResponse+0xb4>)
 80068f6:	2200      	movs	r2, #0
 80068f8:	601a      	str	r2, [r3, #0]
	pStoreData = NULL;
 80068fa:	4b17      	ldr	r3, [pc, #92]	@ (8006958 <SDOS_ClearPendingResponse+0xb8>)
 80068fc:	2200      	movs	r2, #0
 80068fe:	601a      	str	r2, [r3, #0]
	pSdoPendFunc = NULL;
 8006900:	4b16      	ldr	r3, [pc, #88]	@ (800695c <SDOS_ClearPendingResponse+0xbc>)
 8006902:	2200      	movs	r2, #0
 8006904:	601a      	str	r2, [r3, #0]
	bSdoInWork = FALSE;
 8006906:	4b0b      	ldr	r3, [pc, #44]	@ (8006934 <SDOS_ClearPendingResponse+0x94>)
 8006908:	2200      	movs	r2, #0
 800690a:	701a      	strb	r2, [r3, #0]

	if (pSdoSegData != NULL)
 800690c:	4b14      	ldr	r3, [pc, #80]	@ (8006960 <SDOS_ClearPendingResponse+0xc0>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d007      	beq.n	8006924 <SDOS_ClearPendingResponse+0x84>
	{
		FREEMEM((UINT16 VARMEM *) pSdoSegData);
 8006914:	4b12      	ldr	r3, [pc, #72]	@ (8006960 <SDOS_ClearPendingResponse+0xc0>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4618      	mov	r0, r3
 800691a:	f004 fdc3 	bl	800b4a4 <free>
		pSdoSegData = NULL;
 800691e:	4b10      	ldr	r3, [pc, #64]	@ (8006960 <SDOS_ClearPendingResponse+0xc0>)
 8006920:	2200      	movs	r2, #0
 8006922:	601a      	str	r2, [r3, #0]
	}

	nSdoSegBytesToHandle = 0;
 8006924:	4b0f      	ldr	r3, [pc, #60]	@ (8006964 <SDOS_ClearPendingResponse+0xc4>)
 8006926:	2200      	movs	r2, #0
 8006928:	601a      	str	r2, [r3, #0]
	nSdoSegService = 0;
 800692a:	4b0f      	ldr	r3, [pc, #60]	@ (8006968 <SDOS_ClearPendingResponse+0xc8>)
 800692c:	2200      	movs	r2, #0
 800692e:	701a      	strb	r2, [r3, #0]

}
 8006930:	bf00      	nop
 8006932:	bd80      	pop	{r7, pc}
 8006934:	24000664 	.word	0x24000664
 8006938:	24000660 	.word	0x24000660
 800693c:	24000530 	.word	0x24000530
 8006940:	24000534 	.word	0x24000534
 8006944:	24000630 	.word	0x24000630
 8006948:	24000631 	.word	0x24000631
 800694c:	24000634 	.word	0x24000634
 8006950:	24000632 	.word	0x24000632
 8006954:	24000638 	.word	0x24000638
 8006958:	2400063c 	.word	0x2400063c
 800695c:	24000640 	.word	0x24000640
 8006960:	24000654 	.word	0x24000654
 8006964:	2400066c 	.word	0x2400066c
 8006968:	24000665 	.word	0x24000665

0800696c <SDOS_SdoInfoInd>:
			is received from the master and calls depending from
			the opcode the concerning function.
*////////////////////////////////////////////////////////////////////////////////////////

UINT8 SDOS_SdoInfoInd(TSDOINFORMATION MBXMEM *pSdoInfoInd)
{
 800696c:	b590      	push	{r4, r7, lr}
 800696e:	b08f      	sub	sp, #60	@ 0x3c
 8006970:	af02      	add	r7, sp, #8
 8006972:	6078      	str	r0, [r7, #4]
	UINT8 abort = 0;
 8006974:	2300      	movs	r3, #0
 8006976:	73fb      	strb	r3, [r7, #15]
	/* the variable opCode contains the requested SDO Information type */
	UINT8 opCode = (UINT8)((pSdoInfoInd->SdoHeader.InfoHead & INFOHEAD_OPCODE_MASK) >> INFOHEAD_OPCODE_SHIFT);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	891b      	ldrh	r3, [r3, #8]
 800697c:	b2db      	uxtb	r3, r3
 800697e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006982:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	OBJCONST TOBJECT OBJMEM * pObjEntry;
	UINT16 index;
	UINT8 flags = COE_SERVICE;
 8006986:	2302      	movs	r3, #2
 8006988:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	/* it has to be checked if the mailbox protocol is correct, the sent mailbox data length has to
	   great enough for the service header of the requested SDO Information type */
	if (opCode == SDOINFOSERVICE_ENTRYDESCRIPTION_Q)
 800698c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006990:	2b05      	cmp	r3, #5
 8006992:	d105      	bne.n	80069a0 <SDOS_SdoInfoInd+0x34>
	{
		if (pSdoInfoInd->MbxHeader.Length < SIZEOF_SDOINFOENTRYREQSTRUCT)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	881b      	ldrh	r3, [r3, #0]
 8006998:	2b09      	cmp	r3, #9
 800699a:	d807      	bhi.n	80069ac <SDOS_SdoInfoInd+0x40>
		{
			return MBXERR_SIZETOOSHORT;
 800699c:	2306      	movs	r3, #6
 800699e:	e1d6      	b.n	8006d4e <SDOS_SdoInfoInd+0x3e2>
		}
	}
	else
	{
		if (pSdoInfoInd->MbxHeader.Length < SIZEOF_SDOINFOLISTSTRUCT)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	881b      	ldrh	r3, [r3, #0]
 80069a4:	2b07      	cmp	r3, #7
 80069a6:	d801      	bhi.n	80069ac <SDOS_SdoInfoInd+0x40>
		{
			return MBXERR_SIZETOOSHORT;
 80069a8:	2306      	movs	r3, #6
 80069aa:	e1d0      	b.n	8006d4e <SDOS_SdoInfoInd+0x3e2>
		}
	}

	switch (opCode)
 80069ac:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80069b0:	2b05      	cmp	r3, #5
 80069b2:	f000 80c9 	beq.w	8006b48 <SDOS_SdoInfoInd+0x1dc>
 80069b6:	2b05      	cmp	r3, #5
 80069b8:	f300 8195 	bgt.w	8006ce6 <SDOS_SdoInfoInd+0x37a>
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d003      	beq.n	80069c8 <SDOS_SdoInfoInd+0x5c>
 80069c0:	2b03      	cmp	r3, #3
 80069c2:	f000 80c1 	beq.w	8006b48 <SDOS_SdoInfoInd+0x1dc>
 80069c6:	e18e      	b.n	8006ce6 <SDOS_SdoInfoInd+0x37a>
	{
	case SDOINFOSERVICE_OBJDICTIONARYLIST_Q:
		/* an object list is requested, check if the list type is supported */
		if (SWAPWORD(pSdoInfoInd->SdoHeader.Data.List.ListType) <= INFO_LIST_TYPE_MAX)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	899b      	ldrh	r3, [r3, #12]
 80069cc:	2b05      	cmp	r3, #5
 80069ce:	f200 818d 	bhi.w	8006cec <SDOS_SdoInfoInd+0x380>
		{
			UINT16 size = 0;
 80069d2:	2300      	movs	r3, #0
 80069d4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
			/* the variable listType contains the requested listType */
			UINT8 listType = (UINT8)SWAPWORD(pSdoInfoInd->SdoHeader.Data.List.ListType);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	899b      	ldrh	r3, [r3, #12]
 80069da:	75fb      	strb	r3, [r7, #23]

			/* the SDO Information Header has to be stored because this function will be
			   called again if the response could not be sent with one mailbox service, the
			   variable nSdoInfoFragmentsLeft is 0 zero for the first call and unequal 0
			   for the following calls */
			MBXMEMCPY(aSdoInfoHeader, pSdoInfoInd, SDO_INFO_HEADER_BYTE_SIZE);
 80069dc:	220e      	movs	r2, #14
 80069de:	6879      	ldr	r1, [r7, #4]
 80069e0:	489c      	ldr	r0, [pc, #624]	@ (8006c54 <SDOS_SdoInfoInd+0x2e8>)
 80069e2:	f004 fe59 	bl	800b698 <memcpy>
			if (listType-- == 0)
 80069e6:	7dfb      	ldrb	r3, [r7, #23]
 80069e8:	1e5a      	subs	r2, r3, #1
 80069ea:	75fa      	strb	r2, [r7, #23]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d122      	bne.n	8006a36 <SDOS_SdoInfoInd+0xca>
				/* List-Type 0: length of the lists */
				UINT8 i;

				/* the needed mailbox size for List-Type 0 response is just 24 bytes, the mailbox has always
				   to be at least 24 bytes to support the SDO Information service */
				nSdoInfoFragmentsLeft = 0;
 80069f0:	4b99      	ldr	r3, [pc, #612]	@ (8006c58 <SDOS_SdoInfoInd+0x2ec>)
 80069f2:	2200      	movs	r2, #0
 80069f4:	801a      	strh	r2, [r3, #0]
				for (i = 0; i < INFO_LIST_TYPE_MAX; i++)
 80069f6:	2300      	movs	r3, #0
 80069f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069fc:	e014      	b.n	8006a28 <SDOS_SdoInfoInd+0xbc>
				{
					UINT16 n = OBJ_GetNoOfObjects(i);
 80069fe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006a02:	4618      	mov	r0, r3
 8006a04:	f7fd fd80 	bl	8004508 <OBJ_GetNoOfObjects>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	823b      	strh	r3, [r7, #16]

					/* copy the number of objects of the list type in the SDO Information response */
					((UINT16 MBXMEM *) &pSdoInfoInd->CoeHeader)[(SIZEOF_SDOINFOLISTSTRUCT >> 1) + i] = SWAPWORD(n);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	1d9a      	adds	r2, r3, #6
 8006a10:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006a14:	3304      	adds	r3, #4
 8006a16:	005b      	lsls	r3, r3, #1
 8006a18:	4413      	add	r3, r2
 8006a1a:	8a3a      	ldrh	r2, [r7, #16]
 8006a1c:	801a      	strh	r2, [r3, #0]
				for (i = 0; i < INFO_LIST_TYPE_MAX; i++)
 8006a1e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006a22:	3301      	adds	r3, #1
 8006a24:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a28:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006a2c:	2b04      	cmp	r3, #4
 8006a2e:	d9e6      	bls.n	80069fe <SDOS_SdoInfoInd+0x92>
				}

				/* size of the mailbox service response */
				size = (INFO_LIST_TYPE_MAX << 1) + SIZEOF_SDOINFOLISTSTRUCT;
 8006a30:	2312      	movs	r3, #18
 8006a32:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006a34:	e058      	b.n	8006ae8 <SDOS_SdoInfoInd+0x17c>
			}
			else
			{
				/* object list with indexes is requested */
				UINT16 MBXMEM * pData;
				UINT16 n = 0;
 8006a36:	2300      	movs	r3, #0
 8006a38:	82bb      	strh	r3, [r7, #20]

				if (nSdoInfoFragmentsLeft)
 8006a3a:	4b87      	ldr	r3, [pc, #540]	@ (8006c58 <SDOS_SdoInfoInd+0x2ec>)
 8006a3c:	881b      	ldrh	r3, [r3, #0]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d011      	beq.n	8006a66 <SDOS_SdoInfoInd+0xfa>
				{
					/* the next fragment of the SDO Information response shall be sent */
					/* initialize size with the maximum size fits into one mailbox service */
					{
						size = u16SendMbxSize - SIZEOF_SDOINFO - MBX_HEADER_SIZE;
 8006a42:	4b86      	ldr	r3, [pc, #536]	@ (8006c5c <SDOS_SdoInfoInd+0x2f0>)
 8006a44:	881b      	ldrh	r3, [r3, #0]
 8006a46:	3b0c      	subs	r3, #12
 8006a48:	85bb      	strh	r3, [r7, #44]	@ 0x2c
					}
					/* initialize pData with the pointer where the fragment has to be copied */
					pData = &((UINT16 MBXMEM *) &pSdoInfoInd->CoeHeader)[SIZEOF_SDOINFO >> 1];
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	3306      	adds	r3, #6
 8006a4e:	3306      	adds	r3, #6
 8006a50:	627b      	str	r3, [r7, #36]	@ 0x24
					/* initialize index with the next index to be sent */
					index = nSdoInfoIndex;
 8006a52:	4b83      	ldr	r3, [pc, #524]	@ (8006c60 <SDOS_SdoInfoInd+0x2f4>)
 8006a54:	881b      	ldrh	r3, [r3, #0]
 8006a56:	81bb      	strh	r3, [r7, #12]
					/* decrement the number of fragments to be sent */
					nSdoInfoFragmentsLeft--;
 8006a58:	4b7f      	ldr	r3, [pc, #508]	@ (8006c58 <SDOS_SdoInfoInd+0x2ec>)
 8006a5a:	881b      	ldrh	r3, [r3, #0]
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	b29a      	uxth	r2, r3
 8006a60:	4b7d      	ldr	r3, [pc, #500]	@ (8006c58 <SDOS_SdoInfoInd+0x2ec>)
 8006a62:	801a      	strh	r2, [r3, #0]
 8006a64:	e029      	b.n	8006aba <SDOS_SdoInfoInd+0x14e>
				}
				else
				{
					/* the first fragment of the SDO Information response has to be sent */
					/* get the number of objects of the requested object list */
					n = OBJ_GetNoOfObjects(listType);
 8006a66:	7dfb      	ldrb	r3, [r7, #23]
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f7fd fd4d 	bl	8004508 <OBJ_GetNoOfObjects>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	82bb      	strh	r3, [r7, #20]
					/* we start with index 0x1000 */
					index = 0x1000;
 8006a72:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006a76:	81bb      	strh	r3, [r7, #12]
					/* initialize size with the maximum size fits into one mailbox service */
					{
						size = u16SendMbxSize - SIZEOF_SDOINFOLISTSTRUCT - MBX_HEADER_SIZE;
 8006a78:	4b78      	ldr	r3, [pc, #480]	@ (8006c5c <SDOS_SdoInfoInd+0x2f0>)
 8006a7a:	881b      	ldrh	r3, [r3, #0]
 8006a7c:	3b0e      	subs	r3, #14
 8006a7e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
					}
					/* initialize pData with the pointer where the fragment has to be copied */
					pData = &((UINT16 MBXMEM *) &pSdoInfoInd->CoeHeader)[SIZEOF_SDOINFOLISTSTRUCT >> 1];
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	3306      	adds	r3, #6
 8006a84:	3308      	adds	r3, #8
 8006a86:	627b      	str	r3, [r7, #36]	@ 0x24
					/*Check if List need to be send in fragments*/
					if ((n << 1) > size)
 8006a88:	8abb      	ldrh	r3, [r7, #20]
 8006a8a:	005a      	lsls	r2, r3, #1
 8006a8c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	dd10      	ble.n	8006ab4 <SDOS_SdoInfoInd+0x148>
						/*number of Bytes to transmit don't fit into one mailbox datagram*/

						/*calculate number of fragments which need to be send
						total number of bytes - bytes which will be transmitted with the current response plus the fragment size - 1 (to round up) divided by the size of the following fragments
						*/
						UINT16 Fragsize = size + 2;
 8006a92:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006a94:	3302      	adds	r3, #2
 8006a96:	827b      	strh	r3, [r7, #18]

						nSdoInfoFragmentsLeft = (((n << 1) - size + (Fragsize - 1)) / Fragsize);
 8006a98:	8abb      	ldrh	r3, [r7, #20]
 8006a9a:	005a      	lsls	r2, r3, #1
 8006a9c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006a9e:	1ad2      	subs	r2, r2, r3
 8006aa0:	8a7b      	ldrh	r3, [r7, #18]
 8006aa2:	3b01      	subs	r3, #1
 8006aa4:	441a      	add	r2, r3
 8006aa6:	8a7b      	ldrh	r3, [r7, #18]
 8006aa8:	fb92 f3f3 	sdiv	r3, r2, r3
 8006aac:	b29a      	uxth	r2, r3
 8006aae:	4b6a      	ldr	r3, [pc, #424]	@ (8006c58 <SDOS_SdoInfoInd+0x2ec>)
 8006ab0:	801a      	strh	r2, [r3, #0]
 8006ab2:	e002      	b.n	8006aba <SDOS_SdoInfoInd+0x14e>
					}
					else
					{
						nSdoInfoFragmentsLeft = 0;
 8006ab4:	4b68      	ldr	r3, [pc, #416]	@ (8006c58 <SDOS_SdoInfoInd+0x2ec>)
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	801a      	strh	r2, [r3, #0]
					}
				}

				/* get the next part of the requested object list */
				size = OBJ_GetObjectList(listType, &index, size, pData, &abort);
 8006aba:	7dfb      	ldrb	r3, [r7, #23]
 8006abc:	b298      	uxth	r0, r3
 8006abe:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8006ac0:	f107 010c 	add.w	r1, r7, #12
 8006ac4:	f107 030f 	add.w	r3, r7, #15
 8006ac8:	9300      	str	r3, [sp, #0]
 8006aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006acc:	f7fd fd68 	bl	80045a0 <OBJ_GetObjectList>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	85bb      	strh	r3, [r7, #44]	@ 0x2c

				/* store index for next fragment */
				nSdoInfoIndex = index;
 8006ad4:	89ba      	ldrh	r2, [r7, #12]
 8006ad6:	4b62      	ldr	r3, [pc, #392]	@ (8006c60 <SDOS_SdoInfoInd+0x2f4>)
 8006ad8:	801a      	strh	r2, [r3, #0]
				/* size contains before the instruction the size still available in the mailbox buffer
					and shall contain the size of the mailbox response data after the next instruction */
				{
					size = u16SendMbxSize - size - MBX_HEADER_SIZE;
 8006ada:	4b60      	ldr	r3, [pc, #384]	@ (8006c5c <SDOS_SdoInfoInd+0x2f0>)
 8006adc:	881a      	ldrh	r2, [r3, #0]
 8006ade:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006ae0:	1ad3      	subs	r3, r2, r3
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	3b06      	subs	r3, #6
 8006ae6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
				}
			}

			/* size of the mailbox response data */
			pSdoInfoInd->MbxHeader.Length = size;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8006aec:	801a      	strh	r2, [r3, #0]

			if (abort == 0)
 8006aee:	7bfb      	ldrb	r3, [r7, #15]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	f040 80fb 	bne.w	8006cec <SDOS_SdoInfoInd+0x380>
			{
				pSdoInfoInd->SdoHeader.InfoHead &= ~INFOHEAD_OPCODE_MASK;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	891b      	ldrh	r3, [r3, #8]
 8006afa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006afe:	b29a      	uxth	r2, r3
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	811a      	strh	r2, [r3, #8]
				pSdoInfoInd->SdoHeader.InfoHead |= (UINT16)(SDOINFOSERVICE_OBJDICTIONARYLIST_S << INFOHEAD_OPCODE_SHIFT);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	891b      	ldrh	r3, [r3, #8]
 8006b08:	f043 0302 	orr.w	r3, r3, #2
 8006b0c:	b29a      	uxth	r2, r3
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	811a      	strh	r2, [r3, #8]
				/* number of fragments still has to be sent */
				pSdoInfoInd->SdoHeader.FragmentsLeft = SWAPWORD(nSdoInfoFragmentsLeft);
 8006b12:	4b51      	ldr	r3, [pc, #324]	@ (8006c58 <SDOS_SdoInfoInd+0x2ec>)
 8006b14:	881a      	ldrh	r2, [r3, #0]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	815a      	strh	r2, [r3, #10]

				if (nSdoInfoFragmentsLeft)
 8006b1a:	4b4f      	ldr	r3, [pc, #316]	@ (8006c58 <SDOS_SdoInfoInd+0x2ec>)
 8006b1c:	881b      	ldrh	r3, [r3, #0]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	f000 80e4 	beq.w	8006cec <SDOS_SdoInfoInd+0x380>
				{
					/* there still are fragments to be sent,
					   the InComplete flag in the SDO Information response has to be sent */
					pSdoInfoInd->SdoHeader.InfoHead &= ~INFOHEADER_INCOMPLETE_MASK;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	891b      	ldrh	r3, [r3, #8]
 8006b28:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b2c:	b29a      	uxth	r2, r3
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	811a      	strh	r2, [r3, #8]
					pSdoInfoInd->SdoHeader.InfoHead |= (UINT16)(SDOINFOSERVICE_INCOMPLETE << INFOHEAD_OPCODE_SHIFT);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	891b      	ldrh	r3, [r3, #8]
 8006b36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b3a:	b29a      	uxth	r2, r3
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	811a      	strh	r2, [r3, #8]
					/* the FRAGMENTS_FOLLOW flag has to be set for the function MBX_MailboxSendReq to
					   indicate the mailbox handler that still fragments has to be sent so that this
						function shall be called again from COE_ContinueInd when the actual mailbox buffer
						was sent */
					flags = FRAGMENTS_FOLLOW | COE_SERVICE;
 8006b40:	2382      	movs	r3, #130	@ 0x82
 8006b42:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				}
			}
		}
		break;
 8006b46:	e0d1      	b.n	8006cec <SDOS_SdoInfoInd+0x380>

	case SDOINFOSERVICE_OBJDESCRIPTION_Q:
	case SDOINFOSERVICE_ENTRYDESCRIPTION_Q:
		/* get the requested index */
		index = SWAPWORD(pSdoInfoInd->SdoHeader.Data.Obj.Index);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	899b      	ldrh	r3, [r3, #12]
 8006b4c:	81bb      	strh	r3, [r7, #12]



		if (index < 0x1000)
 8006b4e:	89bb      	ldrh	r3, [r7, #12]
 8006b50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b54:	d202      	bcs.n	8006b5c <SDOS_SdoInfoInd+0x1f0>
		{
			/*SDO Info access is only allowed for objects >= 0x1000*/
			abort = ABORTIDX_UNSUPPORTED_ACCESS;
 8006b56:	2305      	movs	r3, #5
 8006b58:	73fb      	strb	r3, [r7, #15]
			else
			{
				abort = ABORTIDX_OBJECT_NOT_EXISTING;
			}
		}
		break;
 8006b5a:	e0c9      	b.n	8006cf0 <SDOS_SdoInfoInd+0x384>
			pObjEntry = OBJ_GetObjectHandle(index);
 8006b5c:	89bb      	ldrh	r3, [r7, #12]
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f7fd fbdc 	bl	800431c <OBJ_GetObjectHandle>
 8006b64:	61f8      	str	r0, [r7, #28]
			if (pObjEntry)
 8006b66:	69fb      	ldr	r3, [r7, #28]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	f000 80b9 	beq.w	8006ce0 <SDOS_SdoInfoInd+0x374>
				UINT16 size = 0;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (opCode == SDOINFOSERVICE_OBJDESCRIPTION_Q)
 8006b72:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006b76:	2b03      	cmp	r3, #3
 8006b78:	d126      	bne.n	8006bc8 <SDOS_SdoInfoInd+0x25c>
					OBJTOMBXMEMCPY(&pSdoInfoInd->SdoHeader.Data.Obj.Res, OBJ_GetObjDesc(pObjEntry), SDO_INFO_OBJ_DESC_SIZE);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f103 040e 	add.w	r4, r3, #14
 8006b80:	69f8      	ldr	r0, [r7, #28]
 8006b82:	f7fd fe4b 	bl	800481c <OBJ_GetObjDesc>
 8006b86:	4603      	mov	r3, r0
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	6023      	str	r3, [r4, #0]
					size = OBJ_GetDesc(index, 0, pObjEntry, NULL) + SIZEOF_SDOINFOOBJSTRUCT;
 8006b8c:	89b8      	ldrh	r0, [r7, #12]
 8006b8e:	2300      	movs	r3, #0
 8006b90:	69fa      	ldr	r2, [r7, #28]
 8006b92:	2100      	movs	r1, #0
 8006b94:	f7fd fd82 	bl	800469c <OBJ_GetDesc>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	330c      	adds	r3, #12
 8006b9c:	847b      	strh	r3, [r7, #34]	@ 0x22
					if (size > (u16SendMbxSize - MBX_HEADER_SIZE))
 8006b9e:	4b2f      	ldr	r3, [pc, #188]	@ (8006c5c <SDOS_SdoInfoInd+0x2f0>)
 8006ba0:	881b      	ldrh	r3, [r3, #0]
 8006ba2:	1f5a      	subs	r2, r3, #5
 8006ba4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	dc02      	bgt.n	8006bb0 <SDOS_SdoInfoInd+0x244>
						size = SIZEOF_SDOINFOOBJSTRUCT;
 8006baa:	230c      	movs	r3, #12
 8006bac:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006bae:	e07b      	b.n	8006ca8 <SDOS_SdoInfoInd+0x33c>
						size = OBJ_GetDesc(index, 0, pObjEntry, ((UINT16 MBXMEM *) &(&pSdoInfoInd->SdoHeader.Data.Obj.Res)[1])) + SIZEOF_SDOINFOOBJSTRUCT;
 8006bb0:	89b8      	ldrh	r0, [r7, #12]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	330e      	adds	r3, #14
 8006bb6:	3304      	adds	r3, #4
 8006bb8:	69fa      	ldr	r2, [r7, #28]
 8006bba:	2100      	movs	r1, #0
 8006bbc:	f7fd fd6e 	bl	800469c <OBJ_GetDesc>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	330c      	adds	r3, #12
 8006bc4:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006bc6:	e06f      	b.n	8006ca8 <SDOS_SdoInfoInd+0x33c>
					UINT8 subindex = (UINT8)((pSdoInfoInd->SdoHeader.Data.Entry.Info & ENTRY_MASK_SUBINDEX) >> ENTRY_SUBINDEX_SHIFT);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	89db      	ldrh	r3, [r3, #14]
 8006bcc:	76fb      	strb	r3, [r7, #27]
					UINT8 maxSubindex = (OBJ_GetObjDesc(pObjEntry)->ObjFlags & OBJFLAGS_MAXSUBINDEXMASK) >> OBJFLAGS_MAXSUBINDEXSHIFT;
 8006bce:	69f8      	ldr	r0, [r7, #28]
 8006bd0:	f7fd fe24 	bl	800481c <OBJ_GetObjDesc>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	885b      	ldrh	r3, [r3, #2]
 8006bd8:	76bb      	strb	r3, [r7, #26]
					if (subindex <= maxSubindex)
 8006bda:	7efa      	ldrb	r2, [r7, #27]
 8006bdc:	7ebb      	ldrb	r3, [r7, #26]
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d860      	bhi.n	8006ca4 <SDOS_SdoInfoInd+0x338>
						OBJTOMBXMEMCPY(&pSdoInfoInd->SdoHeader.Data.Entry.Res, OBJ_GetEntryDesc(pObjEntry, subindex), SIZEOF(TSDOINFOENTRYDESC));
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f103 0410 	add.w	r4, r3, #16
 8006be8:	7efb      	ldrb	r3, [r7, #27]
 8006bea:	4619      	mov	r1, r3
 8006bec:	69f8      	ldr	r0, [r7, #28]
 8006bee:	f7fd fde9 	bl	80047c4 <OBJ_GetEntryDesc>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	2206      	movs	r2, #6
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	4620      	mov	r0, r4
 8006bfa:	f004 fd4d 	bl	800b698 <memcpy>
						pSdoInfoInd->SdoHeader.Data.Entry.Info &= ~ENTRY_MASK_VALUEINFO;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	89db      	ldrh	r3, [r3, #14]
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	b29a      	uxth	r2, r3
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	81da      	strh	r2, [r3, #14]
						ObjectFlags = OBJ_GetObjDesc(pObjEntry)->ObjFlags;
 8006c0a:	69f8      	ldr	r0, [r7, #28]
 8006c0c:	f7fd fe06 	bl	800481c <OBJ_GetObjDesc>
 8006c10:	4603      	mov	r3, r0
 8006c12:	885b      	ldrh	r3, [r3, #2]
 8006c14:	833b      	strh	r3, [r7, #24]
						ObjectFlags = (ObjectFlags & OBJFLAGS_OBJCODEMASK) >> OBJFLAGS_OBJCODESHIFT;
 8006c16:	8b3b      	ldrh	r3, [r7, #24]
 8006c18:	121b      	asrs	r3, r3, #8
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	f003 030f 	and.w	r3, r3, #15
 8006c20:	833b      	strh	r3, [r7, #24]
						if (((ObjectFlags == OBJCODE_ARR) || (ObjectFlags == OBJCODE_REC)) && (subindex == 0))
 8006c22:	8b3b      	ldrh	r3, [r7, #24]
 8006c24:	2b08      	cmp	r3, #8
 8006c26:	d002      	beq.n	8006c2e <SDOS_SdoInfoInd+0x2c2>
 8006c28:	8b3b      	ldrh	r3, [r7, #24]
 8006c2a:	2b09      	cmp	r3, #9
 8006c2c:	d11c      	bne.n	8006c68 <SDOS_SdoInfoInd+0x2fc>
 8006c2e:	7efb      	ldrb	r3, [r7, #27]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d119      	bne.n	8006c68 <SDOS_SdoInfoInd+0x2fc>
							OBJTOMBXSTRCPY(((UINT16 MBXMEM *) &(&pSdoInfoInd->SdoHeader.Data.Entry.Res)[1]), aSubindexDesc, SIZEOF(aSubindexDesc));
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	3310      	adds	r3, #16
 8006c38:	3306      	adds	r3, #6
 8006c3a:	4a0a      	ldr	r2, [pc, #40]	@ (8006c64 <SDOS_SdoInfoInd+0x2f8>)
 8006c3c:	6814      	ldr	r4, [r2, #0]
 8006c3e:	6850      	ldr	r0, [r2, #4]
 8006c40:	6891      	ldr	r1, [r2, #8]
 8006c42:	601c      	str	r4, [r3, #0]
 8006c44:	6058      	str	r0, [r3, #4]
 8006c46:	6099      	str	r1, [r3, #8]
 8006c48:	7b12      	ldrb	r2, [r2, #12]
 8006c4a:	731a      	strb	r2, [r3, #12]
							size = 12 + SIZEOF_SDOINFO + SIZEOF(TSDOINFOENTRY); // 12: Length of "SubIndex 000"
 8006c4c:	231c      	movs	r3, #28
 8006c4e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006c50:	e02a      	b.n	8006ca8 <SDOS_SdoInfoInd+0x33c>
 8006c52:	bf00      	nop
 8006c54:	24000644 	.word	0x24000644
 8006c58:	24000658 	.word	0x24000658
 8006c5c:	2400051a 	.word	0x2400051a
 8006c60:	2400065a 	.word	0x2400065a
 8006c64:	2400039c 	.word	0x2400039c
							size = OBJ_GetDesc(index, subindex, pObjEntry, NULL) + SIZEOF_SDOINFO + SIZEOF(TSDOINFOENTRY);
 8006c68:	89b8      	ldrh	r0, [r7, #12]
 8006c6a:	7ef9      	ldrb	r1, [r7, #27]
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	69fa      	ldr	r2, [r7, #28]
 8006c70:	f7fd fd14 	bl	800469c <OBJ_GetDesc>
 8006c74:	4603      	mov	r3, r0
 8006c76:	3310      	adds	r3, #16
 8006c78:	847b      	strh	r3, [r7, #34]	@ 0x22
							if (size > (u16SendMbxSize - MBX_HEADER_SIZE))
 8006c7a:	4b37      	ldr	r3, [pc, #220]	@ (8006d58 <SDOS_SdoInfoInd+0x3ec>)
 8006c7c:	881b      	ldrh	r3, [r3, #0]
 8006c7e:	1f5a      	subs	r2, r3, #5
 8006c80:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006c82:	429a      	cmp	r2, r3
 8006c84:	dc02      	bgt.n	8006c8c <SDOS_SdoInfoInd+0x320>
								size = SIZEOF_SDOINFO + SIZEOF(TSDOINFOENTRY);
 8006c86:	2310      	movs	r3, #16
 8006c88:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006c8a:	e00d      	b.n	8006ca8 <SDOS_SdoInfoInd+0x33c>
								size = OBJ_GetDesc(index, subindex, pObjEntry, ((UINT16 MBXMEM *) &(&pSdoInfoInd->SdoHeader.Data.Entry.Res)[1])) + SIZEOF_SDOINFO + SIZEOF(TSDOINFOENTRY);
 8006c8c:	89b8      	ldrh	r0, [r7, #12]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	3310      	adds	r3, #16
 8006c92:	3306      	adds	r3, #6
 8006c94:	7ef9      	ldrb	r1, [r7, #27]
 8006c96:	69fa      	ldr	r2, [r7, #28]
 8006c98:	f7fd fd00 	bl	800469c <OBJ_GetDesc>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	3310      	adds	r3, #16
 8006ca0:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006ca2:	e001      	b.n	8006ca8 <SDOS_SdoInfoInd+0x33c>
						abort = ABORTIDX_SUBINDEX_NOT_EXISTING;
 8006ca4:	2311      	movs	r3, #17
 8006ca6:	73fb      	strb	r3, [r7, #15]
				if (abort == 0)
 8006ca8:	7bfb      	ldrb	r3, [r7, #15]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d120      	bne.n	8006cf0 <SDOS_SdoInfoInd+0x384>
						pSdoInfoInd->SdoHeader.FragmentsLeft = 0;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	815a      	strh	r2, [r3, #10]
						pSdoInfoInd->MbxHeader.Length = size;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8006cb8:	801a      	strh	r2, [r3, #0]
						pSdoInfoInd->SdoHeader.InfoHead &= ~INFOHEAD_OPCODE_MASK;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	891b      	ldrh	r3, [r3, #8]
 8006cbe:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006cc2:	b29a      	uxth	r2, r3
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	811a      	strh	r2, [r3, #8]
						pSdoInfoInd->SdoHeader.InfoHead |= (UINT16)((opCode + 1) << INFOHEAD_OPCODE_SHIFT);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	891a      	ldrh	r2, [r3, #8]
 8006ccc:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	b29a      	uxth	r2, r3
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	811a      	strh	r2, [r3, #8]
		break;
 8006cde:	e007      	b.n	8006cf0 <SDOS_SdoInfoInd+0x384>
				abort = ABORTIDX_OBJECT_NOT_EXISTING;
 8006ce0:	2308      	movs	r3, #8
 8006ce2:	73fb      	strb	r3, [r7, #15]
		break;
 8006ce4:	e004      	b.n	8006cf0 <SDOS_SdoInfoInd+0x384>
	default:
		abort = ABORTIDX_COMMAND_SPECIFIER_UNKNOWN;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	73fb      	strb	r3, [r7, #15]
 8006cea:	e002      	b.n	8006cf2 <SDOS_SdoInfoInd+0x386>
		break;
 8006cec:	bf00      	nop
 8006cee:	e000      	b.n	8006cf2 <SDOS_SdoInfoInd+0x386>
		break;
 8006cf0:	bf00      	nop
	}

	if (abort)
 8006cf2:	7bfb      	ldrb	r3, [r7, #15]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d01d      	beq.n	8006d34 <SDOS_SdoInfoInd+0x3c8>
	{
		/* send a SDO Information Error response */
		pSdoInfoInd->MbxHeader.Length = SIZEOF_SDOINFOERRORSTRUCT;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	220a      	movs	r2, #10
 8006cfc:	801a      	strh	r2, [r3, #0]

		pSdoInfoInd->SdoHeader.InfoHead &= ~INFOHEAD_OPCODE_MASK;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	891b      	ldrh	r3, [r3, #8]
 8006d02:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006d06:	b29a      	uxth	r2, r3
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	811a      	strh	r2, [r3, #8]
		pSdoInfoInd->SdoHeader.InfoHead |= (UINT16)((SDOINFOSERVICE_ERROR_Q) << INFOHEAD_OPCODE_SHIFT);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	891b      	ldrh	r3, [r3, #8]
 8006d10:	f043 0307 	orr.w	r3, r3, #7
 8006d14:	b29a      	uxth	r2, r3
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	811a      	strh	r2, [r3, #8]

		pSdoInfoInd->SdoHeader.FragmentsLeft = 0;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	815a      	strh	r2, [r3, #10]
		pSdoInfoInd->SdoHeader.Data.Error.ErrorCode = SWAPDWORD(cAbortCode[abort]);
 8006d20:	7bfb      	ldrb	r3, [r7, #15]
 8006d22:	461a      	mov	r2, r3
 8006d24:	4b0d      	ldr	r3, [pc, #52]	@ (8006d5c <SDOS_SdoInfoInd+0x3f0>)
 8006d26:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	60da      	str	r2, [r3, #12]

		nSdoInfoFragmentsLeft = 0;
 8006d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8006d60 <SDOS_SdoInfoInd+0x3f4>)
 8006d30:	2200      	movs	r2, #0
 8006d32:	801a      	strh	r2, [r3, #0]
	}

	if (MBX_MailboxSendReq((TMBX MBXMEM *) pSdoInfoInd, flags) != 0)
 8006d34:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006d38:	4619      	mov	r1, r3
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f7fd f914 	bl	8003f68 <MBX_MailboxSendReq>
 8006d40:	4603      	mov	r3, r0
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d002      	beq.n	8006d4c <SDOS_SdoInfoInd+0x3e0>
	{
		/* if the mailbox response could not be sent (or stored), the response will be
		   stored in the variable pCoeSendStored and will be sent automatically
			from the mailbox handler (COE_ContinueInd) when the send mailbox will be read
			the next time from the master */
		pCoeSendStored = (TMBX MBXMEM *) pSdoInfoInd;
 8006d46:	4a07      	ldr	r2, [pc, #28]	@ (8006d64 <SDOS_SdoInfoInd+0x3f8>)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6013      	str	r3, [r2, #0]
	}

	return 0;
 8006d4c:	2300      	movs	r3, #0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3734      	adds	r7, #52	@ 0x34
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd90      	pop	{r4, r7, pc}
 8006d56:	bf00      	nop
 8006d58:	2400051a 	.word	0x2400051a
 8006d5c:	0800bd50 	.word	0x0800bd50
 8006d60:	24000658 	.word	0x24000658
 8006d64:	240004c4 	.word	0x240004c4

08006d68 <MX_GPIO_Init>:
     PC14-OSC32_IN (OSC32_IN)   ------> RCC_OSC32_IN
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
*/
void MX_GPIO_Init(void)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b08a      	sub	sp, #40	@ 0x28
 8006d6c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d6e:	f107 0314 	add.w	r3, r7, #20
 8006d72:	2200      	movs	r2, #0
 8006d74:	601a      	str	r2, [r3, #0]
 8006d76:	605a      	str	r2, [r3, #4]
 8006d78:	609a      	str	r2, [r3, #8]
 8006d7a:	60da      	str	r2, [r3, #12]
 8006d7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d7e:	4b5a      	ldr	r3, [pc, #360]	@ (8006ee8 <MX_GPIO_Init+0x180>)
 8006d80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006d84:	4a58      	ldr	r2, [pc, #352]	@ (8006ee8 <MX_GPIO_Init+0x180>)
 8006d86:	f043 0304 	orr.w	r3, r3, #4
 8006d8a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006d8e:	4b56      	ldr	r3, [pc, #344]	@ (8006ee8 <MX_GPIO_Init+0x180>)
 8006d90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006d94:	f003 0304 	and.w	r3, r3, #4
 8006d98:	613b      	str	r3, [r7, #16]
 8006d9a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006d9c:	4b52      	ldr	r3, [pc, #328]	@ (8006ee8 <MX_GPIO_Init+0x180>)
 8006d9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006da2:	4a51      	ldr	r2, [pc, #324]	@ (8006ee8 <MX_GPIO_Init+0x180>)
 8006da4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006da8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006dac:	4b4e      	ldr	r3, [pc, #312]	@ (8006ee8 <MX_GPIO_Init+0x180>)
 8006dae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006db2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006db6:	60fb      	str	r3, [r7, #12]
 8006db8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006dba:	4b4b      	ldr	r3, [pc, #300]	@ (8006ee8 <MX_GPIO_Init+0x180>)
 8006dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006dc0:	4a49      	ldr	r2, [pc, #292]	@ (8006ee8 <MX_GPIO_Init+0x180>)
 8006dc2:	f043 0301 	orr.w	r3, r3, #1
 8006dc6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006dca:	4b47      	ldr	r3, [pc, #284]	@ (8006ee8 <MX_GPIO_Init+0x180>)
 8006dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006dd0:	f003 0301 	and.w	r3, r3, #1
 8006dd4:	60bb      	str	r3, [r7, #8]
 8006dd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006dd8:	4b43      	ldr	r3, [pc, #268]	@ (8006ee8 <MX_GPIO_Init+0x180>)
 8006dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006dde:	4a42      	ldr	r2, [pc, #264]	@ (8006ee8 <MX_GPIO_Init+0x180>)
 8006de0:	f043 0302 	orr.w	r3, r3, #2
 8006de4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006de8:	4b3f      	ldr	r3, [pc, #252]	@ (8006ee8 <MX_GPIO_Init+0x180>)
 8006dea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006dee:	f003 0302 	and.w	r3, r3, #2
 8006df2:	607b      	str	r3, [r7, #4]
 8006df4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006df6:	4b3c      	ldr	r3, [pc, #240]	@ (8006ee8 <MX_GPIO_Init+0x180>)
 8006df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006dfc:	4a3a      	ldr	r2, [pc, #232]	@ (8006ee8 <MX_GPIO_Init+0x180>)
 8006dfe:	f043 0310 	orr.w	r3, r3, #16
 8006e02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006e06:	4b38      	ldr	r3, [pc, #224]	@ (8006ee8 <MX_GPIO_Init+0x180>)
 8006e08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e0c:	f003 0310 	and.w	r3, r3, #16
 8006e10:	603b      	str	r3, [r7, #0]
 8006e12:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESC_SPI_CS_GPIO_Port, ESC_SPI_CS_Pin, GPIO_PIN_RESET);
 8006e14:	2200      	movs	r2, #0
 8006e16:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006e1a:	4834      	ldr	r0, [pc, #208]	@ (8006eec <MX_GPIO_Init+0x184>)
 8006e1c:	f001 f820 	bl	8007e60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BLINK_GPIO_Port, LED_BLINK_Pin, GPIO_PIN_RESET);
 8006e20:	2200      	movs	r2, #0
 8006e22:	2102      	movs	r1, #2
 8006e24:	4832      	ldr	r0, [pc, #200]	@ (8006ef0 <MX_GPIO_Init+0x188>)
 8006e26:	f001 f81b 	bl	8007e60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ESC_SYNC_L1_Pin ESC_SPI_SINT_Pin */
  GPIO_InitStruct.Pin = ESC_SYNC_L1_Pin|ESC_SPI_SINT_Pin;
 8006e2a:	2318      	movs	r3, #24
 8006e2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006e2e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8006e32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006e34:	2301      	movs	r3, #1
 8006e36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e38:	f107 0314 	add.w	r3, r7, #20
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	482d      	ldr	r0, [pc, #180]	@ (8006ef4 <MX_GPIO_Init+0x18c>)
 8006e40:	f000 fe46 	bl	8007ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESC_EEP_DONE_Pin */
  GPIO_InitStruct.Pin = ESC_EEP_DONE_Pin;
 8006e44:	2302      	movs	r3, #2
 8006e46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006e4c:	2302      	movs	r3, #2
 8006e4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ESC_EEP_DONE_GPIO_Port, &GPIO_InitStruct);
 8006e50:	f107 0314 	add.w	r3, r7, #20
 8006e54:	4619      	mov	r1, r3
 8006e56:	4828      	ldr	r0, [pc, #160]	@ (8006ef8 <MX_GPIO_Init+0x190>)
 8006e58:	f000 fe3a 	bl	8007ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESC_SYNC_L0_Pin */
  GPIO_InitStruct.Pin = ESC_SYNC_L0_Pin;
 8006e5c:	2304      	movs	r3, #4
 8006e5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006e60:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8006e64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006e66:	2301      	movs	r3, #1
 8006e68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ESC_SYNC_L0_GPIO_Port, &GPIO_InitStruct);
 8006e6a:	f107 0314 	add.w	r3, r7, #20
 8006e6e:	4619      	mov	r1, r3
 8006e70:	4821      	ldr	r0, [pc, #132]	@ (8006ef8 <MX_GPIO_Init+0x190>)
 8006e72:	f000 fe2d 	bl	8007ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESC_SPI_CS_Pin */
  GPIO_InitStruct.Pin = ESC_SPI_CS_Pin;
 8006e76:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006e7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006e80:	2302      	movs	r3, #2
 8006e82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e84:	2303      	movs	r3, #3
 8006e86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ESC_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8006e88:	f107 0314 	add.w	r3, r7, #20
 8006e8c:	4619      	mov	r1, r3
 8006e8e:	4817      	ldr	r0, [pc, #92]	@ (8006eec <MX_GPIO_Init+0x184>)
 8006e90:	f000 fe1e 	bl	8007ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BLINK_Pin */
  GPIO_InitStruct.Pin = LED_BLINK_Pin;
 8006e94:	2302      	movs	r3, #2
 8006e96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006e9c:	2302      	movs	r3, #2
 8006e9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_BLINK_GPIO_Port, &GPIO_InitStruct);
 8006ea4:	f107 0314 	add.w	r3, r7, #20
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	4811      	ldr	r0, [pc, #68]	@ (8006ef0 <MX_GPIO_Init+0x188>)
 8006eac:	f000 fe10 	bl	8007ad0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	2100      	movs	r1, #0
 8006eb4:	2008      	movs	r0, #8
 8006eb6:	f000 fd5e 	bl	8007976 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8006eba:	2008      	movs	r0, #8
 8006ebc:	f000 fd75 	bl	80079aa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	2100      	movs	r1, #0
 8006ec4:	2009      	movs	r0, #9
 8006ec6:	f000 fd56 	bl	8007976 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8006eca:	2009      	movs	r0, #9
 8006ecc:	f000 fd6d 	bl	80079aa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	2100      	movs	r1, #0
 8006ed4:	200a      	movs	r0, #10
 8006ed6:	f000 fd4e 	bl	8007976 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8006eda:	200a      	movs	r0, #10
 8006edc:	f000 fd65 	bl	80079aa <HAL_NVIC_EnableIRQ>

}
 8006ee0:	bf00      	nop
 8006ee2:	3728      	adds	r7, #40	@ 0x28
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}
 8006ee8:	58024400 	.word	0x58024400
 8006eec:	58020800 	.word	0x58020800
 8006ef0:	58021000 	.word	0x58021000
 8006ef4:	58020000 	.word	0x58020000
 8006ef8:	58020400 	.word	0x58020400

08006efc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8006f00:	f000 f894 	bl	800702c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006f04:	f000 fb9a 	bl	800763c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006f08:	f000 f816 	bl	8006f38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006f0c:	f7ff ff2c 	bl	8006d68 <MX_GPIO_Init>
  MX_TIM6_Init();
 8006f10:	f000 facc 	bl	80074ac <MX_TIM6_Init>
  MX_TIM16_Init();
 8006f14:	f000 fb00 	bl	8007518 <MX_TIM16_Init>
  MX_SPI3_Init();
 8006f18:	f000 f8ba 	bl	8007090 <MX_SPI3_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Get the timer period
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 8006f1c:	2102      	movs	r1, #2
 8006f1e:	4805      	ldr	r0, [pc, #20]	@ (8006f34 <main+0x38>)
 8006f20:	f000 ffb7 	bl	8007e92 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8006f24:	2064      	movs	r0, #100	@ 0x64
 8006f26:	f000 fc1b 	bl	8007760 <HAL_Delay>
	  main_initial();
 8006f2a:	f7f9 fb41 	bl	80005b0 <main_initial>
  {
 8006f2e:	bf00      	nop
 8006f30:	e7f4      	b.n	8006f1c <main+0x20>
 8006f32:	bf00      	nop
 8006f34:	58021000 	.word	0x58021000

08006f38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b09c      	sub	sp, #112	@ 0x70
 8006f3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006f3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f42:	224c      	movs	r2, #76	@ 0x4c
 8006f44:	2100      	movs	r1, #0
 8006f46:	4618      	mov	r0, r3
 8006f48:	f004 fb62 	bl	800b610 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006f4c:	1d3b      	adds	r3, r7, #4
 8006f4e:	2220      	movs	r2, #32
 8006f50:	2100      	movs	r1, #0
 8006f52:	4618      	mov	r0, r3
 8006f54:	f004 fb5c 	bl	800b610 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8006f58:	2002      	movs	r0, #2
 8006f5a:	f000 ffb5 	bl	8007ec8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006f5e:	2300      	movs	r3, #0
 8006f60:	603b      	str	r3, [r7, #0]
 8006f62:	4b30      	ldr	r3, [pc, #192]	@ (8007024 <SystemClock_Config+0xec>)
 8006f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f66:	4a2f      	ldr	r2, [pc, #188]	@ (8007024 <SystemClock_Config+0xec>)
 8006f68:	f023 0301 	bic.w	r3, r3, #1
 8006f6c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006f6e:	4b2d      	ldr	r3, [pc, #180]	@ (8007024 <SystemClock_Config+0xec>)
 8006f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f72:	f003 0301 	and.w	r3, r3, #1
 8006f76:	603b      	str	r3, [r7, #0]
 8006f78:	4b2b      	ldr	r3, [pc, #172]	@ (8007028 <SystemClock_Config+0xf0>)
 8006f7a:	699b      	ldr	r3, [r3, #24]
 8006f7c:	4a2a      	ldr	r2, [pc, #168]	@ (8007028 <SystemClock_Config+0xf0>)
 8006f7e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006f82:	6193      	str	r3, [r2, #24]
 8006f84:	4b28      	ldr	r3, [pc, #160]	@ (8007028 <SystemClock_Config+0xf0>)
 8006f86:	699b      	ldr	r3, [r3, #24]
 8006f88:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006f8c:	603b      	str	r3, [r7, #0]
 8006f8e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8006f90:	bf00      	nop
 8006f92:	4b25      	ldr	r3, [pc, #148]	@ (8007028 <SystemClock_Config+0xf0>)
 8006f94:	699b      	ldr	r3, [r3, #24]
 8006f96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006f9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f9e:	d1f8      	bne.n	8006f92 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006fa0:	2302      	movs	r3, #2
 8006fa2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006fa8:	2340      	movs	r3, #64	@ 0x40
 8006faa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006fac:	2302      	movs	r3, #2
 8006fae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 32;
 8006fb4:	2320      	movs	r3, #32
 8006fb6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 129;
 8006fb8:	2381      	movs	r3, #129	@ 0x81
 8006fba:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8006fbc:	2302      	movs	r3, #2
 8006fbe:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8006fc0:	2302      	movs	r3, #2
 8006fc2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8006fc4:	2302      	movs	r3, #2
 8006fc6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8006fc8:	2304      	movs	r3, #4
 8006fca:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006fd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f000 ffaf 	bl	8007f3c <HAL_RCC_OscConfig>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d001      	beq.n	8006fe8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8006fe4:	f000 f84e 	bl	8007084 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006fe8:	233f      	movs	r3, #63	@ 0x3f
 8006fea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8006fec:	2300      	movs	r3, #0
 8006fee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8007000:	2300      	movs	r3, #0
 8007002:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8007004:	2300      	movs	r3, #0
 8007006:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8007008:	1d3b      	adds	r3, r7, #4
 800700a:	2100      	movs	r1, #0
 800700c:	4618      	mov	r0, r3
 800700e:	f001 fbef 	bl	80087f0 <HAL_RCC_ClockConfig>
 8007012:	4603      	mov	r3, r0
 8007014:	2b00      	cmp	r3, #0
 8007016:	d001      	beq.n	800701c <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8007018:	f000 f834 	bl	8007084 <Error_Handler>
  }
}
 800701c:	bf00      	nop
 800701e:	3770      	adds	r7, #112	@ 0x70
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}
 8007024:	58000400 	.word	0x58000400
 8007028:	58024800 	.word	0x58024800

0800702c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b084      	sub	sp, #16
 8007030:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8007032:	463b      	mov	r3, r7
 8007034:	2200      	movs	r2, #0
 8007036:	601a      	str	r2, [r3, #0]
 8007038:	605a      	str	r2, [r3, #4]
 800703a:	609a      	str	r2, [r3, #8]
 800703c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800703e:	f000 fccf 	bl	80079e0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8007042:	2301      	movs	r3, #1
 8007044:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8007046:	2300      	movs	r3, #0
 8007048:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800704a:	2300      	movs	r3, #0
 800704c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800704e:	231f      	movs	r3, #31
 8007050:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8007052:	2387      	movs	r3, #135	@ 0x87
 8007054:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8007056:	2300      	movs	r3, #0
 8007058:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800705a:	2300      	movs	r3, #0
 800705c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800705e:	2301      	movs	r3, #1
 8007060:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8007062:	2301      	movs	r3, #1
 8007064:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8007066:	2300      	movs	r3, #0
 8007068:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800706a:	2300      	movs	r3, #0
 800706c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800706e:	463b      	mov	r3, r7
 8007070:	4618      	mov	r0, r3
 8007072:	f000 fced 	bl	8007a50 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8007076:	2004      	movs	r0, #4
 8007078:	f000 fcca 	bl	8007a10 <HAL_MPU_Enable>

}
 800707c:	bf00      	nop
 800707e:	3710      	adds	r7, #16
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007084:	b480      	push	{r7}
 8007086:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007088:	b672      	cpsid	i
}
 800708a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800708c:	bf00      	nop
 800708e:	e7fd      	b.n	800708c <Error_Handler+0x8>

08007090 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8007094:	4b28      	ldr	r3, [pc, #160]	@ (8007138 <MX_SPI3_Init+0xa8>)
 8007096:	4a29      	ldr	r2, [pc, #164]	@ (800713c <MX_SPI3_Init+0xac>)
 8007098:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800709a:	4b27      	ldr	r3, [pc, #156]	@ (8007138 <MX_SPI3_Init+0xa8>)
 800709c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80070a0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80070a2:	4b25      	ldr	r3, [pc, #148]	@ (8007138 <MX_SPI3_Init+0xa8>)
 80070a4:	2200      	movs	r2, #0
 80070a6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80070a8:	4b23      	ldr	r3, [pc, #140]	@ (8007138 <MX_SPI3_Init+0xa8>)
 80070aa:	2207      	movs	r2, #7
 80070ac:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80070ae:	4b22      	ldr	r3, [pc, #136]	@ (8007138 <MX_SPI3_Init+0xa8>)
 80070b0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80070b4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80070b6:	4b20      	ldr	r3, [pc, #128]	@ (8007138 <MX_SPI3_Init+0xa8>)
 80070b8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80070bc:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80070be:	4b1e      	ldr	r3, [pc, #120]	@ (8007138 <MX_SPI3_Init+0xa8>)
 80070c0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80070c4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80070c6:	4b1c      	ldr	r3, [pc, #112]	@ (8007138 <MX_SPI3_Init+0xa8>)
 80070c8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80070cc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80070ce:	4b1a      	ldr	r3, [pc, #104]	@ (8007138 <MX_SPI3_Init+0xa8>)
 80070d0:	2200      	movs	r2, #0
 80070d2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80070d4:	4b18      	ldr	r3, [pc, #96]	@ (8007138 <MX_SPI3_Init+0xa8>)
 80070d6:	2200      	movs	r2, #0
 80070d8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80070da:	4b17      	ldr	r3, [pc, #92]	@ (8007138 <MX_SPI3_Init+0xa8>)
 80070dc:	2200      	movs	r2, #0
 80070de:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80070e0:	4b15      	ldr	r3, [pc, #84]	@ (8007138 <MX_SPI3_Init+0xa8>)
 80070e2:	2200      	movs	r2, #0
 80070e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80070e6:	4b14      	ldr	r3, [pc, #80]	@ (8007138 <MX_SPI3_Init+0xa8>)
 80070e8:	2200      	movs	r2, #0
 80070ea:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80070ec:	4b12      	ldr	r3, [pc, #72]	@ (8007138 <MX_SPI3_Init+0xa8>)
 80070ee:	2200      	movs	r2, #0
 80070f0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_04DATA;
 80070f2:	4b11      	ldr	r3, [pc, #68]	@ (8007138 <MX_SPI3_Init+0xa8>)
 80070f4:	2260      	movs	r2, #96	@ 0x60
 80070f6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80070f8:	4b0f      	ldr	r3, [pc, #60]	@ (8007138 <MX_SPI3_Init+0xa8>)
 80070fa:	2200      	movs	r2, #0
 80070fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80070fe:	4b0e      	ldr	r3, [pc, #56]	@ (8007138 <MX_SPI3_Init+0xa8>)
 8007100:	2200      	movs	r2, #0
 8007102:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8007104:	4b0c      	ldr	r3, [pc, #48]	@ (8007138 <MX_SPI3_Init+0xa8>)
 8007106:	2200      	movs	r2, #0
 8007108:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800710a:	4b0b      	ldr	r3, [pc, #44]	@ (8007138 <MX_SPI3_Init+0xa8>)
 800710c:	2200      	movs	r2, #0
 800710e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8007110:	4b09      	ldr	r3, [pc, #36]	@ (8007138 <MX_SPI3_Init+0xa8>)
 8007112:	2200      	movs	r2, #0
 8007114:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8007116:	4b08      	ldr	r3, [pc, #32]	@ (8007138 <MX_SPI3_Init+0xa8>)
 8007118:	2200      	movs	r2, #0
 800711a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800711c:	4b06      	ldr	r3, [pc, #24]	@ (8007138 <MX_SPI3_Init+0xa8>)
 800711e:	2200      	movs	r2, #0
 8007120:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8007122:	4805      	ldr	r0, [pc, #20]	@ (8007138 <MX_SPI3_Init+0xa8>)
 8007124:	f003 fa02 	bl	800a52c <HAL_SPI_Init>
 8007128:	4603      	mov	r3, r0
 800712a:	2b00      	cmp	r3, #0
 800712c:	d001      	beq.n	8007132 <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 800712e:	f7ff ffa9 	bl	8007084 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8007132:	bf00      	nop
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	2400067c 	.word	0x2400067c
 800713c:	40003c00 	.word	0x40003c00

08007140 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b0ba      	sub	sp, #232	@ 0xe8
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007148:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800714c:	2200      	movs	r2, #0
 800714e:	601a      	str	r2, [r3, #0]
 8007150:	605a      	str	r2, [r3, #4]
 8007152:	609a      	str	r2, [r3, #8]
 8007154:	60da      	str	r2, [r3, #12]
 8007156:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007158:	f107 0310 	add.w	r3, r7, #16
 800715c:	22c0      	movs	r2, #192	@ 0xc0
 800715e:	2100      	movs	r1, #0
 8007160:	4618      	mov	r0, r3
 8007162:	f004 fa55 	bl	800b610 <memset>
  if(spiHandle->Instance==SPI3)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a31      	ldr	r2, [pc, #196]	@ (8007230 <HAL_SPI_MspInit+0xf0>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d15b      	bne.n	8007228 <HAL_SPI_MspInit+0xe8>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8007170:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007174:	f04f 0300 	mov.w	r3, #0
 8007178:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800717c:	2300      	movs	r3, #0
 800717e:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007180:	f107 0310 	add.w	r3, r7, #16
 8007184:	4618      	mov	r0, r3
 8007186:	f001 fe63 	bl	8008e50 <HAL_RCCEx_PeriphCLKConfig>
 800718a:	4603      	mov	r3, r0
 800718c:	2b00      	cmp	r3, #0
 800718e:	d001      	beq.n	8007194 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8007190:	f7ff ff78 	bl	8007084 <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8007194:	4b27      	ldr	r3, [pc, #156]	@ (8007234 <HAL_SPI_MspInit+0xf4>)
 8007196:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800719a:	4a26      	ldr	r2, [pc, #152]	@ (8007234 <HAL_SPI_MspInit+0xf4>)
 800719c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071a0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80071a4:	4b23      	ldr	r3, [pc, #140]	@ (8007234 <HAL_SPI_MspInit+0xf4>)
 80071a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80071aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80071ae:	60fb      	str	r3, [r7, #12]
 80071b0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80071b2:	4b20      	ldr	r3, [pc, #128]	@ (8007234 <HAL_SPI_MspInit+0xf4>)
 80071b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80071b8:	4a1e      	ldr	r2, [pc, #120]	@ (8007234 <HAL_SPI_MspInit+0xf4>)
 80071ba:	f043 0304 	orr.w	r3, r3, #4
 80071be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80071c2:	4b1c      	ldr	r3, [pc, #112]	@ (8007234 <HAL_SPI_MspInit+0xf4>)
 80071c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80071c8:	f003 0304 	and.w	r3, r3, #4
 80071cc:	60bb      	str	r3, [r7, #8]
 80071ce:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = ESC_SPI_SCK_Pin|ESC_SPI_MOSI_Pin;
 80071d0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80071d4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071d8:	2302      	movs	r3, #2
 80071da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80071de:	2301      	movs	r3, #1
 80071e0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071e4:	2303      	movs	r3, #3
 80071e6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80071ea:	2306      	movs	r3, #6
 80071ec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80071f0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80071f4:	4619      	mov	r1, r3
 80071f6:	4810      	ldr	r0, [pc, #64]	@ (8007238 <HAL_SPI_MspInit+0xf8>)
 80071f8:	f000 fc6a 	bl	8007ad0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ESC_SPI_MISO_Pin;
 80071fc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007200:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007204:	2302      	movs	r3, #2
 8007206:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800720a:	2300      	movs	r3, #0
 800720c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007210:	2303      	movs	r3, #3
 8007212:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007216:	2306      	movs	r3, #6
 8007218:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(ESC_SPI_MISO_GPIO_Port, &GPIO_InitStruct);
 800721c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8007220:	4619      	mov	r1, r3
 8007222:	4805      	ldr	r0, [pc, #20]	@ (8007238 <HAL_SPI_MspInit+0xf8>)
 8007224:	f000 fc54 	bl	8007ad0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8007228:	bf00      	nop
 800722a:	37e8      	adds	r7, #232	@ 0xe8
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}
 8007230:	40003c00 	.word	0x40003c00
 8007234:	58024400 	.word	0x58024400
 8007238:	58020800 	.word	0x58020800

0800723c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007242:	4b0a      	ldr	r3, [pc, #40]	@ (800726c <HAL_MspInit+0x30>)
 8007244:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007248:	4a08      	ldr	r2, [pc, #32]	@ (800726c <HAL_MspInit+0x30>)
 800724a:	f043 0302 	orr.w	r3, r3, #2
 800724e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007252:	4b06      	ldr	r3, [pc, #24]	@ (800726c <HAL_MspInit+0x30>)
 8007254:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007258:	f003 0302 	and.w	r3, r3, #2
 800725c:	607b      	str	r3, [r7, #4]
 800725e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007260:	bf00      	nop
 8007262:	370c      	adds	r7, #12
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr
 800726c:	58024400 	.word	0x58024400

08007270 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007270:	b480      	push	{r7}
 8007272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007274:	bf00      	nop
 8007276:	e7fd      	b.n	8007274 <NMI_Handler+0x4>

08007278 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007278:	b480      	push	{r7}
 800727a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800727c:	bf00      	nop
 800727e:	e7fd      	b.n	800727c <HardFault_Handler+0x4>

08007280 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007280:	b480      	push	{r7}
 8007282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007284:	bf00      	nop
 8007286:	e7fd      	b.n	8007284 <MemManage_Handler+0x4>

08007288 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007288:	b480      	push	{r7}
 800728a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800728c:	bf00      	nop
 800728e:	e7fd      	b.n	800728c <BusFault_Handler+0x4>

08007290 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007290:	b480      	push	{r7}
 8007292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007294:	bf00      	nop
 8007296:	e7fd      	b.n	8007294 <UsageFault_Handler+0x4>

08007298 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007298:	b480      	push	{r7}
 800729a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800729c:	bf00      	nop
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr

080072a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80072a6:	b480      	push	{r7}
 80072a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80072aa:	bf00      	nop
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr

080072b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80072b4:	b480      	push	{r7}
 80072b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80072b8:	bf00      	nop
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr

080072c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80072c2:	b580      	push	{r7, lr}
 80072c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80072c6:	f000 fa2b 	bl	8007720 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80072ca:	bf00      	nop
 80072cc:	bd80      	pop	{r7, pc}
	...

080072d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b086      	sub	sp, #24
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80072d8:	4a14      	ldr	r2, [pc, #80]	@ (800732c <_sbrk+0x5c>)
 80072da:	4b15      	ldr	r3, [pc, #84]	@ (8007330 <_sbrk+0x60>)
 80072dc:	1ad3      	subs	r3, r2, r3
 80072de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80072e4:	4b13      	ldr	r3, [pc, #76]	@ (8007334 <_sbrk+0x64>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d102      	bne.n	80072f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80072ec:	4b11      	ldr	r3, [pc, #68]	@ (8007334 <_sbrk+0x64>)
 80072ee:	4a12      	ldr	r2, [pc, #72]	@ (8007338 <_sbrk+0x68>)
 80072f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80072f2:	4b10      	ldr	r3, [pc, #64]	@ (8007334 <_sbrk+0x64>)
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	4413      	add	r3, r2
 80072fa:	693a      	ldr	r2, [r7, #16]
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d207      	bcs.n	8007310 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007300:	f004 f99e 	bl	800b640 <__errno>
 8007304:	4603      	mov	r3, r0
 8007306:	220c      	movs	r2, #12
 8007308:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800730a:	f04f 33ff 	mov.w	r3, #4294967295
 800730e:	e009      	b.n	8007324 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007310:	4b08      	ldr	r3, [pc, #32]	@ (8007334 <_sbrk+0x64>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007316:	4b07      	ldr	r3, [pc, #28]	@ (8007334 <_sbrk+0x64>)
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	4413      	add	r3, r2
 800731e:	4a05      	ldr	r2, [pc, #20]	@ (8007334 <_sbrk+0x64>)
 8007320:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007322:	68fb      	ldr	r3, [r7, #12]
}
 8007324:	4618      	mov	r0, r3
 8007326:	3718      	adds	r7, #24
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}
 800732c:	24080000 	.word	0x24080000
 8007330:	00000400 	.word	0x00000400
 8007334:	24000704 	.word	0x24000704
 8007338:	240008f0 	.word	0x240008f0

0800733c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800733c:	b480      	push	{r7}
 800733e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007340:	4b43      	ldr	r3, [pc, #268]	@ (8007450 <SystemInit+0x114>)
 8007342:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007346:	4a42      	ldr	r2, [pc, #264]	@ (8007450 <SystemInit+0x114>)
 8007348:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800734c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8007350:	4b40      	ldr	r3, [pc, #256]	@ (8007454 <SystemInit+0x118>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f003 030f 	and.w	r3, r3, #15
 8007358:	2b06      	cmp	r3, #6
 800735a:	d807      	bhi.n	800736c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800735c:	4b3d      	ldr	r3, [pc, #244]	@ (8007454 <SystemInit+0x118>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f023 030f 	bic.w	r3, r3, #15
 8007364:	4a3b      	ldr	r2, [pc, #236]	@ (8007454 <SystemInit+0x118>)
 8007366:	f043 0307 	orr.w	r3, r3, #7
 800736a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800736c:	4b3a      	ldr	r3, [pc, #232]	@ (8007458 <SystemInit+0x11c>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a39      	ldr	r2, [pc, #228]	@ (8007458 <SystemInit+0x11c>)
 8007372:	f043 0301 	orr.w	r3, r3, #1
 8007376:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007378:	4b37      	ldr	r3, [pc, #220]	@ (8007458 <SystemInit+0x11c>)
 800737a:	2200      	movs	r2, #0
 800737c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800737e:	4b36      	ldr	r3, [pc, #216]	@ (8007458 <SystemInit+0x11c>)
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	4935      	ldr	r1, [pc, #212]	@ (8007458 <SystemInit+0x11c>)
 8007384:	4b35      	ldr	r3, [pc, #212]	@ (800745c <SystemInit+0x120>)
 8007386:	4013      	ands	r3, r2
 8007388:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800738a:	4b32      	ldr	r3, [pc, #200]	@ (8007454 <SystemInit+0x118>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f003 0308 	and.w	r3, r3, #8
 8007392:	2b00      	cmp	r3, #0
 8007394:	d007      	beq.n	80073a6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8007396:	4b2f      	ldr	r3, [pc, #188]	@ (8007454 <SystemInit+0x118>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f023 030f 	bic.w	r3, r3, #15
 800739e:	4a2d      	ldr	r2, [pc, #180]	@ (8007454 <SystemInit+0x118>)
 80073a0:	f043 0307 	orr.w	r3, r3, #7
 80073a4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80073a6:	4b2c      	ldr	r3, [pc, #176]	@ (8007458 <SystemInit+0x11c>)
 80073a8:	2200      	movs	r2, #0
 80073aa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80073ac:	4b2a      	ldr	r3, [pc, #168]	@ (8007458 <SystemInit+0x11c>)
 80073ae:	2200      	movs	r2, #0
 80073b0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80073b2:	4b29      	ldr	r3, [pc, #164]	@ (8007458 <SystemInit+0x11c>)
 80073b4:	2200      	movs	r2, #0
 80073b6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80073b8:	4b27      	ldr	r3, [pc, #156]	@ (8007458 <SystemInit+0x11c>)
 80073ba:	4a29      	ldr	r2, [pc, #164]	@ (8007460 <SystemInit+0x124>)
 80073bc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80073be:	4b26      	ldr	r3, [pc, #152]	@ (8007458 <SystemInit+0x11c>)
 80073c0:	4a28      	ldr	r2, [pc, #160]	@ (8007464 <SystemInit+0x128>)
 80073c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80073c4:	4b24      	ldr	r3, [pc, #144]	@ (8007458 <SystemInit+0x11c>)
 80073c6:	4a28      	ldr	r2, [pc, #160]	@ (8007468 <SystemInit+0x12c>)
 80073c8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80073ca:	4b23      	ldr	r3, [pc, #140]	@ (8007458 <SystemInit+0x11c>)
 80073cc:	2200      	movs	r2, #0
 80073ce:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80073d0:	4b21      	ldr	r3, [pc, #132]	@ (8007458 <SystemInit+0x11c>)
 80073d2:	4a25      	ldr	r2, [pc, #148]	@ (8007468 <SystemInit+0x12c>)
 80073d4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80073d6:	4b20      	ldr	r3, [pc, #128]	@ (8007458 <SystemInit+0x11c>)
 80073d8:	2200      	movs	r2, #0
 80073da:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80073dc:	4b1e      	ldr	r3, [pc, #120]	@ (8007458 <SystemInit+0x11c>)
 80073de:	4a22      	ldr	r2, [pc, #136]	@ (8007468 <SystemInit+0x12c>)
 80073e0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80073e2:	4b1d      	ldr	r3, [pc, #116]	@ (8007458 <SystemInit+0x11c>)
 80073e4:	2200      	movs	r2, #0
 80073e6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80073e8:	4b1b      	ldr	r3, [pc, #108]	@ (8007458 <SystemInit+0x11c>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a1a      	ldr	r2, [pc, #104]	@ (8007458 <SystemInit+0x11c>)
 80073ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80073f2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80073f4:	4b18      	ldr	r3, [pc, #96]	@ (8007458 <SystemInit+0x11c>)
 80073f6:	2200      	movs	r2, #0
 80073f8:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80073fa:	4b1c      	ldr	r3, [pc, #112]	@ (800746c <SystemInit+0x130>)
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	4b1c      	ldr	r3, [pc, #112]	@ (8007470 <SystemInit+0x134>)
 8007400:	4013      	ands	r3, r2
 8007402:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007406:	d202      	bcs.n	800740e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8007408:	4b1a      	ldr	r3, [pc, #104]	@ (8007474 <SystemInit+0x138>)
 800740a:	2201      	movs	r2, #1
 800740c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800740e:	4b12      	ldr	r3, [pc, #72]	@ (8007458 <SystemInit+0x11c>)
 8007410:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8007414:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007418:	2b00      	cmp	r3, #0
 800741a:	d113      	bne.n	8007444 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800741c:	4b0e      	ldr	r3, [pc, #56]	@ (8007458 <SystemInit+0x11c>)
 800741e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8007422:	4a0d      	ldr	r2, [pc, #52]	@ (8007458 <SystemInit+0x11c>)
 8007424:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007428:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800742c:	4b12      	ldr	r3, [pc, #72]	@ (8007478 <SystemInit+0x13c>)
 800742e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8007432:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8007434:	4b08      	ldr	r3, [pc, #32]	@ (8007458 <SystemInit+0x11c>)
 8007436:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800743a:	4a07      	ldr	r2, [pc, #28]	@ (8007458 <SystemInit+0x11c>)
 800743c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007440:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8007444:	bf00      	nop
 8007446:	46bd      	mov	sp, r7
 8007448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744c:	4770      	bx	lr
 800744e:	bf00      	nop
 8007450:	e000ed00 	.word	0xe000ed00
 8007454:	52002000 	.word	0x52002000
 8007458:	58024400 	.word	0x58024400
 800745c:	eaf6ed7f 	.word	0xeaf6ed7f
 8007460:	02020200 	.word	0x02020200
 8007464:	01ff0000 	.word	0x01ff0000
 8007468:	01010280 	.word	0x01010280
 800746c:	5c001000 	.word	0x5c001000
 8007470:	ffff0000 	.word	0xffff0000
 8007474:	51008108 	.word	0x51008108
 8007478:	52004000 	.word	0x52004000

0800747c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 800747c:	b480      	push	{r7}
 800747e:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8007480:	4b09      	ldr	r3, [pc, #36]	@ (80074a8 <ExitRun0Mode+0x2c>)
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	4a08      	ldr	r2, [pc, #32]	@ (80074a8 <ExitRun0Mode+0x2c>)
 8007486:	f043 0302 	orr.w	r3, r3, #2
 800748a:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 800748c:	bf00      	nop
 800748e:	4b06      	ldr	r3, [pc, #24]	@ (80074a8 <ExitRun0Mode+0x2c>)
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007496:	2b00      	cmp	r3, #0
 8007498:	d0f9      	beq.n	800748e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800749a:	bf00      	nop
 800749c:	bf00      	nop
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr
 80074a6:	bf00      	nop
 80074a8:	58024800 	.word	0x58024800

080074ac <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim16;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b084      	sub	sp, #16
 80074b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80074b2:	1d3b      	adds	r3, r7, #4
 80074b4:	2200      	movs	r2, #0
 80074b6:	601a      	str	r2, [r3, #0]
 80074b8:	605a      	str	r2, [r3, #4]
 80074ba:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80074bc:	4b14      	ldr	r3, [pc, #80]	@ (8007510 <MX_TIM6_Init+0x64>)
 80074be:	4a15      	ldr	r2, [pc, #84]	@ (8007514 <MX_TIM6_Init+0x68>)
 80074c0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 128-1;
 80074c2:	4b13      	ldr	r3, [pc, #76]	@ (8007510 <MX_TIM6_Init+0x64>)
 80074c4:	227f      	movs	r2, #127	@ 0x7f
 80074c6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80074c8:	4b11      	ldr	r3, [pc, #68]	@ (8007510 <MX_TIM6_Init+0x64>)
 80074ca:	2200      	movs	r2, #0
 80074cc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80074ce:	4b10      	ldr	r3, [pc, #64]	@ (8007510 <MX_TIM6_Init+0x64>)
 80074d0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80074d4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80074d6:	4b0e      	ldr	r3, [pc, #56]	@ (8007510 <MX_TIM6_Init+0x64>)
 80074d8:	2200      	movs	r2, #0
 80074da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80074dc:	480c      	ldr	r0, [pc, #48]	@ (8007510 <MX_TIM6_Init+0x64>)
 80074de:	f003 fd6c 	bl	800afba <HAL_TIM_Base_Init>
 80074e2:	4603      	mov	r3, r0
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d001      	beq.n	80074ec <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80074e8:	f7ff fdcc 	bl	8007084 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80074ec:	2300      	movs	r3, #0
 80074ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80074f0:	2300      	movs	r3, #0
 80074f2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80074f4:	1d3b      	adds	r3, r7, #4
 80074f6:	4619      	mov	r1, r3
 80074f8:	4805      	ldr	r0, [pc, #20]	@ (8007510 <MX_TIM6_Init+0x64>)
 80074fa:	f003 ff3d 	bl	800b378 <HAL_TIMEx_MasterConfigSynchronization>
 80074fe:	4603      	mov	r3, r0
 8007500:	2b00      	cmp	r3, #0
 8007502:	d001      	beq.n	8007508 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8007504:	f7ff fdbe 	bl	8007084 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8007508:	bf00      	nop
 800750a:	3710      	adds	r7, #16
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}
 8007510:	24000708 	.word	0x24000708
 8007514:	40001000 	.word	0x40001000

08007518 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800751c:	4b0f      	ldr	r3, [pc, #60]	@ (800755c <MX_TIM16_Init+0x44>)
 800751e:	4a10      	ldr	r2, [pc, #64]	@ (8007560 <MX_TIM16_Init+0x48>)
 8007520:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 63;
 8007522:	4b0e      	ldr	r3, [pc, #56]	@ (800755c <MX_TIM16_Init+0x44>)
 8007524:	223f      	movs	r2, #63	@ 0x3f
 8007526:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007528:	4b0c      	ldr	r3, [pc, #48]	@ (800755c <MX_TIM16_Init+0x44>)
 800752a:	2200      	movs	r2, #0
 800752c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 999;
 800752e:	4b0b      	ldr	r3, [pc, #44]	@ (800755c <MX_TIM16_Init+0x44>)
 8007530:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8007534:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007536:	4b09      	ldr	r3, [pc, #36]	@ (800755c <MX_TIM16_Init+0x44>)
 8007538:	2200      	movs	r2, #0
 800753a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800753c:	4b07      	ldr	r3, [pc, #28]	@ (800755c <MX_TIM16_Init+0x44>)
 800753e:	2200      	movs	r2, #0
 8007540:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007542:	4b06      	ldr	r3, [pc, #24]	@ (800755c <MX_TIM16_Init+0x44>)
 8007544:	2200      	movs	r2, #0
 8007546:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8007548:	4804      	ldr	r0, [pc, #16]	@ (800755c <MX_TIM16_Init+0x44>)
 800754a:	f003 fd36 	bl	800afba <HAL_TIM_Base_Init>
 800754e:	4603      	mov	r3, r0
 8007550:	2b00      	cmp	r3, #0
 8007552:	d001      	beq.n	8007558 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8007554:	f7ff fd96 	bl	8007084 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8007558:	bf00      	nop
 800755a:	bd80      	pop	{r7, pc}
 800755c:	24000754 	.word	0x24000754
 8007560:	40014400 	.word	0x40014400

08007564 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b084      	sub	sp, #16
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a19      	ldr	r2, [pc, #100]	@ (80075d8 <HAL_TIM_Base_MspInit+0x74>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d10f      	bne.n	8007596 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8007576:	4b19      	ldr	r3, [pc, #100]	@ (80075dc <HAL_TIM_Base_MspInit+0x78>)
 8007578:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800757c:	4a17      	ldr	r2, [pc, #92]	@ (80075dc <HAL_TIM_Base_MspInit+0x78>)
 800757e:	f043 0310 	orr.w	r3, r3, #16
 8007582:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007586:	4b15      	ldr	r3, [pc, #84]	@ (80075dc <HAL_TIM_Base_MspInit+0x78>)
 8007588:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800758c:	f003 0310 	and.w	r3, r3, #16
 8007590:	60fb      	str	r3, [r7, #12]
 8007592:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8007594:	e01b      	b.n	80075ce <HAL_TIM_Base_MspInit+0x6a>
  else if(tim_baseHandle->Instance==TIM16)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a11      	ldr	r2, [pc, #68]	@ (80075e0 <HAL_TIM_Base_MspInit+0x7c>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d116      	bne.n	80075ce <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80075a0:	4b0e      	ldr	r3, [pc, #56]	@ (80075dc <HAL_TIM_Base_MspInit+0x78>)
 80075a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80075a6:	4a0d      	ldr	r2, [pc, #52]	@ (80075dc <HAL_TIM_Base_MspInit+0x78>)
 80075a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80075ac:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80075b0:	4b0a      	ldr	r3, [pc, #40]	@ (80075dc <HAL_TIM_Base_MspInit+0x78>)
 80075b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80075b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075ba:	60bb      	str	r3, [r7, #8]
 80075bc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80075be:	2200      	movs	r2, #0
 80075c0:	2100      	movs	r1, #0
 80075c2:	2075      	movs	r0, #117	@ 0x75
 80075c4:	f000 f9d7 	bl	8007976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80075c8:	2075      	movs	r0, #117	@ 0x75
 80075ca:	f000 f9ee 	bl	80079aa <HAL_NVIC_EnableIRQ>
}
 80075ce:	bf00      	nop
 80075d0:	3710      	adds	r7, #16
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
 80075d6:	bf00      	nop
 80075d8:	40001000 	.word	0x40001000
 80075dc:	58024400 	.word	0x58024400
 80075e0:	40014400 	.word	0x40014400

080075e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80075e4:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8007620 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80075e8:	f7ff ff48 	bl	800747c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80075ec:	f7ff fea6 	bl	800733c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80075f0:	480c      	ldr	r0, [pc, #48]	@ (8007624 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80075f2:	490d      	ldr	r1, [pc, #52]	@ (8007628 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80075f4:	4a0d      	ldr	r2, [pc, #52]	@ (800762c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80075f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80075f8:	e002      	b.n	8007600 <LoopCopyDataInit>

080075fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80075fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80075fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80075fe:	3304      	adds	r3, #4

08007600 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007600:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007602:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007604:	d3f9      	bcc.n	80075fa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007606:	4a0a      	ldr	r2, [pc, #40]	@ (8007630 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007608:	4c0a      	ldr	r4, [pc, #40]	@ (8007634 <LoopFillZerobss+0x22>)
  movs r3, #0
 800760a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800760c:	e001      	b.n	8007612 <LoopFillZerobss>

0800760e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800760e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007610:	3204      	adds	r2, #4

08007612 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007612:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007614:	d3fb      	bcc.n	800760e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007616:	f004 f819 	bl	800b64c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800761a:	f7ff fc6f 	bl	8006efc <main>
  bx  lr
 800761e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007620:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8007624:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8007628:	2400040c 	.word	0x2400040c
  ldr r2, =_sidata
 800762c:	0800bde8 	.word	0x0800bde8
  ldr r2, =_sbss
 8007630:	24000410 	.word	0x24000410
  ldr r4, =_ebss
 8007634:	240008ec 	.word	0x240008ec

08007638 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007638:	e7fe      	b.n	8007638 <ADC3_IRQHandler>
	...

0800763c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b082      	sub	sp, #8
 8007640:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007642:	2003      	movs	r0, #3
 8007644:	f000 f98c 	bl	8007960 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007648:	f001 fa88 	bl	8008b5c <HAL_RCC_GetSysClockFreq>
 800764c:	4602      	mov	r2, r0
 800764e:	4b15      	ldr	r3, [pc, #84]	@ (80076a4 <HAL_Init+0x68>)
 8007650:	699b      	ldr	r3, [r3, #24]
 8007652:	0a1b      	lsrs	r3, r3, #8
 8007654:	f003 030f 	and.w	r3, r3, #15
 8007658:	4913      	ldr	r1, [pc, #76]	@ (80076a8 <HAL_Init+0x6c>)
 800765a:	5ccb      	ldrb	r3, [r1, r3]
 800765c:	f003 031f 	and.w	r3, r3, #31
 8007660:	fa22 f303 	lsr.w	r3, r2, r3
 8007664:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007666:	4b0f      	ldr	r3, [pc, #60]	@ (80076a4 <HAL_Init+0x68>)
 8007668:	699b      	ldr	r3, [r3, #24]
 800766a:	f003 030f 	and.w	r3, r3, #15
 800766e:	4a0e      	ldr	r2, [pc, #56]	@ (80076a8 <HAL_Init+0x6c>)
 8007670:	5cd3      	ldrb	r3, [r2, r3]
 8007672:	f003 031f 	and.w	r3, r3, #31
 8007676:	687a      	ldr	r2, [r7, #4]
 8007678:	fa22 f303 	lsr.w	r3, r2, r3
 800767c:	4a0b      	ldr	r2, [pc, #44]	@ (80076ac <HAL_Init+0x70>)
 800767e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007680:	4a0b      	ldr	r2, [pc, #44]	@ (80076b0 <HAL_Init+0x74>)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007686:	200f      	movs	r0, #15
 8007688:	f000 f814 	bl	80076b4 <HAL_InitTick>
 800768c:	4603      	mov	r3, r0
 800768e:	2b00      	cmp	r3, #0
 8007690:	d001      	beq.n	8007696 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8007692:	2301      	movs	r3, #1
 8007694:	e002      	b.n	800769c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8007696:	f7ff fdd1 	bl	800723c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800769a:	2300      	movs	r3, #0
}
 800769c:	4618      	mov	r0, r3
 800769e:	3708      	adds	r7, #8
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}
 80076a4:	58024400 	.word	0x58024400
 80076a8:	0800bdc8 	.word	0x0800bdc8
 80076ac:	240003b0 	.word	0x240003b0
 80076b0:	240003ac 	.word	0x240003ac

080076b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b082      	sub	sp, #8
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80076bc:	4b15      	ldr	r3, [pc, #84]	@ (8007714 <HAL_InitTick+0x60>)
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d101      	bne.n	80076c8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80076c4:	2301      	movs	r3, #1
 80076c6:	e021      	b.n	800770c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80076c8:	4b13      	ldr	r3, [pc, #76]	@ (8007718 <HAL_InitTick+0x64>)
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	4b11      	ldr	r3, [pc, #68]	@ (8007714 <HAL_InitTick+0x60>)
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	4619      	mov	r1, r3
 80076d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80076d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80076da:	fbb2 f3f3 	udiv	r3, r2, r3
 80076de:	4618      	mov	r0, r3
 80076e0:	f000 f971 	bl	80079c6 <HAL_SYSTICK_Config>
 80076e4:	4603      	mov	r3, r0
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d001      	beq.n	80076ee <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	e00e      	b.n	800770c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2b0f      	cmp	r3, #15
 80076f2:	d80a      	bhi.n	800770a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80076f4:	2200      	movs	r2, #0
 80076f6:	6879      	ldr	r1, [r7, #4]
 80076f8:	f04f 30ff 	mov.w	r0, #4294967295
 80076fc:	f000 f93b 	bl	8007976 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007700:	4a06      	ldr	r2, [pc, #24]	@ (800771c <HAL_InitTick+0x68>)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007706:	2300      	movs	r3, #0
 8007708:	e000      	b.n	800770c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800770a:	2301      	movs	r3, #1
}
 800770c:	4618      	mov	r0, r3
 800770e:	3708      	adds	r7, #8
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}
 8007714:	240003b8 	.word	0x240003b8
 8007718:	240003ac 	.word	0x240003ac
 800771c:	240003b4 	.word	0x240003b4

08007720 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007720:	b480      	push	{r7}
 8007722:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007724:	4b06      	ldr	r3, [pc, #24]	@ (8007740 <HAL_IncTick+0x20>)
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	461a      	mov	r2, r3
 800772a:	4b06      	ldr	r3, [pc, #24]	@ (8007744 <HAL_IncTick+0x24>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4413      	add	r3, r2
 8007730:	4a04      	ldr	r2, [pc, #16]	@ (8007744 <HAL_IncTick+0x24>)
 8007732:	6013      	str	r3, [r2, #0]
}
 8007734:	bf00      	nop
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr
 800773e:	bf00      	nop
 8007740:	240003b8 	.word	0x240003b8
 8007744:	240007a0 	.word	0x240007a0

08007748 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007748:	b480      	push	{r7}
 800774a:	af00      	add	r7, sp, #0
  return uwTick;
 800774c:	4b03      	ldr	r3, [pc, #12]	@ (800775c <HAL_GetTick+0x14>)
 800774e:	681b      	ldr	r3, [r3, #0]
}
 8007750:	4618      	mov	r0, r3
 8007752:	46bd      	mov	sp, r7
 8007754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007758:	4770      	bx	lr
 800775a:	bf00      	nop
 800775c:	240007a0 	.word	0x240007a0

08007760 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b084      	sub	sp, #16
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007768:	f7ff ffee 	bl	8007748 <HAL_GetTick>
 800776c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007778:	d005      	beq.n	8007786 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800777a:	4b0a      	ldr	r3, [pc, #40]	@ (80077a4 <HAL_Delay+0x44>)
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	461a      	mov	r2, r3
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	4413      	add	r3, r2
 8007784:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007786:	bf00      	nop
 8007788:	f7ff ffde 	bl	8007748 <HAL_GetTick>
 800778c:	4602      	mov	r2, r0
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	1ad3      	subs	r3, r2, r3
 8007792:	68fa      	ldr	r2, [r7, #12]
 8007794:	429a      	cmp	r2, r3
 8007796:	d8f7      	bhi.n	8007788 <HAL_Delay+0x28>
  {
  }
}
 8007798:	bf00      	nop
 800779a:	bf00      	nop
 800779c:	3710      	adds	r7, #16
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
 80077a2:	bf00      	nop
 80077a4:	240003b8 	.word	0x240003b8

080077a8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80077a8:	b480      	push	{r7}
 80077aa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80077ac:	4b03      	ldr	r3, [pc, #12]	@ (80077bc <HAL_GetREVID+0x14>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	0c1b      	lsrs	r3, r3, #16
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr
 80077bc:	5c001000 	.word	0x5c001000

080077c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b085      	sub	sp, #20
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f003 0307 	and.w	r3, r3, #7
 80077ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80077d0:	4b0b      	ldr	r3, [pc, #44]	@ (8007800 <__NVIC_SetPriorityGrouping+0x40>)
 80077d2:	68db      	ldr	r3, [r3, #12]
 80077d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80077d6:	68ba      	ldr	r2, [r7, #8]
 80077d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80077dc:	4013      	ands	r3, r2
 80077de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80077e8:	4b06      	ldr	r3, [pc, #24]	@ (8007804 <__NVIC_SetPriorityGrouping+0x44>)
 80077ea:	4313      	orrs	r3, r2
 80077ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80077ee:	4a04      	ldr	r2, [pc, #16]	@ (8007800 <__NVIC_SetPriorityGrouping+0x40>)
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	60d3      	str	r3, [r2, #12]
}
 80077f4:	bf00      	nop
 80077f6:	3714      	adds	r7, #20
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr
 8007800:	e000ed00 	.word	0xe000ed00
 8007804:	05fa0000 	.word	0x05fa0000

08007808 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007808:	b480      	push	{r7}
 800780a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800780c:	4b04      	ldr	r3, [pc, #16]	@ (8007820 <__NVIC_GetPriorityGrouping+0x18>)
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	0a1b      	lsrs	r3, r3, #8
 8007812:	f003 0307 	and.w	r3, r3, #7
}
 8007816:	4618      	mov	r0, r3
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr
 8007820:	e000ed00 	.word	0xe000ed00

08007824 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007824:	b480      	push	{r7}
 8007826:	b083      	sub	sp, #12
 8007828:	af00      	add	r7, sp, #0
 800782a:	4603      	mov	r3, r0
 800782c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800782e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007832:	2b00      	cmp	r3, #0
 8007834:	db0b      	blt.n	800784e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007836:	88fb      	ldrh	r3, [r7, #6]
 8007838:	f003 021f 	and.w	r2, r3, #31
 800783c:	4907      	ldr	r1, [pc, #28]	@ (800785c <__NVIC_EnableIRQ+0x38>)
 800783e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007842:	095b      	lsrs	r3, r3, #5
 8007844:	2001      	movs	r0, #1
 8007846:	fa00 f202 	lsl.w	r2, r0, r2
 800784a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800784e:	bf00      	nop
 8007850:	370c      	adds	r7, #12
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr
 800785a:	bf00      	nop
 800785c:	e000e100 	.word	0xe000e100

08007860 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007860:	b480      	push	{r7}
 8007862:	b083      	sub	sp, #12
 8007864:	af00      	add	r7, sp, #0
 8007866:	4603      	mov	r3, r0
 8007868:	6039      	str	r1, [r7, #0]
 800786a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800786c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007870:	2b00      	cmp	r3, #0
 8007872:	db0a      	blt.n	800788a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	b2da      	uxtb	r2, r3
 8007878:	490c      	ldr	r1, [pc, #48]	@ (80078ac <__NVIC_SetPriority+0x4c>)
 800787a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800787e:	0112      	lsls	r2, r2, #4
 8007880:	b2d2      	uxtb	r2, r2
 8007882:	440b      	add	r3, r1
 8007884:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007888:	e00a      	b.n	80078a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	b2da      	uxtb	r2, r3
 800788e:	4908      	ldr	r1, [pc, #32]	@ (80078b0 <__NVIC_SetPriority+0x50>)
 8007890:	88fb      	ldrh	r3, [r7, #6]
 8007892:	f003 030f 	and.w	r3, r3, #15
 8007896:	3b04      	subs	r3, #4
 8007898:	0112      	lsls	r2, r2, #4
 800789a:	b2d2      	uxtb	r2, r2
 800789c:	440b      	add	r3, r1
 800789e:	761a      	strb	r2, [r3, #24]
}
 80078a0:	bf00      	nop
 80078a2:	370c      	adds	r7, #12
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr
 80078ac:	e000e100 	.word	0xe000e100
 80078b0:	e000ed00 	.word	0xe000ed00

080078b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b089      	sub	sp, #36	@ 0x24
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	60f8      	str	r0, [r7, #12]
 80078bc:	60b9      	str	r1, [r7, #8]
 80078be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f003 0307 	and.w	r3, r3, #7
 80078c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80078c8:	69fb      	ldr	r3, [r7, #28]
 80078ca:	f1c3 0307 	rsb	r3, r3, #7
 80078ce:	2b04      	cmp	r3, #4
 80078d0:	bf28      	it	cs
 80078d2:	2304      	movcs	r3, #4
 80078d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80078d6:	69fb      	ldr	r3, [r7, #28]
 80078d8:	3304      	adds	r3, #4
 80078da:	2b06      	cmp	r3, #6
 80078dc:	d902      	bls.n	80078e4 <NVIC_EncodePriority+0x30>
 80078de:	69fb      	ldr	r3, [r7, #28]
 80078e0:	3b03      	subs	r3, #3
 80078e2:	e000      	b.n	80078e6 <NVIC_EncodePriority+0x32>
 80078e4:	2300      	movs	r3, #0
 80078e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80078e8:	f04f 32ff 	mov.w	r2, #4294967295
 80078ec:	69bb      	ldr	r3, [r7, #24]
 80078ee:	fa02 f303 	lsl.w	r3, r2, r3
 80078f2:	43da      	mvns	r2, r3
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	401a      	ands	r2, r3
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80078fc:	f04f 31ff 	mov.w	r1, #4294967295
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	fa01 f303 	lsl.w	r3, r1, r3
 8007906:	43d9      	mvns	r1, r3
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800790c:	4313      	orrs	r3, r2
         );
}
 800790e:	4618      	mov	r0, r3
 8007910:	3724      	adds	r7, #36	@ 0x24
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr
	...

0800791c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b082      	sub	sp, #8
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	3b01      	subs	r3, #1
 8007928:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800792c:	d301      	bcc.n	8007932 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800792e:	2301      	movs	r3, #1
 8007930:	e00f      	b.n	8007952 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007932:	4a0a      	ldr	r2, [pc, #40]	@ (800795c <SysTick_Config+0x40>)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	3b01      	subs	r3, #1
 8007938:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800793a:	210f      	movs	r1, #15
 800793c:	f04f 30ff 	mov.w	r0, #4294967295
 8007940:	f7ff ff8e 	bl	8007860 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007944:	4b05      	ldr	r3, [pc, #20]	@ (800795c <SysTick_Config+0x40>)
 8007946:	2200      	movs	r2, #0
 8007948:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800794a:	4b04      	ldr	r3, [pc, #16]	@ (800795c <SysTick_Config+0x40>)
 800794c:	2207      	movs	r2, #7
 800794e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007950:	2300      	movs	r3, #0
}
 8007952:	4618      	mov	r0, r3
 8007954:	3708      	adds	r7, #8
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
 800795a:	bf00      	nop
 800795c:	e000e010 	.word	0xe000e010

08007960 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b082      	sub	sp, #8
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f7ff ff29 	bl	80077c0 <__NVIC_SetPriorityGrouping>
}
 800796e:	bf00      	nop
 8007970:	3708      	adds	r7, #8
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}

08007976 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007976:	b580      	push	{r7, lr}
 8007978:	b086      	sub	sp, #24
 800797a:	af00      	add	r7, sp, #0
 800797c:	4603      	mov	r3, r0
 800797e:	60b9      	str	r1, [r7, #8]
 8007980:	607a      	str	r2, [r7, #4]
 8007982:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007984:	f7ff ff40 	bl	8007808 <__NVIC_GetPriorityGrouping>
 8007988:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	68b9      	ldr	r1, [r7, #8]
 800798e:	6978      	ldr	r0, [r7, #20]
 8007990:	f7ff ff90 	bl	80078b4 <NVIC_EncodePriority>
 8007994:	4602      	mov	r2, r0
 8007996:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800799a:	4611      	mov	r1, r2
 800799c:	4618      	mov	r0, r3
 800799e:	f7ff ff5f 	bl	8007860 <__NVIC_SetPriority>
}
 80079a2:	bf00      	nop
 80079a4:	3718      	adds	r7, #24
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}

080079aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80079aa:	b580      	push	{r7, lr}
 80079ac:	b082      	sub	sp, #8
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	4603      	mov	r3, r0
 80079b2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80079b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80079b8:	4618      	mov	r0, r3
 80079ba:	f7ff ff33 	bl	8007824 <__NVIC_EnableIRQ>
}
 80079be:	bf00      	nop
 80079c0:	3708      	adds	r7, #8
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}

080079c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80079c6:	b580      	push	{r7, lr}
 80079c8:	b082      	sub	sp, #8
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f7ff ffa4 	bl	800791c <SysTick_Config>
 80079d4:	4603      	mov	r3, r0
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3708      	adds	r7, #8
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}
	...

080079e0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80079e0:	b480      	push	{r7}
 80079e2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80079e4:	f3bf 8f5f 	dmb	sy
}
 80079e8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80079ea:	4b07      	ldr	r3, [pc, #28]	@ (8007a08 <HAL_MPU_Disable+0x28>)
 80079ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079ee:	4a06      	ldr	r2, [pc, #24]	@ (8007a08 <HAL_MPU_Disable+0x28>)
 80079f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80079f4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80079f6:	4b05      	ldr	r3, [pc, #20]	@ (8007a0c <HAL_MPU_Disable+0x2c>)
 80079f8:	2200      	movs	r2, #0
 80079fa:	605a      	str	r2, [r3, #4]
}
 80079fc:	bf00      	nop
 80079fe:	46bd      	mov	sp, r7
 8007a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a04:	4770      	bx	lr
 8007a06:	bf00      	nop
 8007a08:	e000ed00 	.word	0xe000ed00
 8007a0c:	e000ed90 	.word	0xe000ed90

08007a10 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b083      	sub	sp, #12
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8007a18:	4a0b      	ldr	r2, [pc, #44]	@ (8007a48 <HAL_MPU_Enable+0x38>)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f043 0301 	orr.w	r3, r3, #1
 8007a20:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8007a22:	4b0a      	ldr	r3, [pc, #40]	@ (8007a4c <HAL_MPU_Enable+0x3c>)
 8007a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a26:	4a09      	ldr	r2, [pc, #36]	@ (8007a4c <HAL_MPU_Enable+0x3c>)
 8007a28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a2c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8007a2e:	f3bf 8f4f 	dsb	sy
}
 8007a32:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007a34:	f3bf 8f6f 	isb	sy
}
 8007a38:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8007a3a:	bf00      	nop
 8007a3c:	370c      	adds	r7, #12
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr
 8007a46:	bf00      	nop
 8007a48:	e000ed90 	.word	0xe000ed90
 8007a4c:	e000ed00 	.word	0xe000ed00

08007a50 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b083      	sub	sp, #12
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	785a      	ldrb	r2, [r3, #1]
 8007a5c:	4b1b      	ldr	r3, [pc, #108]	@ (8007acc <HAL_MPU_ConfigRegion+0x7c>)
 8007a5e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8007a60:	4b1a      	ldr	r3, [pc, #104]	@ (8007acc <HAL_MPU_ConfigRegion+0x7c>)
 8007a62:	691b      	ldr	r3, [r3, #16]
 8007a64:	4a19      	ldr	r2, [pc, #100]	@ (8007acc <HAL_MPU_ConfigRegion+0x7c>)
 8007a66:	f023 0301 	bic.w	r3, r3, #1
 8007a6a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8007a6c:	4a17      	ldr	r2, [pc, #92]	@ (8007acc <HAL_MPU_ConfigRegion+0x7c>)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	7b1b      	ldrb	r3, [r3, #12]
 8007a78:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	7adb      	ldrb	r3, [r3, #11]
 8007a7e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007a80:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	7a9b      	ldrb	r3, [r3, #10]
 8007a86:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8007a88:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	7b5b      	ldrb	r3, [r3, #13]
 8007a8e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8007a90:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	7b9b      	ldrb	r3, [r3, #14]
 8007a96:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8007a98:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	7bdb      	ldrb	r3, [r3, #15]
 8007a9e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8007aa0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	7a5b      	ldrb	r3, [r3, #9]
 8007aa6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8007aa8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	7a1b      	ldrb	r3, [r3, #8]
 8007aae:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8007ab0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	7812      	ldrb	r2, [r2, #0]
 8007ab6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007ab8:	4a04      	ldr	r2, [pc, #16]	@ (8007acc <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8007aba:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007abc:	6113      	str	r3, [r2, #16]
}
 8007abe:	bf00      	nop
 8007ac0:	370c      	adds	r7, #12
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac8:	4770      	bx	lr
 8007aca:	bf00      	nop
 8007acc:	e000ed90 	.word	0xe000ed90

08007ad0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b089      	sub	sp, #36	@ 0x24
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007ada:	2300      	movs	r3, #0
 8007adc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007ade:	4b89      	ldr	r3, [pc, #548]	@ (8007d04 <HAL_GPIO_Init+0x234>)
 8007ae0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007ae2:	e194      	b.n	8007e0e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	2101      	movs	r1, #1
 8007aea:	69fb      	ldr	r3, [r7, #28]
 8007aec:	fa01 f303 	lsl.w	r3, r1, r3
 8007af0:	4013      	ands	r3, r2
 8007af2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	f000 8186 	beq.w	8007e08 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	f003 0303 	and.w	r3, r3, #3
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d005      	beq.n	8007b14 <HAL_GPIO_Init+0x44>
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	f003 0303 	and.w	r3, r3, #3
 8007b10:	2b02      	cmp	r3, #2
 8007b12:	d130      	bne.n	8007b76 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	689b      	ldr	r3, [r3, #8]
 8007b18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007b1a:	69fb      	ldr	r3, [r7, #28]
 8007b1c:	005b      	lsls	r3, r3, #1
 8007b1e:	2203      	movs	r2, #3
 8007b20:	fa02 f303 	lsl.w	r3, r2, r3
 8007b24:	43db      	mvns	r3, r3
 8007b26:	69ba      	ldr	r2, [r7, #24]
 8007b28:	4013      	ands	r3, r2
 8007b2a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	68da      	ldr	r2, [r3, #12]
 8007b30:	69fb      	ldr	r3, [r7, #28]
 8007b32:	005b      	lsls	r3, r3, #1
 8007b34:	fa02 f303 	lsl.w	r3, r2, r3
 8007b38:	69ba      	ldr	r2, [r7, #24]
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	69ba      	ldr	r2, [r7, #24]
 8007b42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	69fb      	ldr	r3, [r7, #28]
 8007b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b52:	43db      	mvns	r3, r3
 8007b54:	69ba      	ldr	r2, [r7, #24]
 8007b56:	4013      	ands	r3, r2
 8007b58:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	091b      	lsrs	r3, r3, #4
 8007b60:	f003 0201 	and.w	r2, r3, #1
 8007b64:	69fb      	ldr	r3, [r7, #28]
 8007b66:	fa02 f303 	lsl.w	r3, r2, r3
 8007b6a:	69ba      	ldr	r2, [r7, #24]
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	69ba      	ldr	r2, [r7, #24]
 8007b74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	f003 0303 	and.w	r3, r3, #3
 8007b7e:	2b03      	cmp	r3, #3
 8007b80:	d017      	beq.n	8007bb2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	68db      	ldr	r3, [r3, #12]
 8007b86:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007b88:	69fb      	ldr	r3, [r7, #28]
 8007b8a:	005b      	lsls	r3, r3, #1
 8007b8c:	2203      	movs	r2, #3
 8007b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b92:	43db      	mvns	r3, r3
 8007b94:	69ba      	ldr	r2, [r7, #24]
 8007b96:	4013      	ands	r3, r2
 8007b98:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	689a      	ldr	r2, [r3, #8]
 8007b9e:	69fb      	ldr	r3, [r7, #28]
 8007ba0:	005b      	lsls	r3, r3, #1
 8007ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ba6:	69ba      	ldr	r2, [r7, #24]
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	69ba      	ldr	r2, [r7, #24]
 8007bb0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	f003 0303 	and.w	r3, r3, #3
 8007bba:	2b02      	cmp	r3, #2
 8007bbc:	d123      	bne.n	8007c06 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007bbe:	69fb      	ldr	r3, [r7, #28]
 8007bc0:	08da      	lsrs	r2, r3, #3
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	3208      	adds	r2, #8
 8007bc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007bcc:	69fb      	ldr	r3, [r7, #28]
 8007bce:	f003 0307 	and.w	r3, r3, #7
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	220f      	movs	r2, #15
 8007bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8007bda:	43db      	mvns	r3, r3
 8007bdc:	69ba      	ldr	r2, [r7, #24]
 8007bde:	4013      	ands	r3, r2
 8007be0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	691a      	ldr	r2, [r3, #16]
 8007be6:	69fb      	ldr	r3, [r7, #28]
 8007be8:	f003 0307 	and.w	r3, r3, #7
 8007bec:	009b      	lsls	r3, r3, #2
 8007bee:	fa02 f303 	lsl.w	r3, r2, r3
 8007bf2:	69ba      	ldr	r2, [r7, #24]
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007bf8:	69fb      	ldr	r3, [r7, #28]
 8007bfa:	08da      	lsrs	r2, r3, #3
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	3208      	adds	r2, #8
 8007c00:	69b9      	ldr	r1, [r7, #24]
 8007c02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007c0c:	69fb      	ldr	r3, [r7, #28]
 8007c0e:	005b      	lsls	r3, r3, #1
 8007c10:	2203      	movs	r2, #3
 8007c12:	fa02 f303 	lsl.w	r3, r2, r3
 8007c16:	43db      	mvns	r3, r3
 8007c18:	69ba      	ldr	r2, [r7, #24]
 8007c1a:	4013      	ands	r3, r2
 8007c1c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	f003 0203 	and.w	r2, r3, #3
 8007c26:	69fb      	ldr	r3, [r7, #28]
 8007c28:	005b      	lsls	r3, r3, #1
 8007c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c2e:	69ba      	ldr	r2, [r7, #24]
 8007c30:	4313      	orrs	r3, r2
 8007c32:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	69ba      	ldr	r2, [r7, #24]
 8007c38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	f000 80e0 	beq.w	8007e08 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007c48:	4b2f      	ldr	r3, [pc, #188]	@ (8007d08 <HAL_GPIO_Init+0x238>)
 8007c4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007c4e:	4a2e      	ldr	r2, [pc, #184]	@ (8007d08 <HAL_GPIO_Init+0x238>)
 8007c50:	f043 0302 	orr.w	r3, r3, #2
 8007c54:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007c58:	4b2b      	ldr	r3, [pc, #172]	@ (8007d08 <HAL_GPIO_Init+0x238>)
 8007c5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007c5e:	f003 0302 	and.w	r3, r3, #2
 8007c62:	60fb      	str	r3, [r7, #12]
 8007c64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007c66:	4a29      	ldr	r2, [pc, #164]	@ (8007d0c <HAL_GPIO_Init+0x23c>)
 8007c68:	69fb      	ldr	r3, [r7, #28]
 8007c6a:	089b      	lsrs	r3, r3, #2
 8007c6c:	3302      	adds	r3, #2
 8007c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007c74:	69fb      	ldr	r3, [r7, #28]
 8007c76:	f003 0303 	and.w	r3, r3, #3
 8007c7a:	009b      	lsls	r3, r3, #2
 8007c7c:	220f      	movs	r2, #15
 8007c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c82:	43db      	mvns	r3, r3
 8007c84:	69ba      	ldr	r2, [r7, #24]
 8007c86:	4013      	ands	r3, r2
 8007c88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	4a20      	ldr	r2, [pc, #128]	@ (8007d10 <HAL_GPIO_Init+0x240>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d052      	beq.n	8007d38 <HAL_GPIO_Init+0x268>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	4a1f      	ldr	r2, [pc, #124]	@ (8007d14 <HAL_GPIO_Init+0x244>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d031      	beq.n	8007cfe <HAL_GPIO_Init+0x22e>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	4a1e      	ldr	r2, [pc, #120]	@ (8007d18 <HAL_GPIO_Init+0x248>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d02b      	beq.n	8007cfa <HAL_GPIO_Init+0x22a>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	4a1d      	ldr	r2, [pc, #116]	@ (8007d1c <HAL_GPIO_Init+0x24c>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d025      	beq.n	8007cf6 <HAL_GPIO_Init+0x226>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	4a1c      	ldr	r2, [pc, #112]	@ (8007d20 <HAL_GPIO_Init+0x250>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d01f      	beq.n	8007cf2 <HAL_GPIO_Init+0x222>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	4a1b      	ldr	r2, [pc, #108]	@ (8007d24 <HAL_GPIO_Init+0x254>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d019      	beq.n	8007cee <HAL_GPIO_Init+0x21e>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	4a1a      	ldr	r2, [pc, #104]	@ (8007d28 <HAL_GPIO_Init+0x258>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d013      	beq.n	8007cea <HAL_GPIO_Init+0x21a>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	4a19      	ldr	r2, [pc, #100]	@ (8007d2c <HAL_GPIO_Init+0x25c>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d00d      	beq.n	8007ce6 <HAL_GPIO_Init+0x216>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	4a18      	ldr	r2, [pc, #96]	@ (8007d30 <HAL_GPIO_Init+0x260>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d007      	beq.n	8007ce2 <HAL_GPIO_Init+0x212>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	4a17      	ldr	r2, [pc, #92]	@ (8007d34 <HAL_GPIO_Init+0x264>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d101      	bne.n	8007cde <HAL_GPIO_Init+0x20e>
 8007cda:	2309      	movs	r3, #9
 8007cdc:	e02d      	b.n	8007d3a <HAL_GPIO_Init+0x26a>
 8007cde:	230a      	movs	r3, #10
 8007ce0:	e02b      	b.n	8007d3a <HAL_GPIO_Init+0x26a>
 8007ce2:	2308      	movs	r3, #8
 8007ce4:	e029      	b.n	8007d3a <HAL_GPIO_Init+0x26a>
 8007ce6:	2307      	movs	r3, #7
 8007ce8:	e027      	b.n	8007d3a <HAL_GPIO_Init+0x26a>
 8007cea:	2306      	movs	r3, #6
 8007cec:	e025      	b.n	8007d3a <HAL_GPIO_Init+0x26a>
 8007cee:	2305      	movs	r3, #5
 8007cf0:	e023      	b.n	8007d3a <HAL_GPIO_Init+0x26a>
 8007cf2:	2304      	movs	r3, #4
 8007cf4:	e021      	b.n	8007d3a <HAL_GPIO_Init+0x26a>
 8007cf6:	2303      	movs	r3, #3
 8007cf8:	e01f      	b.n	8007d3a <HAL_GPIO_Init+0x26a>
 8007cfa:	2302      	movs	r3, #2
 8007cfc:	e01d      	b.n	8007d3a <HAL_GPIO_Init+0x26a>
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e01b      	b.n	8007d3a <HAL_GPIO_Init+0x26a>
 8007d02:	bf00      	nop
 8007d04:	58000080 	.word	0x58000080
 8007d08:	58024400 	.word	0x58024400
 8007d0c:	58000400 	.word	0x58000400
 8007d10:	58020000 	.word	0x58020000
 8007d14:	58020400 	.word	0x58020400
 8007d18:	58020800 	.word	0x58020800
 8007d1c:	58020c00 	.word	0x58020c00
 8007d20:	58021000 	.word	0x58021000
 8007d24:	58021400 	.word	0x58021400
 8007d28:	58021800 	.word	0x58021800
 8007d2c:	58021c00 	.word	0x58021c00
 8007d30:	58022000 	.word	0x58022000
 8007d34:	58022400 	.word	0x58022400
 8007d38:	2300      	movs	r3, #0
 8007d3a:	69fa      	ldr	r2, [r7, #28]
 8007d3c:	f002 0203 	and.w	r2, r2, #3
 8007d40:	0092      	lsls	r2, r2, #2
 8007d42:	4093      	lsls	r3, r2
 8007d44:	69ba      	ldr	r2, [r7, #24]
 8007d46:	4313      	orrs	r3, r2
 8007d48:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007d4a:	4938      	ldr	r1, [pc, #224]	@ (8007e2c <HAL_GPIO_Init+0x35c>)
 8007d4c:	69fb      	ldr	r3, [r7, #28]
 8007d4e:	089b      	lsrs	r3, r3, #2
 8007d50:	3302      	adds	r3, #2
 8007d52:	69ba      	ldr	r2, [r7, #24]
 8007d54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007d58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	43db      	mvns	r3, r3
 8007d64:	69ba      	ldr	r2, [r7, #24]
 8007d66:	4013      	ands	r3, r2
 8007d68:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d003      	beq.n	8007d7e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007d76:	69ba      	ldr	r2, [r7, #24]
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007d7e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007d82:	69bb      	ldr	r3, [r7, #24]
 8007d84:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007d86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	43db      	mvns	r3, r3
 8007d92:	69ba      	ldr	r2, [r7, #24]
 8007d94:	4013      	ands	r3, r2
 8007d96:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d003      	beq.n	8007dac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007da4:	69ba      	ldr	r2, [r7, #24]
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	4313      	orrs	r3, r2
 8007daa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007dac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007db0:	69bb      	ldr	r3, [r7, #24]
 8007db2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	43db      	mvns	r3, r3
 8007dbe:	69ba      	ldr	r2, [r7, #24]
 8007dc0:	4013      	ands	r3, r2
 8007dc2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d003      	beq.n	8007dd8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007dd0:	69ba      	ldr	r2, [r7, #24]
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	69ba      	ldr	r2, [r7, #24]
 8007ddc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	43db      	mvns	r3, r3
 8007de8:	69ba      	ldr	r2, [r7, #24]
 8007dea:	4013      	ands	r3, r2
 8007dec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d003      	beq.n	8007e02 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007dfa:	69ba      	ldr	r2, [r7, #24]
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	69ba      	ldr	r2, [r7, #24]
 8007e06:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007e08:	69fb      	ldr	r3, [r7, #28]
 8007e0a:	3301      	adds	r3, #1
 8007e0c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	681a      	ldr	r2, [r3, #0]
 8007e12:	69fb      	ldr	r3, [r7, #28]
 8007e14:	fa22 f303 	lsr.w	r3, r2, r3
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	f47f ae63 	bne.w	8007ae4 <HAL_GPIO_Init+0x14>
  }
}
 8007e1e:	bf00      	nop
 8007e20:	bf00      	nop
 8007e22:	3724      	adds	r7, #36	@ 0x24
 8007e24:	46bd      	mov	sp, r7
 8007e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2a:	4770      	bx	lr
 8007e2c:	58000400 	.word	0x58000400

08007e30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b085      	sub	sp, #20
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
 8007e38:	460b      	mov	r3, r1
 8007e3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	691a      	ldr	r2, [r3, #16]
 8007e40:	887b      	ldrh	r3, [r7, #2]
 8007e42:	4013      	ands	r3, r2
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d002      	beq.n	8007e4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	73fb      	strb	r3, [r7, #15]
 8007e4c:	e001      	b.n	8007e52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3714      	adds	r7, #20
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr

08007e60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	460b      	mov	r3, r1
 8007e6a:	807b      	strh	r3, [r7, #2]
 8007e6c:	4613      	mov	r3, r2
 8007e6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007e70:	787b      	ldrb	r3, [r7, #1]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d003      	beq.n	8007e7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007e76:	887a      	ldrh	r2, [r7, #2]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007e7c:	e003      	b.n	8007e86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007e7e:	887b      	ldrh	r3, [r7, #2]
 8007e80:	041a      	lsls	r2, r3, #16
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	619a      	str	r2, [r3, #24]
}
 8007e86:	bf00      	nop
 8007e88:	370c      	adds	r7, #12
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e90:	4770      	bx	lr

08007e92 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007e92:	b480      	push	{r7}
 8007e94:	b085      	sub	sp, #20
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	6078      	str	r0, [r7, #4]
 8007e9a:	460b      	mov	r3, r1
 8007e9c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	695b      	ldr	r3, [r3, #20]
 8007ea2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007ea4:	887a      	ldrh	r2, [r7, #2]
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	4013      	ands	r3, r2
 8007eaa:	041a      	lsls	r2, r3, #16
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	43d9      	mvns	r1, r3
 8007eb0:	887b      	ldrh	r3, [r7, #2]
 8007eb2:	400b      	ands	r3, r1
 8007eb4:	431a      	orrs	r2, r3
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	619a      	str	r2, [r3, #24]
}
 8007eba:	bf00      	nop
 8007ebc:	3714      	adds	r7, #20
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec4:	4770      	bx	lr
	...

08007ec8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b084      	sub	sp, #16
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007ed0:	4b19      	ldr	r3, [pc, #100]	@ (8007f38 <HAL_PWREx_ConfigSupply+0x70>)
 8007ed2:	68db      	ldr	r3, [r3, #12]
 8007ed4:	f003 0304 	and.w	r3, r3, #4
 8007ed8:	2b04      	cmp	r3, #4
 8007eda:	d00a      	beq.n	8007ef2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007edc:	4b16      	ldr	r3, [pc, #88]	@ (8007f38 <HAL_PWREx_ConfigSupply+0x70>)
 8007ede:	68db      	ldr	r3, [r3, #12]
 8007ee0:	f003 0307 	and.w	r3, r3, #7
 8007ee4:	687a      	ldr	r2, [r7, #4]
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d001      	beq.n	8007eee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007eea:	2301      	movs	r3, #1
 8007eec:	e01f      	b.n	8007f2e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	e01d      	b.n	8007f2e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007ef2:	4b11      	ldr	r3, [pc, #68]	@ (8007f38 <HAL_PWREx_ConfigSupply+0x70>)
 8007ef4:	68db      	ldr	r3, [r3, #12]
 8007ef6:	f023 0207 	bic.w	r2, r3, #7
 8007efa:	490f      	ldr	r1, [pc, #60]	@ (8007f38 <HAL_PWREx_ConfigSupply+0x70>)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	4313      	orrs	r3, r2
 8007f00:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007f02:	f7ff fc21 	bl	8007748 <HAL_GetTick>
 8007f06:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007f08:	e009      	b.n	8007f1e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007f0a:	f7ff fc1d 	bl	8007748 <HAL_GetTick>
 8007f0e:	4602      	mov	r2, r0
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	1ad3      	subs	r3, r2, r3
 8007f14:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007f18:	d901      	bls.n	8007f1e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	e007      	b.n	8007f2e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007f1e:	4b06      	ldr	r3, [pc, #24]	@ (8007f38 <HAL_PWREx_ConfigSupply+0x70>)
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007f26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f2a:	d1ee      	bne.n	8007f0a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007f2c:	2300      	movs	r3, #0
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3710      	adds	r7, #16
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
 8007f36:	bf00      	nop
 8007f38:	58024800 	.word	0x58024800

08007f3c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b08c      	sub	sp, #48	@ 0x30
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d102      	bne.n	8007f50 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	f000 bc48 	b.w	80087e0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f003 0301 	and.w	r3, r3, #1
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	f000 8088 	beq.w	800806e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f5e:	4b99      	ldr	r3, [pc, #612]	@ (80081c4 <HAL_RCC_OscConfig+0x288>)
 8007f60:	691b      	ldr	r3, [r3, #16]
 8007f62:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007f66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007f68:	4b96      	ldr	r3, [pc, #600]	@ (80081c4 <HAL_RCC_OscConfig+0x288>)
 8007f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007f6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f70:	2b10      	cmp	r3, #16
 8007f72:	d007      	beq.n	8007f84 <HAL_RCC_OscConfig+0x48>
 8007f74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f76:	2b18      	cmp	r3, #24
 8007f78:	d111      	bne.n	8007f9e <HAL_RCC_OscConfig+0x62>
 8007f7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f7c:	f003 0303 	and.w	r3, r3, #3
 8007f80:	2b02      	cmp	r3, #2
 8007f82:	d10c      	bne.n	8007f9e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f84:	4b8f      	ldr	r3, [pc, #572]	@ (80081c4 <HAL_RCC_OscConfig+0x288>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d06d      	beq.n	800806c <HAL_RCC_OscConfig+0x130>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d169      	bne.n	800806c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	f000 bc21 	b.w	80087e0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007fa6:	d106      	bne.n	8007fb6 <HAL_RCC_OscConfig+0x7a>
 8007fa8:	4b86      	ldr	r3, [pc, #536]	@ (80081c4 <HAL_RCC_OscConfig+0x288>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a85      	ldr	r2, [pc, #532]	@ (80081c4 <HAL_RCC_OscConfig+0x288>)
 8007fae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007fb2:	6013      	str	r3, [r2, #0]
 8007fb4:	e02e      	b.n	8008014 <HAL_RCC_OscConfig+0xd8>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d10c      	bne.n	8007fd8 <HAL_RCC_OscConfig+0x9c>
 8007fbe:	4b81      	ldr	r3, [pc, #516]	@ (80081c4 <HAL_RCC_OscConfig+0x288>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a80      	ldr	r2, [pc, #512]	@ (80081c4 <HAL_RCC_OscConfig+0x288>)
 8007fc4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007fc8:	6013      	str	r3, [r2, #0]
 8007fca:	4b7e      	ldr	r3, [pc, #504]	@ (80081c4 <HAL_RCC_OscConfig+0x288>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a7d      	ldr	r2, [pc, #500]	@ (80081c4 <HAL_RCC_OscConfig+0x288>)
 8007fd0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007fd4:	6013      	str	r3, [r2, #0]
 8007fd6:	e01d      	b.n	8008014 <HAL_RCC_OscConfig+0xd8>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007fe0:	d10c      	bne.n	8007ffc <HAL_RCC_OscConfig+0xc0>
 8007fe2:	4b78      	ldr	r3, [pc, #480]	@ (80081c4 <HAL_RCC_OscConfig+0x288>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a77      	ldr	r2, [pc, #476]	@ (80081c4 <HAL_RCC_OscConfig+0x288>)
 8007fe8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007fec:	6013      	str	r3, [r2, #0]
 8007fee:	4b75      	ldr	r3, [pc, #468]	@ (80081c4 <HAL_RCC_OscConfig+0x288>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a74      	ldr	r2, [pc, #464]	@ (80081c4 <HAL_RCC_OscConfig+0x288>)
 8007ff4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007ff8:	6013      	str	r3, [r2, #0]
 8007ffa:	e00b      	b.n	8008014 <HAL_RCC_OscConfig+0xd8>
 8007ffc:	4b71      	ldr	r3, [pc, #452]	@ (80081c4 <HAL_RCC_OscConfig+0x288>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a70      	ldr	r2, [pc, #448]	@ (80081c4 <HAL_RCC_OscConfig+0x288>)
 8008002:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008006:	6013      	str	r3, [r2, #0]
 8008008:	4b6e      	ldr	r3, [pc, #440]	@ (80081c4 <HAL_RCC_OscConfig+0x288>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a6d      	ldr	r2, [pc, #436]	@ (80081c4 <HAL_RCC_OscConfig+0x288>)
 800800e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008012:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d013      	beq.n	8008044 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800801c:	f7ff fb94 	bl	8007748 <HAL_GetTick>
 8008020:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008022:	e008      	b.n	8008036 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008024:	f7ff fb90 	bl	8007748 <HAL_GetTick>
 8008028:	4602      	mov	r2, r0
 800802a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800802c:	1ad3      	subs	r3, r2, r3
 800802e:	2b64      	cmp	r3, #100	@ 0x64
 8008030:	d901      	bls.n	8008036 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008032:	2303      	movs	r3, #3
 8008034:	e3d4      	b.n	80087e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008036:	4b63      	ldr	r3, [pc, #396]	@ (80081c4 <HAL_RCC_OscConfig+0x288>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800803e:	2b00      	cmp	r3, #0
 8008040:	d0f0      	beq.n	8008024 <HAL_RCC_OscConfig+0xe8>
 8008042:	e014      	b.n	800806e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008044:	f7ff fb80 	bl	8007748 <HAL_GetTick>
 8008048:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800804a:	e008      	b.n	800805e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800804c:	f7ff fb7c 	bl	8007748 <HAL_GetTick>
 8008050:	4602      	mov	r2, r0
 8008052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008054:	1ad3      	subs	r3, r2, r3
 8008056:	2b64      	cmp	r3, #100	@ 0x64
 8008058:	d901      	bls.n	800805e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800805a:	2303      	movs	r3, #3
 800805c:	e3c0      	b.n	80087e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800805e:	4b59      	ldr	r3, [pc, #356]	@ (80081c4 <HAL_RCC_OscConfig+0x288>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008066:	2b00      	cmp	r3, #0
 8008068:	d1f0      	bne.n	800804c <HAL_RCC_OscConfig+0x110>
 800806a:	e000      	b.n	800806e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800806c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f003 0302 	and.w	r3, r3, #2
 8008076:	2b00      	cmp	r3, #0
 8008078:	f000 80ca 	beq.w	8008210 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800807c:	4b51      	ldr	r3, [pc, #324]	@ (80081c4 <HAL_RCC_OscConfig+0x288>)
 800807e:	691b      	ldr	r3, [r3, #16]
 8008080:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008084:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008086:	4b4f      	ldr	r3, [pc, #316]	@ (80081c4 <HAL_RCC_OscConfig+0x288>)
 8008088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800808a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800808c:	6a3b      	ldr	r3, [r7, #32]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d007      	beq.n	80080a2 <HAL_RCC_OscConfig+0x166>
 8008092:	6a3b      	ldr	r3, [r7, #32]
 8008094:	2b18      	cmp	r3, #24
 8008096:	d156      	bne.n	8008146 <HAL_RCC_OscConfig+0x20a>
 8008098:	69fb      	ldr	r3, [r7, #28]
 800809a:	f003 0303 	and.w	r3, r3, #3
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d151      	bne.n	8008146 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80080a2:	4b48      	ldr	r3, [pc, #288]	@ (80081c4 <HAL_RCC_OscConfig+0x288>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f003 0304 	and.w	r3, r3, #4
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d005      	beq.n	80080ba <HAL_RCC_OscConfig+0x17e>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	68db      	ldr	r3, [r3, #12]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d101      	bne.n	80080ba <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80080b6:	2301      	movs	r3, #1
 80080b8:	e392      	b.n	80087e0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80080ba:	4b42      	ldr	r3, [pc, #264]	@ (80081c4 <HAL_RCC_OscConfig+0x288>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f023 0219 	bic.w	r2, r3, #25
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	68db      	ldr	r3, [r3, #12]
 80080c6:	493f      	ldr	r1, [pc, #252]	@ (80081c4 <HAL_RCC_OscConfig+0x288>)
 80080c8:	4313      	orrs	r3, r2
 80080ca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080cc:	f7ff fb3c 	bl	8007748 <HAL_GetTick>
 80080d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80080d2:	e008      	b.n	80080e6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80080d4:	f7ff fb38 	bl	8007748 <HAL_GetTick>
 80080d8:	4602      	mov	r2, r0
 80080da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080dc:	1ad3      	subs	r3, r2, r3
 80080de:	2b02      	cmp	r3, #2
 80080e0:	d901      	bls.n	80080e6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80080e2:	2303      	movs	r3, #3
 80080e4:	e37c      	b.n	80087e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80080e6:	4b37      	ldr	r3, [pc, #220]	@ (80081c4 <HAL_RCC_OscConfig+0x288>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f003 0304 	and.w	r3, r3, #4
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d0f0      	beq.n	80080d4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080f2:	f7ff fb59 	bl	80077a8 <HAL_GetREVID>
 80080f6:	4603      	mov	r3, r0
 80080f8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d817      	bhi.n	8008130 <HAL_RCC_OscConfig+0x1f4>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	691b      	ldr	r3, [r3, #16]
 8008104:	2b40      	cmp	r3, #64	@ 0x40
 8008106:	d108      	bne.n	800811a <HAL_RCC_OscConfig+0x1de>
 8008108:	4b2e      	ldr	r3, [pc, #184]	@ (80081c4 <HAL_RCC_OscConfig+0x288>)
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008110:	4a2c      	ldr	r2, [pc, #176]	@ (80081c4 <HAL_RCC_OscConfig+0x288>)
 8008112:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008116:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008118:	e07a      	b.n	8008210 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800811a:	4b2a      	ldr	r3, [pc, #168]	@ (80081c4 <HAL_RCC_OscConfig+0x288>)
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	691b      	ldr	r3, [r3, #16]
 8008126:	031b      	lsls	r3, r3, #12
 8008128:	4926      	ldr	r1, [pc, #152]	@ (80081c4 <HAL_RCC_OscConfig+0x288>)
 800812a:	4313      	orrs	r3, r2
 800812c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800812e:	e06f      	b.n	8008210 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008130:	4b24      	ldr	r3, [pc, #144]	@ (80081c4 <HAL_RCC_OscConfig+0x288>)
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	691b      	ldr	r3, [r3, #16]
 800813c:	061b      	lsls	r3, r3, #24
 800813e:	4921      	ldr	r1, [pc, #132]	@ (80081c4 <HAL_RCC_OscConfig+0x288>)
 8008140:	4313      	orrs	r3, r2
 8008142:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008144:	e064      	b.n	8008210 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	68db      	ldr	r3, [r3, #12]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d047      	beq.n	80081de <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800814e:	4b1d      	ldr	r3, [pc, #116]	@ (80081c4 <HAL_RCC_OscConfig+0x288>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f023 0219 	bic.w	r2, r3, #25
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	68db      	ldr	r3, [r3, #12]
 800815a:	491a      	ldr	r1, [pc, #104]	@ (80081c4 <HAL_RCC_OscConfig+0x288>)
 800815c:	4313      	orrs	r3, r2
 800815e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008160:	f7ff faf2 	bl	8007748 <HAL_GetTick>
 8008164:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008166:	e008      	b.n	800817a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008168:	f7ff faee 	bl	8007748 <HAL_GetTick>
 800816c:	4602      	mov	r2, r0
 800816e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008170:	1ad3      	subs	r3, r2, r3
 8008172:	2b02      	cmp	r3, #2
 8008174:	d901      	bls.n	800817a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008176:	2303      	movs	r3, #3
 8008178:	e332      	b.n	80087e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800817a:	4b12      	ldr	r3, [pc, #72]	@ (80081c4 <HAL_RCC_OscConfig+0x288>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f003 0304 	and.w	r3, r3, #4
 8008182:	2b00      	cmp	r3, #0
 8008184:	d0f0      	beq.n	8008168 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008186:	f7ff fb0f 	bl	80077a8 <HAL_GetREVID>
 800818a:	4603      	mov	r3, r0
 800818c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008190:	4293      	cmp	r3, r2
 8008192:	d819      	bhi.n	80081c8 <HAL_RCC_OscConfig+0x28c>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	691b      	ldr	r3, [r3, #16]
 8008198:	2b40      	cmp	r3, #64	@ 0x40
 800819a:	d108      	bne.n	80081ae <HAL_RCC_OscConfig+0x272>
 800819c:	4b09      	ldr	r3, [pc, #36]	@ (80081c4 <HAL_RCC_OscConfig+0x288>)
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80081a4:	4a07      	ldr	r2, [pc, #28]	@ (80081c4 <HAL_RCC_OscConfig+0x288>)
 80081a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80081aa:	6053      	str	r3, [r2, #4]
 80081ac:	e030      	b.n	8008210 <HAL_RCC_OscConfig+0x2d4>
 80081ae:	4b05      	ldr	r3, [pc, #20]	@ (80081c4 <HAL_RCC_OscConfig+0x288>)
 80081b0:	685b      	ldr	r3, [r3, #4]
 80081b2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	691b      	ldr	r3, [r3, #16]
 80081ba:	031b      	lsls	r3, r3, #12
 80081bc:	4901      	ldr	r1, [pc, #4]	@ (80081c4 <HAL_RCC_OscConfig+0x288>)
 80081be:	4313      	orrs	r3, r2
 80081c0:	604b      	str	r3, [r1, #4]
 80081c2:	e025      	b.n	8008210 <HAL_RCC_OscConfig+0x2d4>
 80081c4:	58024400 	.word	0x58024400
 80081c8:	4b9a      	ldr	r3, [pc, #616]	@ (8008434 <HAL_RCC_OscConfig+0x4f8>)
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	691b      	ldr	r3, [r3, #16]
 80081d4:	061b      	lsls	r3, r3, #24
 80081d6:	4997      	ldr	r1, [pc, #604]	@ (8008434 <HAL_RCC_OscConfig+0x4f8>)
 80081d8:	4313      	orrs	r3, r2
 80081da:	604b      	str	r3, [r1, #4]
 80081dc:	e018      	b.n	8008210 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80081de:	4b95      	ldr	r3, [pc, #596]	@ (8008434 <HAL_RCC_OscConfig+0x4f8>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a94      	ldr	r2, [pc, #592]	@ (8008434 <HAL_RCC_OscConfig+0x4f8>)
 80081e4:	f023 0301 	bic.w	r3, r3, #1
 80081e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081ea:	f7ff faad 	bl	8007748 <HAL_GetTick>
 80081ee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80081f0:	e008      	b.n	8008204 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80081f2:	f7ff faa9 	bl	8007748 <HAL_GetTick>
 80081f6:	4602      	mov	r2, r0
 80081f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081fa:	1ad3      	subs	r3, r2, r3
 80081fc:	2b02      	cmp	r3, #2
 80081fe:	d901      	bls.n	8008204 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008200:	2303      	movs	r3, #3
 8008202:	e2ed      	b.n	80087e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008204:	4b8b      	ldr	r3, [pc, #556]	@ (8008434 <HAL_RCC_OscConfig+0x4f8>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f003 0304 	and.w	r3, r3, #4
 800820c:	2b00      	cmp	r3, #0
 800820e:	d1f0      	bne.n	80081f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f003 0310 	and.w	r3, r3, #16
 8008218:	2b00      	cmp	r3, #0
 800821a:	f000 80a9 	beq.w	8008370 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800821e:	4b85      	ldr	r3, [pc, #532]	@ (8008434 <HAL_RCC_OscConfig+0x4f8>)
 8008220:	691b      	ldr	r3, [r3, #16]
 8008222:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008226:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008228:	4b82      	ldr	r3, [pc, #520]	@ (8008434 <HAL_RCC_OscConfig+0x4f8>)
 800822a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800822c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800822e:	69bb      	ldr	r3, [r7, #24]
 8008230:	2b08      	cmp	r3, #8
 8008232:	d007      	beq.n	8008244 <HAL_RCC_OscConfig+0x308>
 8008234:	69bb      	ldr	r3, [r7, #24]
 8008236:	2b18      	cmp	r3, #24
 8008238:	d13a      	bne.n	80082b0 <HAL_RCC_OscConfig+0x374>
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	f003 0303 	and.w	r3, r3, #3
 8008240:	2b01      	cmp	r3, #1
 8008242:	d135      	bne.n	80082b0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008244:	4b7b      	ldr	r3, [pc, #492]	@ (8008434 <HAL_RCC_OscConfig+0x4f8>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800824c:	2b00      	cmp	r3, #0
 800824e:	d005      	beq.n	800825c <HAL_RCC_OscConfig+0x320>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	69db      	ldr	r3, [r3, #28]
 8008254:	2b80      	cmp	r3, #128	@ 0x80
 8008256:	d001      	beq.n	800825c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008258:	2301      	movs	r3, #1
 800825a:	e2c1      	b.n	80087e0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800825c:	f7ff faa4 	bl	80077a8 <HAL_GetREVID>
 8008260:	4603      	mov	r3, r0
 8008262:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008266:	4293      	cmp	r3, r2
 8008268:	d817      	bhi.n	800829a <HAL_RCC_OscConfig+0x35e>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6a1b      	ldr	r3, [r3, #32]
 800826e:	2b20      	cmp	r3, #32
 8008270:	d108      	bne.n	8008284 <HAL_RCC_OscConfig+0x348>
 8008272:	4b70      	ldr	r3, [pc, #448]	@ (8008434 <HAL_RCC_OscConfig+0x4f8>)
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800827a:	4a6e      	ldr	r2, [pc, #440]	@ (8008434 <HAL_RCC_OscConfig+0x4f8>)
 800827c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008280:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008282:	e075      	b.n	8008370 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008284:	4b6b      	ldr	r3, [pc, #428]	@ (8008434 <HAL_RCC_OscConfig+0x4f8>)
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6a1b      	ldr	r3, [r3, #32]
 8008290:	069b      	lsls	r3, r3, #26
 8008292:	4968      	ldr	r1, [pc, #416]	@ (8008434 <HAL_RCC_OscConfig+0x4f8>)
 8008294:	4313      	orrs	r3, r2
 8008296:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008298:	e06a      	b.n	8008370 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800829a:	4b66      	ldr	r3, [pc, #408]	@ (8008434 <HAL_RCC_OscConfig+0x4f8>)
 800829c:	68db      	ldr	r3, [r3, #12]
 800829e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6a1b      	ldr	r3, [r3, #32]
 80082a6:	061b      	lsls	r3, r3, #24
 80082a8:	4962      	ldr	r1, [pc, #392]	@ (8008434 <HAL_RCC_OscConfig+0x4f8>)
 80082aa:	4313      	orrs	r3, r2
 80082ac:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80082ae:	e05f      	b.n	8008370 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	69db      	ldr	r3, [r3, #28]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d042      	beq.n	800833e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80082b8:	4b5e      	ldr	r3, [pc, #376]	@ (8008434 <HAL_RCC_OscConfig+0x4f8>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a5d      	ldr	r2, [pc, #372]	@ (8008434 <HAL_RCC_OscConfig+0x4f8>)
 80082be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082c4:	f7ff fa40 	bl	8007748 <HAL_GetTick>
 80082c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80082ca:	e008      	b.n	80082de <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80082cc:	f7ff fa3c 	bl	8007748 <HAL_GetTick>
 80082d0:	4602      	mov	r2, r0
 80082d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082d4:	1ad3      	subs	r3, r2, r3
 80082d6:	2b02      	cmp	r3, #2
 80082d8:	d901      	bls.n	80082de <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80082da:	2303      	movs	r3, #3
 80082dc:	e280      	b.n	80087e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80082de:	4b55      	ldr	r3, [pc, #340]	@ (8008434 <HAL_RCC_OscConfig+0x4f8>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d0f0      	beq.n	80082cc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80082ea:	f7ff fa5d 	bl	80077a8 <HAL_GetREVID>
 80082ee:	4603      	mov	r3, r0
 80082f0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d817      	bhi.n	8008328 <HAL_RCC_OscConfig+0x3ec>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6a1b      	ldr	r3, [r3, #32]
 80082fc:	2b20      	cmp	r3, #32
 80082fe:	d108      	bne.n	8008312 <HAL_RCC_OscConfig+0x3d6>
 8008300:	4b4c      	ldr	r3, [pc, #304]	@ (8008434 <HAL_RCC_OscConfig+0x4f8>)
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8008308:	4a4a      	ldr	r2, [pc, #296]	@ (8008434 <HAL_RCC_OscConfig+0x4f8>)
 800830a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800830e:	6053      	str	r3, [r2, #4]
 8008310:	e02e      	b.n	8008370 <HAL_RCC_OscConfig+0x434>
 8008312:	4b48      	ldr	r3, [pc, #288]	@ (8008434 <HAL_RCC_OscConfig+0x4f8>)
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6a1b      	ldr	r3, [r3, #32]
 800831e:	069b      	lsls	r3, r3, #26
 8008320:	4944      	ldr	r1, [pc, #272]	@ (8008434 <HAL_RCC_OscConfig+0x4f8>)
 8008322:	4313      	orrs	r3, r2
 8008324:	604b      	str	r3, [r1, #4]
 8008326:	e023      	b.n	8008370 <HAL_RCC_OscConfig+0x434>
 8008328:	4b42      	ldr	r3, [pc, #264]	@ (8008434 <HAL_RCC_OscConfig+0x4f8>)
 800832a:	68db      	ldr	r3, [r3, #12]
 800832c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6a1b      	ldr	r3, [r3, #32]
 8008334:	061b      	lsls	r3, r3, #24
 8008336:	493f      	ldr	r1, [pc, #252]	@ (8008434 <HAL_RCC_OscConfig+0x4f8>)
 8008338:	4313      	orrs	r3, r2
 800833a:	60cb      	str	r3, [r1, #12]
 800833c:	e018      	b.n	8008370 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800833e:	4b3d      	ldr	r3, [pc, #244]	@ (8008434 <HAL_RCC_OscConfig+0x4f8>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a3c      	ldr	r2, [pc, #240]	@ (8008434 <HAL_RCC_OscConfig+0x4f8>)
 8008344:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008348:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800834a:	f7ff f9fd 	bl	8007748 <HAL_GetTick>
 800834e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008350:	e008      	b.n	8008364 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008352:	f7ff f9f9 	bl	8007748 <HAL_GetTick>
 8008356:	4602      	mov	r2, r0
 8008358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800835a:	1ad3      	subs	r3, r2, r3
 800835c:	2b02      	cmp	r3, #2
 800835e:	d901      	bls.n	8008364 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008360:	2303      	movs	r3, #3
 8008362:	e23d      	b.n	80087e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008364:	4b33      	ldr	r3, [pc, #204]	@ (8008434 <HAL_RCC_OscConfig+0x4f8>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800836c:	2b00      	cmp	r3, #0
 800836e:	d1f0      	bne.n	8008352 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f003 0308 	and.w	r3, r3, #8
 8008378:	2b00      	cmp	r3, #0
 800837a:	d036      	beq.n	80083ea <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	695b      	ldr	r3, [r3, #20]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d019      	beq.n	80083b8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008384:	4b2b      	ldr	r3, [pc, #172]	@ (8008434 <HAL_RCC_OscConfig+0x4f8>)
 8008386:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008388:	4a2a      	ldr	r2, [pc, #168]	@ (8008434 <HAL_RCC_OscConfig+0x4f8>)
 800838a:	f043 0301 	orr.w	r3, r3, #1
 800838e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008390:	f7ff f9da 	bl	8007748 <HAL_GetTick>
 8008394:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008396:	e008      	b.n	80083aa <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008398:	f7ff f9d6 	bl	8007748 <HAL_GetTick>
 800839c:	4602      	mov	r2, r0
 800839e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083a0:	1ad3      	subs	r3, r2, r3
 80083a2:	2b02      	cmp	r3, #2
 80083a4:	d901      	bls.n	80083aa <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80083a6:	2303      	movs	r3, #3
 80083a8:	e21a      	b.n	80087e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80083aa:	4b22      	ldr	r3, [pc, #136]	@ (8008434 <HAL_RCC_OscConfig+0x4f8>)
 80083ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80083ae:	f003 0302 	and.w	r3, r3, #2
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d0f0      	beq.n	8008398 <HAL_RCC_OscConfig+0x45c>
 80083b6:	e018      	b.n	80083ea <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80083b8:	4b1e      	ldr	r3, [pc, #120]	@ (8008434 <HAL_RCC_OscConfig+0x4f8>)
 80083ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80083bc:	4a1d      	ldr	r2, [pc, #116]	@ (8008434 <HAL_RCC_OscConfig+0x4f8>)
 80083be:	f023 0301 	bic.w	r3, r3, #1
 80083c2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083c4:	f7ff f9c0 	bl	8007748 <HAL_GetTick>
 80083c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80083ca:	e008      	b.n	80083de <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80083cc:	f7ff f9bc 	bl	8007748 <HAL_GetTick>
 80083d0:	4602      	mov	r2, r0
 80083d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083d4:	1ad3      	subs	r3, r2, r3
 80083d6:	2b02      	cmp	r3, #2
 80083d8:	d901      	bls.n	80083de <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80083da:	2303      	movs	r3, #3
 80083dc:	e200      	b.n	80087e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80083de:	4b15      	ldr	r3, [pc, #84]	@ (8008434 <HAL_RCC_OscConfig+0x4f8>)
 80083e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80083e2:	f003 0302 	and.w	r3, r3, #2
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d1f0      	bne.n	80083cc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f003 0320 	and.w	r3, r3, #32
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d039      	beq.n	800846a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	699b      	ldr	r3, [r3, #24]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d01c      	beq.n	8008438 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80083fe:	4b0d      	ldr	r3, [pc, #52]	@ (8008434 <HAL_RCC_OscConfig+0x4f8>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4a0c      	ldr	r2, [pc, #48]	@ (8008434 <HAL_RCC_OscConfig+0x4f8>)
 8008404:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008408:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800840a:	f7ff f99d 	bl	8007748 <HAL_GetTick>
 800840e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008410:	e008      	b.n	8008424 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008412:	f7ff f999 	bl	8007748 <HAL_GetTick>
 8008416:	4602      	mov	r2, r0
 8008418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800841a:	1ad3      	subs	r3, r2, r3
 800841c:	2b02      	cmp	r3, #2
 800841e:	d901      	bls.n	8008424 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008420:	2303      	movs	r3, #3
 8008422:	e1dd      	b.n	80087e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008424:	4b03      	ldr	r3, [pc, #12]	@ (8008434 <HAL_RCC_OscConfig+0x4f8>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800842c:	2b00      	cmp	r3, #0
 800842e:	d0f0      	beq.n	8008412 <HAL_RCC_OscConfig+0x4d6>
 8008430:	e01b      	b.n	800846a <HAL_RCC_OscConfig+0x52e>
 8008432:	bf00      	nop
 8008434:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008438:	4b9b      	ldr	r3, [pc, #620]	@ (80086a8 <HAL_RCC_OscConfig+0x76c>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a9a      	ldr	r2, [pc, #616]	@ (80086a8 <HAL_RCC_OscConfig+0x76c>)
 800843e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008442:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008444:	f7ff f980 	bl	8007748 <HAL_GetTick>
 8008448:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800844a:	e008      	b.n	800845e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800844c:	f7ff f97c 	bl	8007748 <HAL_GetTick>
 8008450:	4602      	mov	r2, r0
 8008452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008454:	1ad3      	subs	r3, r2, r3
 8008456:	2b02      	cmp	r3, #2
 8008458:	d901      	bls.n	800845e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800845a:	2303      	movs	r3, #3
 800845c:	e1c0      	b.n	80087e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800845e:	4b92      	ldr	r3, [pc, #584]	@ (80086a8 <HAL_RCC_OscConfig+0x76c>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008466:	2b00      	cmp	r3, #0
 8008468:	d1f0      	bne.n	800844c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f003 0304 	and.w	r3, r3, #4
 8008472:	2b00      	cmp	r3, #0
 8008474:	f000 8081 	beq.w	800857a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008478:	4b8c      	ldr	r3, [pc, #560]	@ (80086ac <HAL_RCC_OscConfig+0x770>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a8b      	ldr	r2, [pc, #556]	@ (80086ac <HAL_RCC_OscConfig+0x770>)
 800847e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008482:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008484:	f7ff f960 	bl	8007748 <HAL_GetTick>
 8008488:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800848a:	e008      	b.n	800849e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800848c:	f7ff f95c 	bl	8007748 <HAL_GetTick>
 8008490:	4602      	mov	r2, r0
 8008492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008494:	1ad3      	subs	r3, r2, r3
 8008496:	2b64      	cmp	r3, #100	@ 0x64
 8008498:	d901      	bls.n	800849e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800849a:	2303      	movs	r3, #3
 800849c:	e1a0      	b.n	80087e0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800849e:	4b83      	ldr	r3, [pc, #524]	@ (80086ac <HAL_RCC_OscConfig+0x770>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d0f0      	beq.n	800848c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	689b      	ldr	r3, [r3, #8]
 80084ae:	2b01      	cmp	r3, #1
 80084b0:	d106      	bne.n	80084c0 <HAL_RCC_OscConfig+0x584>
 80084b2:	4b7d      	ldr	r3, [pc, #500]	@ (80086a8 <HAL_RCC_OscConfig+0x76c>)
 80084b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084b6:	4a7c      	ldr	r2, [pc, #496]	@ (80086a8 <HAL_RCC_OscConfig+0x76c>)
 80084b8:	f043 0301 	orr.w	r3, r3, #1
 80084bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80084be:	e02d      	b.n	800851c <HAL_RCC_OscConfig+0x5e0>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	689b      	ldr	r3, [r3, #8]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d10c      	bne.n	80084e2 <HAL_RCC_OscConfig+0x5a6>
 80084c8:	4b77      	ldr	r3, [pc, #476]	@ (80086a8 <HAL_RCC_OscConfig+0x76c>)
 80084ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084cc:	4a76      	ldr	r2, [pc, #472]	@ (80086a8 <HAL_RCC_OscConfig+0x76c>)
 80084ce:	f023 0301 	bic.w	r3, r3, #1
 80084d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80084d4:	4b74      	ldr	r3, [pc, #464]	@ (80086a8 <HAL_RCC_OscConfig+0x76c>)
 80084d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084d8:	4a73      	ldr	r2, [pc, #460]	@ (80086a8 <HAL_RCC_OscConfig+0x76c>)
 80084da:	f023 0304 	bic.w	r3, r3, #4
 80084de:	6713      	str	r3, [r2, #112]	@ 0x70
 80084e0:	e01c      	b.n	800851c <HAL_RCC_OscConfig+0x5e0>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	689b      	ldr	r3, [r3, #8]
 80084e6:	2b05      	cmp	r3, #5
 80084e8:	d10c      	bne.n	8008504 <HAL_RCC_OscConfig+0x5c8>
 80084ea:	4b6f      	ldr	r3, [pc, #444]	@ (80086a8 <HAL_RCC_OscConfig+0x76c>)
 80084ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084ee:	4a6e      	ldr	r2, [pc, #440]	@ (80086a8 <HAL_RCC_OscConfig+0x76c>)
 80084f0:	f043 0304 	orr.w	r3, r3, #4
 80084f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80084f6:	4b6c      	ldr	r3, [pc, #432]	@ (80086a8 <HAL_RCC_OscConfig+0x76c>)
 80084f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084fa:	4a6b      	ldr	r2, [pc, #428]	@ (80086a8 <HAL_RCC_OscConfig+0x76c>)
 80084fc:	f043 0301 	orr.w	r3, r3, #1
 8008500:	6713      	str	r3, [r2, #112]	@ 0x70
 8008502:	e00b      	b.n	800851c <HAL_RCC_OscConfig+0x5e0>
 8008504:	4b68      	ldr	r3, [pc, #416]	@ (80086a8 <HAL_RCC_OscConfig+0x76c>)
 8008506:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008508:	4a67      	ldr	r2, [pc, #412]	@ (80086a8 <HAL_RCC_OscConfig+0x76c>)
 800850a:	f023 0301 	bic.w	r3, r3, #1
 800850e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008510:	4b65      	ldr	r3, [pc, #404]	@ (80086a8 <HAL_RCC_OscConfig+0x76c>)
 8008512:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008514:	4a64      	ldr	r2, [pc, #400]	@ (80086a8 <HAL_RCC_OscConfig+0x76c>)
 8008516:	f023 0304 	bic.w	r3, r3, #4
 800851a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	689b      	ldr	r3, [r3, #8]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d015      	beq.n	8008550 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008524:	f7ff f910 	bl	8007748 <HAL_GetTick>
 8008528:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800852a:	e00a      	b.n	8008542 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800852c:	f7ff f90c 	bl	8007748 <HAL_GetTick>
 8008530:	4602      	mov	r2, r0
 8008532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008534:	1ad3      	subs	r3, r2, r3
 8008536:	f241 3288 	movw	r2, #5000	@ 0x1388
 800853a:	4293      	cmp	r3, r2
 800853c:	d901      	bls.n	8008542 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800853e:	2303      	movs	r3, #3
 8008540:	e14e      	b.n	80087e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008542:	4b59      	ldr	r3, [pc, #356]	@ (80086a8 <HAL_RCC_OscConfig+0x76c>)
 8008544:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008546:	f003 0302 	and.w	r3, r3, #2
 800854a:	2b00      	cmp	r3, #0
 800854c:	d0ee      	beq.n	800852c <HAL_RCC_OscConfig+0x5f0>
 800854e:	e014      	b.n	800857a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008550:	f7ff f8fa 	bl	8007748 <HAL_GetTick>
 8008554:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008556:	e00a      	b.n	800856e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008558:	f7ff f8f6 	bl	8007748 <HAL_GetTick>
 800855c:	4602      	mov	r2, r0
 800855e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008560:	1ad3      	subs	r3, r2, r3
 8008562:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008566:	4293      	cmp	r3, r2
 8008568:	d901      	bls.n	800856e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800856a:	2303      	movs	r3, #3
 800856c:	e138      	b.n	80087e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800856e:	4b4e      	ldr	r3, [pc, #312]	@ (80086a8 <HAL_RCC_OscConfig+0x76c>)
 8008570:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008572:	f003 0302 	and.w	r3, r3, #2
 8008576:	2b00      	cmp	r3, #0
 8008578:	d1ee      	bne.n	8008558 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800857e:	2b00      	cmp	r3, #0
 8008580:	f000 812d 	beq.w	80087de <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008584:	4b48      	ldr	r3, [pc, #288]	@ (80086a8 <HAL_RCC_OscConfig+0x76c>)
 8008586:	691b      	ldr	r3, [r3, #16]
 8008588:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800858c:	2b18      	cmp	r3, #24
 800858e:	f000 80bd 	beq.w	800870c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008596:	2b02      	cmp	r3, #2
 8008598:	f040 809e 	bne.w	80086d8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800859c:	4b42      	ldr	r3, [pc, #264]	@ (80086a8 <HAL_RCC_OscConfig+0x76c>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a41      	ldr	r2, [pc, #260]	@ (80086a8 <HAL_RCC_OscConfig+0x76c>)
 80085a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80085a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085a8:	f7ff f8ce 	bl	8007748 <HAL_GetTick>
 80085ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80085ae:	e008      	b.n	80085c2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80085b0:	f7ff f8ca 	bl	8007748 <HAL_GetTick>
 80085b4:	4602      	mov	r2, r0
 80085b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085b8:	1ad3      	subs	r3, r2, r3
 80085ba:	2b02      	cmp	r3, #2
 80085bc:	d901      	bls.n	80085c2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80085be:	2303      	movs	r3, #3
 80085c0:	e10e      	b.n	80087e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80085c2:	4b39      	ldr	r3, [pc, #228]	@ (80086a8 <HAL_RCC_OscConfig+0x76c>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d1f0      	bne.n	80085b0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80085ce:	4b36      	ldr	r3, [pc, #216]	@ (80086a8 <HAL_RCC_OscConfig+0x76c>)
 80085d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80085d2:	4b37      	ldr	r3, [pc, #220]	@ (80086b0 <HAL_RCC_OscConfig+0x774>)
 80085d4:	4013      	ands	r3, r2
 80085d6:	687a      	ldr	r2, [r7, #4]
 80085d8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80085da:	687a      	ldr	r2, [r7, #4]
 80085dc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80085de:	0112      	lsls	r2, r2, #4
 80085e0:	430a      	orrs	r2, r1
 80085e2:	4931      	ldr	r1, [pc, #196]	@ (80086a8 <HAL_RCC_OscConfig+0x76c>)
 80085e4:	4313      	orrs	r3, r2
 80085e6:	628b      	str	r3, [r1, #40]	@ 0x28
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085ec:	3b01      	subs	r3, #1
 80085ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085f6:	3b01      	subs	r3, #1
 80085f8:	025b      	lsls	r3, r3, #9
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	431a      	orrs	r2, r3
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008602:	3b01      	subs	r3, #1
 8008604:	041b      	lsls	r3, r3, #16
 8008606:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800860a:	431a      	orrs	r2, r3
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008610:	3b01      	subs	r3, #1
 8008612:	061b      	lsls	r3, r3, #24
 8008614:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008618:	4923      	ldr	r1, [pc, #140]	@ (80086a8 <HAL_RCC_OscConfig+0x76c>)
 800861a:	4313      	orrs	r3, r2
 800861c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800861e:	4b22      	ldr	r3, [pc, #136]	@ (80086a8 <HAL_RCC_OscConfig+0x76c>)
 8008620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008622:	4a21      	ldr	r2, [pc, #132]	@ (80086a8 <HAL_RCC_OscConfig+0x76c>)
 8008624:	f023 0301 	bic.w	r3, r3, #1
 8008628:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800862a:	4b1f      	ldr	r3, [pc, #124]	@ (80086a8 <HAL_RCC_OscConfig+0x76c>)
 800862c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800862e:	4b21      	ldr	r3, [pc, #132]	@ (80086b4 <HAL_RCC_OscConfig+0x778>)
 8008630:	4013      	ands	r3, r2
 8008632:	687a      	ldr	r2, [r7, #4]
 8008634:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008636:	00d2      	lsls	r2, r2, #3
 8008638:	491b      	ldr	r1, [pc, #108]	@ (80086a8 <HAL_RCC_OscConfig+0x76c>)
 800863a:	4313      	orrs	r3, r2
 800863c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800863e:	4b1a      	ldr	r3, [pc, #104]	@ (80086a8 <HAL_RCC_OscConfig+0x76c>)
 8008640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008642:	f023 020c 	bic.w	r2, r3, #12
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800864a:	4917      	ldr	r1, [pc, #92]	@ (80086a8 <HAL_RCC_OscConfig+0x76c>)
 800864c:	4313      	orrs	r3, r2
 800864e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008650:	4b15      	ldr	r3, [pc, #84]	@ (80086a8 <HAL_RCC_OscConfig+0x76c>)
 8008652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008654:	f023 0202 	bic.w	r2, r3, #2
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800865c:	4912      	ldr	r1, [pc, #72]	@ (80086a8 <HAL_RCC_OscConfig+0x76c>)
 800865e:	4313      	orrs	r3, r2
 8008660:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008662:	4b11      	ldr	r3, [pc, #68]	@ (80086a8 <HAL_RCC_OscConfig+0x76c>)
 8008664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008666:	4a10      	ldr	r2, [pc, #64]	@ (80086a8 <HAL_RCC_OscConfig+0x76c>)
 8008668:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800866c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800866e:	4b0e      	ldr	r3, [pc, #56]	@ (80086a8 <HAL_RCC_OscConfig+0x76c>)
 8008670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008672:	4a0d      	ldr	r2, [pc, #52]	@ (80086a8 <HAL_RCC_OscConfig+0x76c>)
 8008674:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008678:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800867a:	4b0b      	ldr	r3, [pc, #44]	@ (80086a8 <HAL_RCC_OscConfig+0x76c>)
 800867c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800867e:	4a0a      	ldr	r2, [pc, #40]	@ (80086a8 <HAL_RCC_OscConfig+0x76c>)
 8008680:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008684:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008686:	4b08      	ldr	r3, [pc, #32]	@ (80086a8 <HAL_RCC_OscConfig+0x76c>)
 8008688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800868a:	4a07      	ldr	r2, [pc, #28]	@ (80086a8 <HAL_RCC_OscConfig+0x76c>)
 800868c:	f043 0301 	orr.w	r3, r3, #1
 8008690:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008692:	4b05      	ldr	r3, [pc, #20]	@ (80086a8 <HAL_RCC_OscConfig+0x76c>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a04      	ldr	r2, [pc, #16]	@ (80086a8 <HAL_RCC_OscConfig+0x76c>)
 8008698:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800869c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800869e:	f7ff f853 	bl	8007748 <HAL_GetTick>
 80086a2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80086a4:	e011      	b.n	80086ca <HAL_RCC_OscConfig+0x78e>
 80086a6:	bf00      	nop
 80086a8:	58024400 	.word	0x58024400
 80086ac:	58024800 	.word	0x58024800
 80086b0:	fffffc0c 	.word	0xfffffc0c
 80086b4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80086b8:	f7ff f846 	bl	8007748 <HAL_GetTick>
 80086bc:	4602      	mov	r2, r0
 80086be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086c0:	1ad3      	subs	r3, r2, r3
 80086c2:	2b02      	cmp	r3, #2
 80086c4:	d901      	bls.n	80086ca <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80086c6:	2303      	movs	r3, #3
 80086c8:	e08a      	b.n	80087e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80086ca:	4b47      	ldr	r3, [pc, #284]	@ (80087e8 <HAL_RCC_OscConfig+0x8ac>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d0f0      	beq.n	80086b8 <HAL_RCC_OscConfig+0x77c>
 80086d6:	e082      	b.n	80087de <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80086d8:	4b43      	ldr	r3, [pc, #268]	@ (80087e8 <HAL_RCC_OscConfig+0x8ac>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a42      	ldr	r2, [pc, #264]	@ (80087e8 <HAL_RCC_OscConfig+0x8ac>)
 80086de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80086e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086e4:	f7ff f830 	bl	8007748 <HAL_GetTick>
 80086e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80086ea:	e008      	b.n	80086fe <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80086ec:	f7ff f82c 	bl	8007748 <HAL_GetTick>
 80086f0:	4602      	mov	r2, r0
 80086f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086f4:	1ad3      	subs	r3, r2, r3
 80086f6:	2b02      	cmp	r3, #2
 80086f8:	d901      	bls.n	80086fe <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80086fa:	2303      	movs	r3, #3
 80086fc:	e070      	b.n	80087e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80086fe:	4b3a      	ldr	r3, [pc, #232]	@ (80087e8 <HAL_RCC_OscConfig+0x8ac>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008706:	2b00      	cmp	r3, #0
 8008708:	d1f0      	bne.n	80086ec <HAL_RCC_OscConfig+0x7b0>
 800870a:	e068      	b.n	80087de <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800870c:	4b36      	ldr	r3, [pc, #216]	@ (80087e8 <HAL_RCC_OscConfig+0x8ac>)
 800870e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008710:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008712:	4b35      	ldr	r3, [pc, #212]	@ (80087e8 <HAL_RCC_OscConfig+0x8ac>)
 8008714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008716:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800871c:	2b01      	cmp	r3, #1
 800871e:	d031      	beq.n	8008784 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	f003 0203 	and.w	r2, r3, #3
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800872a:	429a      	cmp	r2, r3
 800872c:	d12a      	bne.n	8008784 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	091b      	lsrs	r3, r3, #4
 8008732:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800873a:	429a      	cmp	r2, r3
 800873c:	d122      	bne.n	8008784 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008748:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800874a:	429a      	cmp	r2, r3
 800874c:	d11a      	bne.n	8008784 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	0a5b      	lsrs	r3, r3, #9
 8008752:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800875a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800875c:	429a      	cmp	r2, r3
 800875e:	d111      	bne.n	8008784 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	0c1b      	lsrs	r3, r3, #16
 8008764:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800876c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800876e:	429a      	cmp	r2, r3
 8008770:	d108      	bne.n	8008784 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	0e1b      	lsrs	r3, r3, #24
 8008776:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800877e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008780:	429a      	cmp	r2, r3
 8008782:	d001      	beq.n	8008788 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008784:	2301      	movs	r3, #1
 8008786:	e02b      	b.n	80087e0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008788:	4b17      	ldr	r3, [pc, #92]	@ (80087e8 <HAL_RCC_OscConfig+0x8ac>)
 800878a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800878c:	08db      	lsrs	r3, r3, #3
 800878e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008792:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008798:	693a      	ldr	r2, [r7, #16]
 800879a:	429a      	cmp	r2, r3
 800879c:	d01f      	beq.n	80087de <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800879e:	4b12      	ldr	r3, [pc, #72]	@ (80087e8 <HAL_RCC_OscConfig+0x8ac>)
 80087a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087a2:	4a11      	ldr	r2, [pc, #68]	@ (80087e8 <HAL_RCC_OscConfig+0x8ac>)
 80087a4:	f023 0301 	bic.w	r3, r3, #1
 80087a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80087aa:	f7fe ffcd 	bl	8007748 <HAL_GetTick>
 80087ae:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80087b0:	bf00      	nop
 80087b2:	f7fe ffc9 	bl	8007748 <HAL_GetTick>
 80087b6:	4602      	mov	r2, r0
 80087b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d0f9      	beq.n	80087b2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80087be:	4b0a      	ldr	r3, [pc, #40]	@ (80087e8 <HAL_RCC_OscConfig+0x8ac>)
 80087c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80087c2:	4b0a      	ldr	r3, [pc, #40]	@ (80087ec <HAL_RCC_OscConfig+0x8b0>)
 80087c4:	4013      	ands	r3, r2
 80087c6:	687a      	ldr	r2, [r7, #4]
 80087c8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80087ca:	00d2      	lsls	r2, r2, #3
 80087cc:	4906      	ldr	r1, [pc, #24]	@ (80087e8 <HAL_RCC_OscConfig+0x8ac>)
 80087ce:	4313      	orrs	r3, r2
 80087d0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80087d2:	4b05      	ldr	r3, [pc, #20]	@ (80087e8 <HAL_RCC_OscConfig+0x8ac>)
 80087d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087d6:	4a04      	ldr	r2, [pc, #16]	@ (80087e8 <HAL_RCC_OscConfig+0x8ac>)
 80087d8:	f043 0301 	orr.w	r3, r3, #1
 80087dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80087de:	2300      	movs	r3, #0
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3730      	adds	r7, #48	@ 0x30
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}
 80087e8:	58024400 	.word	0x58024400
 80087ec:	ffff0007 	.word	0xffff0007

080087f0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b086      	sub	sp, #24
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d101      	bne.n	8008804 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008800:	2301      	movs	r3, #1
 8008802:	e19c      	b.n	8008b3e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008804:	4b8a      	ldr	r3, [pc, #552]	@ (8008a30 <HAL_RCC_ClockConfig+0x240>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f003 030f 	and.w	r3, r3, #15
 800880c:	683a      	ldr	r2, [r7, #0]
 800880e:	429a      	cmp	r2, r3
 8008810:	d910      	bls.n	8008834 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008812:	4b87      	ldr	r3, [pc, #540]	@ (8008a30 <HAL_RCC_ClockConfig+0x240>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f023 020f 	bic.w	r2, r3, #15
 800881a:	4985      	ldr	r1, [pc, #532]	@ (8008a30 <HAL_RCC_ClockConfig+0x240>)
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	4313      	orrs	r3, r2
 8008820:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008822:	4b83      	ldr	r3, [pc, #524]	@ (8008a30 <HAL_RCC_ClockConfig+0x240>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f003 030f 	and.w	r3, r3, #15
 800882a:	683a      	ldr	r2, [r7, #0]
 800882c:	429a      	cmp	r2, r3
 800882e:	d001      	beq.n	8008834 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008830:	2301      	movs	r3, #1
 8008832:	e184      	b.n	8008b3e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f003 0304 	and.w	r3, r3, #4
 800883c:	2b00      	cmp	r3, #0
 800883e:	d010      	beq.n	8008862 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	691a      	ldr	r2, [r3, #16]
 8008844:	4b7b      	ldr	r3, [pc, #492]	@ (8008a34 <HAL_RCC_ClockConfig+0x244>)
 8008846:	699b      	ldr	r3, [r3, #24]
 8008848:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800884c:	429a      	cmp	r2, r3
 800884e:	d908      	bls.n	8008862 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008850:	4b78      	ldr	r3, [pc, #480]	@ (8008a34 <HAL_RCC_ClockConfig+0x244>)
 8008852:	699b      	ldr	r3, [r3, #24]
 8008854:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	691b      	ldr	r3, [r3, #16]
 800885c:	4975      	ldr	r1, [pc, #468]	@ (8008a34 <HAL_RCC_ClockConfig+0x244>)
 800885e:	4313      	orrs	r3, r2
 8008860:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f003 0308 	and.w	r3, r3, #8
 800886a:	2b00      	cmp	r3, #0
 800886c:	d010      	beq.n	8008890 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	695a      	ldr	r2, [r3, #20]
 8008872:	4b70      	ldr	r3, [pc, #448]	@ (8008a34 <HAL_RCC_ClockConfig+0x244>)
 8008874:	69db      	ldr	r3, [r3, #28]
 8008876:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800887a:	429a      	cmp	r2, r3
 800887c:	d908      	bls.n	8008890 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800887e:	4b6d      	ldr	r3, [pc, #436]	@ (8008a34 <HAL_RCC_ClockConfig+0x244>)
 8008880:	69db      	ldr	r3, [r3, #28]
 8008882:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	695b      	ldr	r3, [r3, #20]
 800888a:	496a      	ldr	r1, [pc, #424]	@ (8008a34 <HAL_RCC_ClockConfig+0x244>)
 800888c:	4313      	orrs	r3, r2
 800888e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f003 0310 	and.w	r3, r3, #16
 8008898:	2b00      	cmp	r3, #0
 800889a:	d010      	beq.n	80088be <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	699a      	ldr	r2, [r3, #24]
 80088a0:	4b64      	ldr	r3, [pc, #400]	@ (8008a34 <HAL_RCC_ClockConfig+0x244>)
 80088a2:	69db      	ldr	r3, [r3, #28]
 80088a4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d908      	bls.n	80088be <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80088ac:	4b61      	ldr	r3, [pc, #388]	@ (8008a34 <HAL_RCC_ClockConfig+0x244>)
 80088ae:	69db      	ldr	r3, [r3, #28]
 80088b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	699b      	ldr	r3, [r3, #24]
 80088b8:	495e      	ldr	r1, [pc, #376]	@ (8008a34 <HAL_RCC_ClockConfig+0x244>)
 80088ba:	4313      	orrs	r3, r2
 80088bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f003 0320 	and.w	r3, r3, #32
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d010      	beq.n	80088ec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	69da      	ldr	r2, [r3, #28]
 80088ce:	4b59      	ldr	r3, [pc, #356]	@ (8008a34 <HAL_RCC_ClockConfig+0x244>)
 80088d0:	6a1b      	ldr	r3, [r3, #32]
 80088d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80088d6:	429a      	cmp	r2, r3
 80088d8:	d908      	bls.n	80088ec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80088da:	4b56      	ldr	r3, [pc, #344]	@ (8008a34 <HAL_RCC_ClockConfig+0x244>)
 80088dc:	6a1b      	ldr	r3, [r3, #32]
 80088de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	69db      	ldr	r3, [r3, #28]
 80088e6:	4953      	ldr	r1, [pc, #332]	@ (8008a34 <HAL_RCC_ClockConfig+0x244>)
 80088e8:	4313      	orrs	r3, r2
 80088ea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f003 0302 	and.w	r3, r3, #2
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d010      	beq.n	800891a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	68da      	ldr	r2, [r3, #12]
 80088fc:	4b4d      	ldr	r3, [pc, #308]	@ (8008a34 <HAL_RCC_ClockConfig+0x244>)
 80088fe:	699b      	ldr	r3, [r3, #24]
 8008900:	f003 030f 	and.w	r3, r3, #15
 8008904:	429a      	cmp	r2, r3
 8008906:	d908      	bls.n	800891a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008908:	4b4a      	ldr	r3, [pc, #296]	@ (8008a34 <HAL_RCC_ClockConfig+0x244>)
 800890a:	699b      	ldr	r3, [r3, #24]
 800890c:	f023 020f 	bic.w	r2, r3, #15
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	68db      	ldr	r3, [r3, #12]
 8008914:	4947      	ldr	r1, [pc, #284]	@ (8008a34 <HAL_RCC_ClockConfig+0x244>)
 8008916:	4313      	orrs	r3, r2
 8008918:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f003 0301 	and.w	r3, r3, #1
 8008922:	2b00      	cmp	r3, #0
 8008924:	d055      	beq.n	80089d2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008926:	4b43      	ldr	r3, [pc, #268]	@ (8008a34 <HAL_RCC_ClockConfig+0x244>)
 8008928:	699b      	ldr	r3, [r3, #24]
 800892a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	689b      	ldr	r3, [r3, #8]
 8008932:	4940      	ldr	r1, [pc, #256]	@ (8008a34 <HAL_RCC_ClockConfig+0x244>)
 8008934:	4313      	orrs	r3, r2
 8008936:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	2b02      	cmp	r3, #2
 800893e:	d107      	bne.n	8008950 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008940:	4b3c      	ldr	r3, [pc, #240]	@ (8008a34 <HAL_RCC_ClockConfig+0x244>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008948:	2b00      	cmp	r3, #0
 800894a:	d121      	bne.n	8008990 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800894c:	2301      	movs	r3, #1
 800894e:	e0f6      	b.n	8008b3e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	685b      	ldr	r3, [r3, #4]
 8008954:	2b03      	cmp	r3, #3
 8008956:	d107      	bne.n	8008968 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008958:	4b36      	ldr	r3, [pc, #216]	@ (8008a34 <HAL_RCC_ClockConfig+0x244>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008960:	2b00      	cmp	r3, #0
 8008962:	d115      	bne.n	8008990 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008964:	2301      	movs	r3, #1
 8008966:	e0ea      	b.n	8008b3e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	2b01      	cmp	r3, #1
 800896e:	d107      	bne.n	8008980 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008970:	4b30      	ldr	r3, [pc, #192]	@ (8008a34 <HAL_RCC_ClockConfig+0x244>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008978:	2b00      	cmp	r3, #0
 800897a:	d109      	bne.n	8008990 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800897c:	2301      	movs	r3, #1
 800897e:	e0de      	b.n	8008b3e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008980:	4b2c      	ldr	r3, [pc, #176]	@ (8008a34 <HAL_RCC_ClockConfig+0x244>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f003 0304 	and.w	r3, r3, #4
 8008988:	2b00      	cmp	r3, #0
 800898a:	d101      	bne.n	8008990 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800898c:	2301      	movs	r3, #1
 800898e:	e0d6      	b.n	8008b3e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008990:	4b28      	ldr	r3, [pc, #160]	@ (8008a34 <HAL_RCC_ClockConfig+0x244>)
 8008992:	691b      	ldr	r3, [r3, #16]
 8008994:	f023 0207 	bic.w	r2, r3, #7
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	4925      	ldr	r1, [pc, #148]	@ (8008a34 <HAL_RCC_ClockConfig+0x244>)
 800899e:	4313      	orrs	r3, r2
 80089a0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089a2:	f7fe fed1 	bl	8007748 <HAL_GetTick>
 80089a6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089a8:	e00a      	b.n	80089c0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80089aa:	f7fe fecd 	bl	8007748 <HAL_GetTick>
 80089ae:	4602      	mov	r2, r0
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	1ad3      	subs	r3, r2, r3
 80089b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d901      	bls.n	80089c0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80089bc:	2303      	movs	r3, #3
 80089be:	e0be      	b.n	8008b3e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089c0:	4b1c      	ldr	r3, [pc, #112]	@ (8008a34 <HAL_RCC_ClockConfig+0x244>)
 80089c2:	691b      	ldr	r3, [r3, #16]
 80089c4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	00db      	lsls	r3, r3, #3
 80089ce:	429a      	cmp	r2, r3
 80089d0:	d1eb      	bne.n	80089aa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f003 0302 	and.w	r3, r3, #2
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d010      	beq.n	8008a00 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	68da      	ldr	r2, [r3, #12]
 80089e2:	4b14      	ldr	r3, [pc, #80]	@ (8008a34 <HAL_RCC_ClockConfig+0x244>)
 80089e4:	699b      	ldr	r3, [r3, #24]
 80089e6:	f003 030f 	and.w	r3, r3, #15
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d208      	bcs.n	8008a00 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80089ee:	4b11      	ldr	r3, [pc, #68]	@ (8008a34 <HAL_RCC_ClockConfig+0x244>)
 80089f0:	699b      	ldr	r3, [r3, #24]
 80089f2:	f023 020f 	bic.w	r2, r3, #15
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	68db      	ldr	r3, [r3, #12]
 80089fa:	490e      	ldr	r1, [pc, #56]	@ (8008a34 <HAL_RCC_ClockConfig+0x244>)
 80089fc:	4313      	orrs	r3, r2
 80089fe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008a00:	4b0b      	ldr	r3, [pc, #44]	@ (8008a30 <HAL_RCC_ClockConfig+0x240>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f003 030f 	and.w	r3, r3, #15
 8008a08:	683a      	ldr	r2, [r7, #0]
 8008a0a:	429a      	cmp	r2, r3
 8008a0c:	d214      	bcs.n	8008a38 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a0e:	4b08      	ldr	r3, [pc, #32]	@ (8008a30 <HAL_RCC_ClockConfig+0x240>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f023 020f 	bic.w	r2, r3, #15
 8008a16:	4906      	ldr	r1, [pc, #24]	@ (8008a30 <HAL_RCC_ClockConfig+0x240>)
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a1e:	4b04      	ldr	r3, [pc, #16]	@ (8008a30 <HAL_RCC_ClockConfig+0x240>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f003 030f 	and.w	r3, r3, #15
 8008a26:	683a      	ldr	r2, [r7, #0]
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d005      	beq.n	8008a38 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	e086      	b.n	8008b3e <HAL_RCC_ClockConfig+0x34e>
 8008a30:	52002000 	.word	0x52002000
 8008a34:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f003 0304 	and.w	r3, r3, #4
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d010      	beq.n	8008a66 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	691a      	ldr	r2, [r3, #16]
 8008a48:	4b3f      	ldr	r3, [pc, #252]	@ (8008b48 <HAL_RCC_ClockConfig+0x358>)
 8008a4a:	699b      	ldr	r3, [r3, #24]
 8008a4c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008a50:	429a      	cmp	r2, r3
 8008a52:	d208      	bcs.n	8008a66 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008a54:	4b3c      	ldr	r3, [pc, #240]	@ (8008b48 <HAL_RCC_ClockConfig+0x358>)
 8008a56:	699b      	ldr	r3, [r3, #24]
 8008a58:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	691b      	ldr	r3, [r3, #16]
 8008a60:	4939      	ldr	r1, [pc, #228]	@ (8008b48 <HAL_RCC_ClockConfig+0x358>)
 8008a62:	4313      	orrs	r3, r2
 8008a64:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f003 0308 	and.w	r3, r3, #8
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d010      	beq.n	8008a94 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	695a      	ldr	r2, [r3, #20]
 8008a76:	4b34      	ldr	r3, [pc, #208]	@ (8008b48 <HAL_RCC_ClockConfig+0x358>)
 8008a78:	69db      	ldr	r3, [r3, #28]
 8008a7a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008a7e:	429a      	cmp	r2, r3
 8008a80:	d208      	bcs.n	8008a94 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008a82:	4b31      	ldr	r3, [pc, #196]	@ (8008b48 <HAL_RCC_ClockConfig+0x358>)
 8008a84:	69db      	ldr	r3, [r3, #28]
 8008a86:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	695b      	ldr	r3, [r3, #20]
 8008a8e:	492e      	ldr	r1, [pc, #184]	@ (8008b48 <HAL_RCC_ClockConfig+0x358>)
 8008a90:	4313      	orrs	r3, r2
 8008a92:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f003 0310 	and.w	r3, r3, #16
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d010      	beq.n	8008ac2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	699a      	ldr	r2, [r3, #24]
 8008aa4:	4b28      	ldr	r3, [pc, #160]	@ (8008b48 <HAL_RCC_ClockConfig+0x358>)
 8008aa6:	69db      	ldr	r3, [r3, #28]
 8008aa8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008aac:	429a      	cmp	r2, r3
 8008aae:	d208      	bcs.n	8008ac2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008ab0:	4b25      	ldr	r3, [pc, #148]	@ (8008b48 <HAL_RCC_ClockConfig+0x358>)
 8008ab2:	69db      	ldr	r3, [r3, #28]
 8008ab4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	699b      	ldr	r3, [r3, #24]
 8008abc:	4922      	ldr	r1, [pc, #136]	@ (8008b48 <HAL_RCC_ClockConfig+0x358>)
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f003 0320 	and.w	r3, r3, #32
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d010      	beq.n	8008af0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	69da      	ldr	r2, [r3, #28]
 8008ad2:	4b1d      	ldr	r3, [pc, #116]	@ (8008b48 <HAL_RCC_ClockConfig+0x358>)
 8008ad4:	6a1b      	ldr	r3, [r3, #32]
 8008ad6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008ada:	429a      	cmp	r2, r3
 8008adc:	d208      	bcs.n	8008af0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008ade:	4b1a      	ldr	r3, [pc, #104]	@ (8008b48 <HAL_RCC_ClockConfig+0x358>)
 8008ae0:	6a1b      	ldr	r3, [r3, #32]
 8008ae2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	69db      	ldr	r3, [r3, #28]
 8008aea:	4917      	ldr	r1, [pc, #92]	@ (8008b48 <HAL_RCC_ClockConfig+0x358>)
 8008aec:	4313      	orrs	r3, r2
 8008aee:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008af0:	f000 f834 	bl	8008b5c <HAL_RCC_GetSysClockFreq>
 8008af4:	4602      	mov	r2, r0
 8008af6:	4b14      	ldr	r3, [pc, #80]	@ (8008b48 <HAL_RCC_ClockConfig+0x358>)
 8008af8:	699b      	ldr	r3, [r3, #24]
 8008afa:	0a1b      	lsrs	r3, r3, #8
 8008afc:	f003 030f 	and.w	r3, r3, #15
 8008b00:	4912      	ldr	r1, [pc, #72]	@ (8008b4c <HAL_RCC_ClockConfig+0x35c>)
 8008b02:	5ccb      	ldrb	r3, [r1, r3]
 8008b04:	f003 031f 	and.w	r3, r3, #31
 8008b08:	fa22 f303 	lsr.w	r3, r2, r3
 8008b0c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8008b48 <HAL_RCC_ClockConfig+0x358>)
 8008b10:	699b      	ldr	r3, [r3, #24]
 8008b12:	f003 030f 	and.w	r3, r3, #15
 8008b16:	4a0d      	ldr	r2, [pc, #52]	@ (8008b4c <HAL_RCC_ClockConfig+0x35c>)
 8008b18:	5cd3      	ldrb	r3, [r2, r3]
 8008b1a:	f003 031f 	and.w	r3, r3, #31
 8008b1e:	693a      	ldr	r2, [r7, #16]
 8008b20:	fa22 f303 	lsr.w	r3, r2, r3
 8008b24:	4a0a      	ldr	r2, [pc, #40]	@ (8008b50 <HAL_RCC_ClockConfig+0x360>)
 8008b26:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008b28:	4a0a      	ldr	r2, [pc, #40]	@ (8008b54 <HAL_RCC_ClockConfig+0x364>)
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8008b58 <HAL_RCC_ClockConfig+0x368>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4618      	mov	r0, r3
 8008b34:	f7fe fdbe 	bl	80076b4 <HAL_InitTick>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3718      	adds	r7, #24
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
 8008b46:	bf00      	nop
 8008b48:	58024400 	.word	0x58024400
 8008b4c:	0800bdc8 	.word	0x0800bdc8
 8008b50:	240003b0 	.word	0x240003b0
 8008b54:	240003ac 	.word	0x240003ac
 8008b58:	240003b4 	.word	0x240003b4

08008b5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b089      	sub	sp, #36	@ 0x24
 8008b60:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008b62:	4bb3      	ldr	r3, [pc, #716]	@ (8008e30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b64:	691b      	ldr	r3, [r3, #16]
 8008b66:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008b6a:	2b18      	cmp	r3, #24
 8008b6c:	f200 8155 	bhi.w	8008e1a <HAL_RCC_GetSysClockFreq+0x2be>
 8008b70:	a201      	add	r2, pc, #4	@ (adr r2, 8008b78 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b76:	bf00      	nop
 8008b78:	08008bdd 	.word	0x08008bdd
 8008b7c:	08008e1b 	.word	0x08008e1b
 8008b80:	08008e1b 	.word	0x08008e1b
 8008b84:	08008e1b 	.word	0x08008e1b
 8008b88:	08008e1b 	.word	0x08008e1b
 8008b8c:	08008e1b 	.word	0x08008e1b
 8008b90:	08008e1b 	.word	0x08008e1b
 8008b94:	08008e1b 	.word	0x08008e1b
 8008b98:	08008c03 	.word	0x08008c03
 8008b9c:	08008e1b 	.word	0x08008e1b
 8008ba0:	08008e1b 	.word	0x08008e1b
 8008ba4:	08008e1b 	.word	0x08008e1b
 8008ba8:	08008e1b 	.word	0x08008e1b
 8008bac:	08008e1b 	.word	0x08008e1b
 8008bb0:	08008e1b 	.word	0x08008e1b
 8008bb4:	08008e1b 	.word	0x08008e1b
 8008bb8:	08008c09 	.word	0x08008c09
 8008bbc:	08008e1b 	.word	0x08008e1b
 8008bc0:	08008e1b 	.word	0x08008e1b
 8008bc4:	08008e1b 	.word	0x08008e1b
 8008bc8:	08008e1b 	.word	0x08008e1b
 8008bcc:	08008e1b 	.word	0x08008e1b
 8008bd0:	08008e1b 	.word	0x08008e1b
 8008bd4:	08008e1b 	.word	0x08008e1b
 8008bd8:	08008c0f 	.word	0x08008c0f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008bdc:	4b94      	ldr	r3, [pc, #592]	@ (8008e30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f003 0320 	and.w	r3, r3, #32
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d009      	beq.n	8008bfc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008be8:	4b91      	ldr	r3, [pc, #580]	@ (8008e30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	08db      	lsrs	r3, r3, #3
 8008bee:	f003 0303 	and.w	r3, r3, #3
 8008bf2:	4a90      	ldr	r2, [pc, #576]	@ (8008e34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8008bf8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008bfa:	e111      	b.n	8008e20 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008bfc:	4b8d      	ldr	r3, [pc, #564]	@ (8008e34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008bfe:	61bb      	str	r3, [r7, #24]
      break;
 8008c00:	e10e      	b.n	8008e20 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008c02:	4b8d      	ldr	r3, [pc, #564]	@ (8008e38 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008c04:	61bb      	str	r3, [r7, #24]
      break;
 8008c06:	e10b      	b.n	8008e20 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008c08:	4b8c      	ldr	r3, [pc, #560]	@ (8008e3c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008c0a:	61bb      	str	r3, [r7, #24]
      break;
 8008c0c:	e108      	b.n	8008e20 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008c0e:	4b88      	ldr	r3, [pc, #544]	@ (8008e30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c12:	f003 0303 	and.w	r3, r3, #3
 8008c16:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008c18:	4b85      	ldr	r3, [pc, #532]	@ (8008e30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c1c:	091b      	lsrs	r3, r3, #4
 8008c1e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008c22:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008c24:	4b82      	ldr	r3, [pc, #520]	@ (8008e30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c28:	f003 0301 	and.w	r3, r3, #1
 8008c2c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008c2e:	4b80      	ldr	r3, [pc, #512]	@ (8008e30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c32:	08db      	lsrs	r3, r3, #3
 8008c34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008c38:	68fa      	ldr	r2, [r7, #12]
 8008c3a:	fb02 f303 	mul.w	r3, r2, r3
 8008c3e:	ee07 3a90 	vmov	s15, r3
 8008c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c46:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	f000 80e1 	beq.w	8008e14 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	2b02      	cmp	r3, #2
 8008c56:	f000 8083 	beq.w	8008d60 <HAL_RCC_GetSysClockFreq+0x204>
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	2b02      	cmp	r3, #2
 8008c5e:	f200 80a1 	bhi.w	8008da4 <HAL_RCC_GetSysClockFreq+0x248>
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d003      	beq.n	8008c70 <HAL_RCC_GetSysClockFreq+0x114>
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	2b01      	cmp	r3, #1
 8008c6c:	d056      	beq.n	8008d1c <HAL_RCC_GetSysClockFreq+0x1c0>
 8008c6e:	e099      	b.n	8008da4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c70:	4b6f      	ldr	r3, [pc, #444]	@ (8008e30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f003 0320 	and.w	r3, r3, #32
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d02d      	beq.n	8008cd8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c7c:	4b6c      	ldr	r3, [pc, #432]	@ (8008e30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	08db      	lsrs	r3, r3, #3
 8008c82:	f003 0303 	and.w	r3, r3, #3
 8008c86:	4a6b      	ldr	r2, [pc, #428]	@ (8008e34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008c88:	fa22 f303 	lsr.w	r3, r2, r3
 8008c8c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	ee07 3a90 	vmov	s15, r3
 8008c94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	ee07 3a90 	vmov	s15, r3
 8008c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ca2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ca6:	4b62      	ldr	r3, [pc, #392]	@ (8008e30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008caa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cae:	ee07 3a90 	vmov	s15, r3
 8008cb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cb6:	ed97 6a02 	vldr	s12, [r7, #8]
 8008cba:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008e40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008cbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008cca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cd2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008cd6:	e087      	b.n	8008de8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	ee07 3a90 	vmov	s15, r3
 8008cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ce2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008e44 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008ce6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cea:	4b51      	ldr	r3, [pc, #324]	@ (8008e30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cf2:	ee07 3a90 	vmov	s15, r3
 8008cf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cfa:	ed97 6a02 	vldr	s12, [r7, #8]
 8008cfe:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008e40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008d02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d16:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008d1a:	e065      	b.n	8008de8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	ee07 3a90 	vmov	s15, r3
 8008d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d26:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008e48 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008d2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d2e:	4b40      	ldr	r3, [pc, #256]	@ (8008e30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d36:	ee07 3a90 	vmov	s15, r3
 8008d3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008d42:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008e40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008d46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d5a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008d5e:	e043      	b.n	8008de8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	ee07 3a90 	vmov	s15, r3
 8008d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d6a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008e4c <HAL_RCC_GetSysClockFreq+0x2f0>
 8008d6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d72:	4b2f      	ldr	r3, [pc, #188]	@ (8008e30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d7a:	ee07 3a90 	vmov	s15, r3
 8008d7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d82:	ed97 6a02 	vldr	s12, [r7, #8]
 8008d86:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008e40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008d8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d9e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008da2:	e021      	b.n	8008de8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	ee07 3a90 	vmov	s15, r3
 8008daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dae:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008e48 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008db2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008db6:	4b1e      	ldr	r3, [pc, #120]	@ (8008e30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dbe:	ee07 3a90 	vmov	s15, r3
 8008dc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8008dca:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008e40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008dce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008dda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008de2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008de6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008de8:	4b11      	ldr	r3, [pc, #68]	@ (8008e30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dec:	0a5b      	lsrs	r3, r3, #9
 8008dee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008df2:	3301      	adds	r3, #1
 8008df4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	ee07 3a90 	vmov	s15, r3
 8008dfc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008e00:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e0c:	ee17 3a90 	vmov	r3, s15
 8008e10:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008e12:	e005      	b.n	8008e20 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008e14:	2300      	movs	r3, #0
 8008e16:	61bb      	str	r3, [r7, #24]
      break;
 8008e18:	e002      	b.n	8008e20 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008e1a:	4b07      	ldr	r3, [pc, #28]	@ (8008e38 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008e1c:	61bb      	str	r3, [r7, #24]
      break;
 8008e1e:	bf00      	nop
  }

  return sysclockfreq;
 8008e20:	69bb      	ldr	r3, [r7, #24]
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3724      	adds	r7, #36	@ 0x24
 8008e26:	46bd      	mov	sp, r7
 8008e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2c:	4770      	bx	lr
 8008e2e:	bf00      	nop
 8008e30:	58024400 	.word	0x58024400
 8008e34:	03d09000 	.word	0x03d09000
 8008e38:	003d0900 	.word	0x003d0900
 8008e3c:	017d7840 	.word	0x017d7840
 8008e40:	46000000 	.word	0x46000000
 8008e44:	4c742400 	.word	0x4c742400
 8008e48:	4a742400 	.word	0x4a742400
 8008e4c:	4bbebc20 	.word	0x4bbebc20

08008e50 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008e50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008e54:	b0ca      	sub	sp, #296	@ 0x128
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008e62:	2300      	movs	r3, #0
 8008e64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e70:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008e74:	2500      	movs	r5, #0
 8008e76:	ea54 0305 	orrs.w	r3, r4, r5
 8008e7a:	d049      	beq.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e82:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008e86:	d02f      	beq.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008e88:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008e8c:	d828      	bhi.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008e8e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008e92:	d01a      	beq.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008e94:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008e98:	d822      	bhi.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d003      	beq.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008e9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008ea2:	d007      	beq.n	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008ea4:	e01c      	b.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ea6:	4bb8      	ldr	r3, [pc, #736]	@ (8009188 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eaa:	4ab7      	ldr	r2, [pc, #732]	@ (8009188 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008eac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008eb0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008eb2:	e01a      	b.n	8008eea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008eb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008eb8:	3308      	adds	r3, #8
 8008eba:	2102      	movs	r1, #2
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f001 f9d1 	bl	800a264 <RCCEx_PLL2_Config>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008ec8:	e00f      	b.n	8008eea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ece:	3328      	adds	r3, #40	@ 0x28
 8008ed0:	2102      	movs	r1, #2
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f001 fa78 	bl	800a3c8 <RCCEx_PLL3_Config>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008ede:	e004      	b.n	8008eea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008ee6:	e000      	b.n	8008eea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008ee8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008eea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d10a      	bne.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008ef2:	4ba5      	ldr	r3, [pc, #660]	@ (8009188 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ef4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ef6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008efe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008f00:	4aa1      	ldr	r2, [pc, #644]	@ (8009188 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f02:	430b      	orrs	r3, r1
 8008f04:	6513      	str	r3, [r2, #80]	@ 0x50
 8008f06:	e003      	b.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f18:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008f1c:	f04f 0900 	mov.w	r9, #0
 8008f20:	ea58 0309 	orrs.w	r3, r8, r9
 8008f24:	d047      	beq.n	8008fb6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f2c:	2b04      	cmp	r3, #4
 8008f2e:	d82a      	bhi.n	8008f86 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008f30:	a201      	add	r2, pc, #4	@ (adr r2, 8008f38 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f36:	bf00      	nop
 8008f38:	08008f4d 	.word	0x08008f4d
 8008f3c:	08008f5b 	.word	0x08008f5b
 8008f40:	08008f71 	.word	0x08008f71
 8008f44:	08008f8f 	.word	0x08008f8f
 8008f48:	08008f8f 	.word	0x08008f8f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f4c:	4b8e      	ldr	r3, [pc, #568]	@ (8009188 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f50:	4a8d      	ldr	r2, [pc, #564]	@ (8009188 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008f58:	e01a      	b.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f5e:	3308      	adds	r3, #8
 8008f60:	2100      	movs	r1, #0
 8008f62:	4618      	mov	r0, r3
 8008f64:	f001 f97e 	bl	800a264 <RCCEx_PLL2_Config>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008f6e:	e00f      	b.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f74:	3328      	adds	r3, #40	@ 0x28
 8008f76:	2100      	movs	r1, #0
 8008f78:	4618      	mov	r0, r3
 8008f7a:	f001 fa25 	bl	800a3c8 <RCCEx_PLL3_Config>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008f84:	e004      	b.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f86:	2301      	movs	r3, #1
 8008f88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008f8c:	e000      	b.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008f8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d10a      	bne.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008f98:	4b7b      	ldr	r3, [pc, #492]	@ (8009188 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f9c:	f023 0107 	bic.w	r1, r3, #7
 8008fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fa6:	4a78      	ldr	r2, [pc, #480]	@ (8009188 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008fa8:	430b      	orrs	r3, r1
 8008faa:	6513      	str	r3, [r2, #80]	@ 0x50
 8008fac:	e003      	b.n	8008fb6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008fb2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fbe:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8008fc2:	f04f 0b00 	mov.w	fp, #0
 8008fc6:	ea5a 030b 	orrs.w	r3, sl, fp
 8008fca:	d04c      	beq.n	8009066 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008fd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008fd6:	d030      	beq.n	800903a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8008fd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008fdc:	d829      	bhi.n	8009032 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008fde:	2bc0      	cmp	r3, #192	@ 0xc0
 8008fe0:	d02d      	beq.n	800903e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008fe2:	2bc0      	cmp	r3, #192	@ 0xc0
 8008fe4:	d825      	bhi.n	8009032 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008fe6:	2b80      	cmp	r3, #128	@ 0x80
 8008fe8:	d018      	beq.n	800901c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008fea:	2b80      	cmp	r3, #128	@ 0x80
 8008fec:	d821      	bhi.n	8009032 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d002      	beq.n	8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8008ff2:	2b40      	cmp	r3, #64	@ 0x40
 8008ff4:	d007      	beq.n	8009006 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8008ff6:	e01c      	b.n	8009032 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ff8:	4b63      	ldr	r3, [pc, #396]	@ (8009188 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ffc:	4a62      	ldr	r2, [pc, #392]	@ (8009188 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ffe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009002:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009004:	e01c      	b.n	8009040 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009006:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800900a:	3308      	adds	r3, #8
 800900c:	2100      	movs	r1, #0
 800900e:	4618      	mov	r0, r3
 8009010:	f001 f928 	bl	800a264 <RCCEx_PLL2_Config>
 8009014:	4603      	mov	r3, r0
 8009016:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800901a:	e011      	b.n	8009040 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800901c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009020:	3328      	adds	r3, #40	@ 0x28
 8009022:	2100      	movs	r1, #0
 8009024:	4618      	mov	r0, r3
 8009026:	f001 f9cf 	bl	800a3c8 <RCCEx_PLL3_Config>
 800902a:	4603      	mov	r3, r0
 800902c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009030:	e006      	b.n	8009040 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009032:	2301      	movs	r3, #1
 8009034:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009038:	e002      	b.n	8009040 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800903a:	bf00      	nop
 800903c:	e000      	b.n	8009040 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800903e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009040:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009044:	2b00      	cmp	r3, #0
 8009046:	d10a      	bne.n	800905e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009048:	4b4f      	ldr	r3, [pc, #316]	@ (8009188 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800904a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800904c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8009050:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009054:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009056:	4a4c      	ldr	r2, [pc, #304]	@ (8009188 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009058:	430b      	orrs	r3, r1
 800905a:	6513      	str	r3, [r2, #80]	@ 0x50
 800905c:	e003      	b.n	8009066 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800905e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009062:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009066:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800906a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800906e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8009072:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8009076:	2300      	movs	r3, #0
 8009078:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800907c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8009080:	460b      	mov	r3, r1
 8009082:	4313      	orrs	r3, r2
 8009084:	d053      	beq.n	800912e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009086:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800908a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800908e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009092:	d035      	beq.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009094:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009098:	d82e      	bhi.n	80090f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800909a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800909e:	d031      	beq.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80090a0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80090a4:	d828      	bhi.n	80090f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80090a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80090aa:	d01a      	beq.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80090ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80090b0:	d822      	bhi.n	80090f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d003      	beq.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80090b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80090ba:	d007      	beq.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80090bc:	e01c      	b.n	80090f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090be:	4b32      	ldr	r3, [pc, #200]	@ (8009188 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80090c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090c2:	4a31      	ldr	r2, [pc, #196]	@ (8009188 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80090c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80090c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80090ca:	e01c      	b.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80090cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090d0:	3308      	adds	r3, #8
 80090d2:	2100      	movs	r1, #0
 80090d4:	4618      	mov	r0, r3
 80090d6:	f001 f8c5 	bl	800a264 <RCCEx_PLL2_Config>
 80090da:	4603      	mov	r3, r0
 80090dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80090e0:	e011      	b.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80090e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090e6:	3328      	adds	r3, #40	@ 0x28
 80090e8:	2100      	movs	r1, #0
 80090ea:	4618      	mov	r0, r3
 80090ec:	f001 f96c 	bl	800a3c8 <RCCEx_PLL3_Config>
 80090f0:	4603      	mov	r3, r0
 80090f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80090f6:	e006      	b.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80090f8:	2301      	movs	r3, #1
 80090fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80090fe:	e002      	b.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009100:	bf00      	nop
 8009102:	e000      	b.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009104:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009106:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800910a:	2b00      	cmp	r3, #0
 800910c:	d10b      	bne.n	8009126 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800910e:	4b1e      	ldr	r3, [pc, #120]	@ (8009188 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009112:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8009116:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800911a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800911e:	4a1a      	ldr	r2, [pc, #104]	@ (8009188 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009120:	430b      	orrs	r3, r1
 8009122:	6593      	str	r3, [r2, #88]	@ 0x58
 8009124:	e003      	b.n	800912e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009126:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800912a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800912e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009136:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800913a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800913e:	2300      	movs	r3, #0
 8009140:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009144:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8009148:	460b      	mov	r3, r1
 800914a:	4313      	orrs	r3, r2
 800914c:	d056      	beq.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800914e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009152:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009156:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800915a:	d038      	beq.n	80091ce <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800915c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009160:	d831      	bhi.n	80091c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009162:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009166:	d034      	beq.n	80091d2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8009168:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800916c:	d82b      	bhi.n	80091c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800916e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009172:	d01d      	beq.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8009174:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009178:	d825      	bhi.n	80091c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800917a:	2b00      	cmp	r3, #0
 800917c:	d006      	beq.n	800918c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800917e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009182:	d00a      	beq.n	800919a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009184:	e01f      	b.n	80091c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009186:	bf00      	nop
 8009188:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800918c:	4ba2      	ldr	r3, [pc, #648]	@ (8009418 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800918e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009190:	4aa1      	ldr	r2, [pc, #644]	@ (8009418 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009192:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009196:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009198:	e01c      	b.n	80091d4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800919a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800919e:	3308      	adds	r3, #8
 80091a0:	2100      	movs	r1, #0
 80091a2:	4618      	mov	r0, r3
 80091a4:	f001 f85e 	bl	800a264 <RCCEx_PLL2_Config>
 80091a8:	4603      	mov	r3, r0
 80091aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80091ae:	e011      	b.n	80091d4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80091b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091b4:	3328      	adds	r3, #40	@ 0x28
 80091b6:	2100      	movs	r1, #0
 80091b8:	4618      	mov	r0, r3
 80091ba:	f001 f905 	bl	800a3c8 <RCCEx_PLL3_Config>
 80091be:	4603      	mov	r3, r0
 80091c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80091c4:	e006      	b.n	80091d4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80091c6:	2301      	movs	r3, #1
 80091c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80091cc:	e002      	b.n	80091d4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80091ce:	bf00      	nop
 80091d0:	e000      	b.n	80091d4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80091d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d10b      	bne.n	80091f4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80091dc:	4b8e      	ldr	r3, [pc, #568]	@ (8009418 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80091de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091e0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80091e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091e8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80091ec:	4a8a      	ldr	r2, [pc, #552]	@ (8009418 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80091ee:	430b      	orrs	r3, r1
 80091f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80091f2:	e003      	b.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80091fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009204:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8009208:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800920c:	2300      	movs	r3, #0
 800920e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009212:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8009216:	460b      	mov	r3, r1
 8009218:	4313      	orrs	r3, r2
 800921a:	d03a      	beq.n	8009292 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800921c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009222:	2b30      	cmp	r3, #48	@ 0x30
 8009224:	d01f      	beq.n	8009266 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8009226:	2b30      	cmp	r3, #48	@ 0x30
 8009228:	d819      	bhi.n	800925e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800922a:	2b20      	cmp	r3, #32
 800922c:	d00c      	beq.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800922e:	2b20      	cmp	r3, #32
 8009230:	d815      	bhi.n	800925e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009232:	2b00      	cmp	r3, #0
 8009234:	d019      	beq.n	800926a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8009236:	2b10      	cmp	r3, #16
 8009238:	d111      	bne.n	800925e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800923a:	4b77      	ldr	r3, [pc, #476]	@ (8009418 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800923c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800923e:	4a76      	ldr	r2, [pc, #472]	@ (8009418 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009240:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009244:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009246:	e011      	b.n	800926c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009248:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800924c:	3308      	adds	r3, #8
 800924e:	2102      	movs	r1, #2
 8009250:	4618      	mov	r0, r3
 8009252:	f001 f807 	bl	800a264 <RCCEx_PLL2_Config>
 8009256:	4603      	mov	r3, r0
 8009258:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800925c:	e006      	b.n	800926c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800925e:	2301      	movs	r3, #1
 8009260:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009264:	e002      	b.n	800926c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009266:	bf00      	nop
 8009268:	e000      	b.n	800926c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800926a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800926c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009270:	2b00      	cmp	r3, #0
 8009272:	d10a      	bne.n	800928a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009274:	4b68      	ldr	r3, [pc, #416]	@ (8009418 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009276:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009278:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800927c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009282:	4a65      	ldr	r2, [pc, #404]	@ (8009418 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009284:	430b      	orrs	r3, r1
 8009286:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009288:	e003      	b.n	8009292 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800928a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800928e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800929a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800929e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80092a2:	2300      	movs	r3, #0
 80092a4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80092a8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80092ac:	460b      	mov	r3, r1
 80092ae:	4313      	orrs	r3, r2
 80092b0:	d051      	beq.n	8009356 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80092b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80092bc:	d035      	beq.n	800932a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80092be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80092c2:	d82e      	bhi.n	8009322 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80092c4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80092c8:	d031      	beq.n	800932e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80092ca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80092ce:	d828      	bhi.n	8009322 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80092d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092d4:	d01a      	beq.n	800930c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80092d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092da:	d822      	bhi.n	8009322 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d003      	beq.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80092e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092e4:	d007      	beq.n	80092f6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80092e6:	e01c      	b.n	8009322 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092e8:	4b4b      	ldr	r3, [pc, #300]	@ (8009418 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80092ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092ec:	4a4a      	ldr	r2, [pc, #296]	@ (8009418 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80092ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80092f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80092f4:	e01c      	b.n	8009330 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80092f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092fa:	3308      	adds	r3, #8
 80092fc:	2100      	movs	r1, #0
 80092fe:	4618      	mov	r0, r3
 8009300:	f000 ffb0 	bl	800a264 <RCCEx_PLL2_Config>
 8009304:	4603      	mov	r3, r0
 8009306:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800930a:	e011      	b.n	8009330 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800930c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009310:	3328      	adds	r3, #40	@ 0x28
 8009312:	2100      	movs	r1, #0
 8009314:	4618      	mov	r0, r3
 8009316:	f001 f857 	bl	800a3c8 <RCCEx_PLL3_Config>
 800931a:	4603      	mov	r3, r0
 800931c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009320:	e006      	b.n	8009330 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009322:	2301      	movs	r3, #1
 8009324:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009328:	e002      	b.n	8009330 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800932a:	bf00      	nop
 800932c:	e000      	b.n	8009330 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800932e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009330:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009334:	2b00      	cmp	r3, #0
 8009336:	d10a      	bne.n	800934e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009338:	4b37      	ldr	r3, [pc, #220]	@ (8009418 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800933a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800933c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8009340:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009344:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009346:	4a34      	ldr	r2, [pc, #208]	@ (8009418 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009348:	430b      	orrs	r3, r1
 800934a:	6513      	str	r3, [r2, #80]	@ 0x50
 800934c:	e003      	b.n	8009356 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800934e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009352:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009356:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800935a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800935e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8009362:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009366:	2300      	movs	r3, #0
 8009368:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800936c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8009370:	460b      	mov	r3, r1
 8009372:	4313      	orrs	r3, r2
 8009374:	d056      	beq.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009376:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800937a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800937c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009380:	d033      	beq.n	80093ea <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8009382:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009386:	d82c      	bhi.n	80093e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009388:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800938c:	d02f      	beq.n	80093ee <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800938e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009392:	d826      	bhi.n	80093e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009394:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009398:	d02b      	beq.n	80093f2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800939a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800939e:	d820      	bhi.n	80093e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80093a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80093a4:	d012      	beq.n	80093cc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80093a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80093aa:	d81a      	bhi.n	80093e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d022      	beq.n	80093f6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80093b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80093b4:	d115      	bne.n	80093e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80093b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093ba:	3308      	adds	r3, #8
 80093bc:	2101      	movs	r1, #1
 80093be:	4618      	mov	r0, r3
 80093c0:	f000 ff50 	bl	800a264 <RCCEx_PLL2_Config>
 80093c4:	4603      	mov	r3, r0
 80093c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80093ca:	e015      	b.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80093cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093d0:	3328      	adds	r3, #40	@ 0x28
 80093d2:	2101      	movs	r1, #1
 80093d4:	4618      	mov	r0, r3
 80093d6:	f000 fff7 	bl	800a3c8 <RCCEx_PLL3_Config>
 80093da:	4603      	mov	r3, r0
 80093dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80093e0:	e00a      	b.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80093e2:	2301      	movs	r3, #1
 80093e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80093e8:	e006      	b.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80093ea:	bf00      	nop
 80093ec:	e004      	b.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80093ee:	bf00      	nop
 80093f0:	e002      	b.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80093f2:	bf00      	nop
 80093f4:	e000      	b.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80093f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d10d      	bne.n	800941c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009400:	4b05      	ldr	r3, [pc, #20]	@ (8009418 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009402:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009404:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8009408:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800940c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800940e:	4a02      	ldr	r2, [pc, #8]	@ (8009418 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009410:	430b      	orrs	r3, r1
 8009412:	6513      	str	r3, [r2, #80]	@ 0x50
 8009414:	e006      	b.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009416:	bf00      	nop
 8009418:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800941c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009420:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009424:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800942c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8009430:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009434:	2300      	movs	r3, #0
 8009436:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800943a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800943e:	460b      	mov	r3, r1
 8009440:	4313      	orrs	r3, r2
 8009442:	d055      	beq.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009444:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009448:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800944c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009450:	d033      	beq.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8009452:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009456:	d82c      	bhi.n	80094b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009458:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800945c:	d02f      	beq.n	80094be <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800945e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009462:	d826      	bhi.n	80094b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009464:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009468:	d02b      	beq.n	80094c2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800946a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800946e:	d820      	bhi.n	80094b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009470:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009474:	d012      	beq.n	800949c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8009476:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800947a:	d81a      	bhi.n	80094b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800947c:	2b00      	cmp	r3, #0
 800947e:	d022      	beq.n	80094c6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8009480:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009484:	d115      	bne.n	80094b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009486:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800948a:	3308      	adds	r3, #8
 800948c:	2101      	movs	r1, #1
 800948e:	4618      	mov	r0, r3
 8009490:	f000 fee8 	bl	800a264 <RCCEx_PLL2_Config>
 8009494:	4603      	mov	r3, r0
 8009496:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800949a:	e015      	b.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800949c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094a0:	3328      	adds	r3, #40	@ 0x28
 80094a2:	2101      	movs	r1, #1
 80094a4:	4618      	mov	r0, r3
 80094a6:	f000 ff8f 	bl	800a3c8 <RCCEx_PLL3_Config>
 80094aa:	4603      	mov	r3, r0
 80094ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80094b0:	e00a      	b.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80094b2:	2301      	movs	r3, #1
 80094b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80094b8:	e006      	b.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80094ba:	bf00      	nop
 80094bc:	e004      	b.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80094be:	bf00      	nop
 80094c0:	e002      	b.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80094c2:	bf00      	nop
 80094c4:	e000      	b.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80094c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d10b      	bne.n	80094e8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80094d0:	4ba3      	ldr	r3, [pc, #652]	@ (8009760 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80094d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094d4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80094d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80094e0:	4a9f      	ldr	r2, [pc, #636]	@ (8009760 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80094e2:	430b      	orrs	r3, r1
 80094e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80094e6:	e003      	b.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80094f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094f8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80094fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009500:	2300      	movs	r3, #0
 8009502:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009506:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800950a:	460b      	mov	r3, r1
 800950c:	4313      	orrs	r3, r2
 800950e:	d037      	beq.n	8009580 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009510:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009514:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009516:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800951a:	d00e      	beq.n	800953a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800951c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009520:	d816      	bhi.n	8009550 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8009522:	2b00      	cmp	r3, #0
 8009524:	d018      	beq.n	8009558 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8009526:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800952a:	d111      	bne.n	8009550 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800952c:	4b8c      	ldr	r3, [pc, #560]	@ (8009760 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800952e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009530:	4a8b      	ldr	r2, [pc, #556]	@ (8009760 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009532:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009536:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009538:	e00f      	b.n	800955a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800953a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800953e:	3308      	adds	r3, #8
 8009540:	2101      	movs	r1, #1
 8009542:	4618      	mov	r0, r3
 8009544:	f000 fe8e 	bl	800a264 <RCCEx_PLL2_Config>
 8009548:	4603      	mov	r3, r0
 800954a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800954e:	e004      	b.n	800955a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009550:	2301      	movs	r3, #1
 8009552:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009556:	e000      	b.n	800955a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8009558:	bf00      	nop
    }

    if (ret == HAL_OK)
 800955a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800955e:	2b00      	cmp	r3, #0
 8009560:	d10a      	bne.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009562:	4b7f      	ldr	r3, [pc, #508]	@ (8009760 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009564:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009566:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800956a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800956e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009570:	4a7b      	ldr	r2, [pc, #492]	@ (8009760 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009572:	430b      	orrs	r3, r1
 8009574:	6513      	str	r3, [r2, #80]	@ 0x50
 8009576:	e003      	b.n	8009580 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009578:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800957c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009580:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009588:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800958c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009590:	2300      	movs	r3, #0
 8009592:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009596:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800959a:	460b      	mov	r3, r1
 800959c:	4313      	orrs	r3, r2
 800959e:	d039      	beq.n	8009614 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80095a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80095a6:	2b03      	cmp	r3, #3
 80095a8:	d81c      	bhi.n	80095e4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80095aa:	a201      	add	r2, pc, #4	@ (adr r2, 80095b0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80095ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095b0:	080095ed 	.word	0x080095ed
 80095b4:	080095c1 	.word	0x080095c1
 80095b8:	080095cf 	.word	0x080095cf
 80095bc:	080095ed 	.word	0x080095ed
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095c0:	4b67      	ldr	r3, [pc, #412]	@ (8009760 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80095c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095c4:	4a66      	ldr	r2, [pc, #408]	@ (8009760 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80095c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80095ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80095cc:	e00f      	b.n	80095ee <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80095ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095d2:	3308      	adds	r3, #8
 80095d4:	2102      	movs	r1, #2
 80095d6:	4618      	mov	r0, r3
 80095d8:	f000 fe44 	bl	800a264 <RCCEx_PLL2_Config>
 80095dc:	4603      	mov	r3, r0
 80095de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80095e2:	e004      	b.n	80095ee <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80095e4:	2301      	movs	r3, #1
 80095e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80095ea:	e000      	b.n	80095ee <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80095ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d10a      	bne.n	800960c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80095f6:	4b5a      	ldr	r3, [pc, #360]	@ (8009760 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80095f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095fa:	f023 0103 	bic.w	r1, r3, #3
 80095fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009602:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009604:	4a56      	ldr	r2, [pc, #344]	@ (8009760 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009606:	430b      	orrs	r3, r1
 8009608:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800960a:	e003      	b.n	8009614 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800960c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009610:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009614:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800961c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009620:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009624:	2300      	movs	r3, #0
 8009626:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800962a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800962e:	460b      	mov	r3, r1
 8009630:	4313      	orrs	r3, r2
 8009632:	f000 809f 	beq.w	8009774 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009636:	4b4b      	ldr	r3, [pc, #300]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	4a4a      	ldr	r2, [pc, #296]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800963c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009640:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009642:	f7fe f881 	bl	8007748 <HAL_GetTick>
 8009646:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800964a:	e00b      	b.n	8009664 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800964c:	f7fe f87c 	bl	8007748 <HAL_GetTick>
 8009650:	4602      	mov	r2, r0
 8009652:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009656:	1ad3      	subs	r3, r2, r3
 8009658:	2b64      	cmp	r3, #100	@ 0x64
 800965a:	d903      	bls.n	8009664 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800965c:	2303      	movs	r3, #3
 800965e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009662:	e005      	b.n	8009670 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009664:	4b3f      	ldr	r3, [pc, #252]	@ (8009764 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800966c:	2b00      	cmp	r3, #0
 800966e:	d0ed      	beq.n	800964c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8009670:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009674:	2b00      	cmp	r3, #0
 8009676:	d179      	bne.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009678:	4b39      	ldr	r3, [pc, #228]	@ (8009760 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800967a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800967c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009680:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009684:	4053      	eors	r3, r2
 8009686:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800968a:	2b00      	cmp	r3, #0
 800968c:	d015      	beq.n	80096ba <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800968e:	4b34      	ldr	r3, [pc, #208]	@ (8009760 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009690:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009692:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009696:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800969a:	4b31      	ldr	r3, [pc, #196]	@ (8009760 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800969c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800969e:	4a30      	ldr	r2, [pc, #192]	@ (8009760 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80096a4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80096a6:	4b2e      	ldr	r3, [pc, #184]	@ (8009760 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80096aa:	4a2d      	ldr	r2, [pc, #180]	@ (8009760 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80096b0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80096b2:	4a2b      	ldr	r2, [pc, #172]	@ (8009760 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80096b8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80096ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80096c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096c6:	d118      	bne.n	80096fa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096c8:	f7fe f83e 	bl	8007748 <HAL_GetTick>
 80096cc:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80096d0:	e00d      	b.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80096d2:	f7fe f839 	bl	8007748 <HAL_GetTick>
 80096d6:	4602      	mov	r2, r0
 80096d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80096dc:	1ad2      	subs	r2, r2, r3
 80096de:	f241 3388 	movw	r3, #5000	@ 0x1388
 80096e2:	429a      	cmp	r2, r3
 80096e4:	d903      	bls.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80096e6:	2303      	movs	r3, #3
 80096e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80096ec:	e005      	b.n	80096fa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80096ee:	4b1c      	ldr	r3, [pc, #112]	@ (8009760 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80096f2:	f003 0302 	and.w	r3, r3, #2
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d0eb      	beq.n	80096d2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80096fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d129      	bne.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009706:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800970a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800970e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009712:	d10e      	bne.n	8009732 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8009714:	4b12      	ldr	r3, [pc, #72]	@ (8009760 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009716:	691b      	ldr	r3, [r3, #16]
 8009718:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800971c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009720:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009724:	091a      	lsrs	r2, r3, #4
 8009726:	4b10      	ldr	r3, [pc, #64]	@ (8009768 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8009728:	4013      	ands	r3, r2
 800972a:	4a0d      	ldr	r2, [pc, #52]	@ (8009760 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800972c:	430b      	orrs	r3, r1
 800972e:	6113      	str	r3, [r2, #16]
 8009730:	e005      	b.n	800973e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8009732:	4b0b      	ldr	r3, [pc, #44]	@ (8009760 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009734:	691b      	ldr	r3, [r3, #16]
 8009736:	4a0a      	ldr	r2, [pc, #40]	@ (8009760 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009738:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800973c:	6113      	str	r3, [r2, #16]
 800973e:	4b08      	ldr	r3, [pc, #32]	@ (8009760 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009740:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8009742:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009746:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800974a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800974e:	4a04      	ldr	r2, [pc, #16]	@ (8009760 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009750:	430b      	orrs	r3, r1
 8009752:	6713      	str	r3, [r2, #112]	@ 0x70
 8009754:	e00e      	b.n	8009774 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009756:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800975a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800975e:	e009      	b.n	8009774 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8009760:	58024400 	.word	0x58024400
 8009764:	58024800 	.word	0x58024800
 8009768:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800976c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009770:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800977c:	f002 0301 	and.w	r3, r2, #1
 8009780:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009784:	2300      	movs	r3, #0
 8009786:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800978a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800978e:	460b      	mov	r3, r1
 8009790:	4313      	orrs	r3, r2
 8009792:	f000 8089 	beq.w	80098a8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800979a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800979c:	2b28      	cmp	r3, #40	@ 0x28
 800979e:	d86b      	bhi.n	8009878 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80097a0:	a201      	add	r2, pc, #4	@ (adr r2, 80097a8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80097a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097a6:	bf00      	nop
 80097a8:	08009881 	.word	0x08009881
 80097ac:	08009879 	.word	0x08009879
 80097b0:	08009879 	.word	0x08009879
 80097b4:	08009879 	.word	0x08009879
 80097b8:	08009879 	.word	0x08009879
 80097bc:	08009879 	.word	0x08009879
 80097c0:	08009879 	.word	0x08009879
 80097c4:	08009879 	.word	0x08009879
 80097c8:	0800984d 	.word	0x0800984d
 80097cc:	08009879 	.word	0x08009879
 80097d0:	08009879 	.word	0x08009879
 80097d4:	08009879 	.word	0x08009879
 80097d8:	08009879 	.word	0x08009879
 80097dc:	08009879 	.word	0x08009879
 80097e0:	08009879 	.word	0x08009879
 80097e4:	08009879 	.word	0x08009879
 80097e8:	08009863 	.word	0x08009863
 80097ec:	08009879 	.word	0x08009879
 80097f0:	08009879 	.word	0x08009879
 80097f4:	08009879 	.word	0x08009879
 80097f8:	08009879 	.word	0x08009879
 80097fc:	08009879 	.word	0x08009879
 8009800:	08009879 	.word	0x08009879
 8009804:	08009879 	.word	0x08009879
 8009808:	08009881 	.word	0x08009881
 800980c:	08009879 	.word	0x08009879
 8009810:	08009879 	.word	0x08009879
 8009814:	08009879 	.word	0x08009879
 8009818:	08009879 	.word	0x08009879
 800981c:	08009879 	.word	0x08009879
 8009820:	08009879 	.word	0x08009879
 8009824:	08009879 	.word	0x08009879
 8009828:	08009881 	.word	0x08009881
 800982c:	08009879 	.word	0x08009879
 8009830:	08009879 	.word	0x08009879
 8009834:	08009879 	.word	0x08009879
 8009838:	08009879 	.word	0x08009879
 800983c:	08009879 	.word	0x08009879
 8009840:	08009879 	.word	0x08009879
 8009844:	08009879 	.word	0x08009879
 8009848:	08009881 	.word	0x08009881
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800984c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009850:	3308      	adds	r3, #8
 8009852:	2101      	movs	r1, #1
 8009854:	4618      	mov	r0, r3
 8009856:	f000 fd05 	bl	800a264 <RCCEx_PLL2_Config>
 800985a:	4603      	mov	r3, r0
 800985c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009860:	e00f      	b.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009866:	3328      	adds	r3, #40	@ 0x28
 8009868:	2101      	movs	r1, #1
 800986a:	4618      	mov	r0, r3
 800986c:	f000 fdac 	bl	800a3c8 <RCCEx_PLL3_Config>
 8009870:	4603      	mov	r3, r0
 8009872:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009876:	e004      	b.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009878:	2301      	movs	r3, #1
 800987a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800987e:	e000      	b.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8009880:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009882:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009886:	2b00      	cmp	r3, #0
 8009888:	d10a      	bne.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800988a:	4bbf      	ldr	r3, [pc, #764]	@ (8009b88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800988c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800988e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8009892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009896:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009898:	4abb      	ldr	r2, [pc, #748]	@ (8009b88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800989a:	430b      	orrs	r3, r1
 800989c:	6553      	str	r3, [r2, #84]	@ 0x54
 800989e:	e003      	b.n	80098a8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80098a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b0:	f002 0302 	and.w	r3, r2, #2
 80098b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80098b8:	2300      	movs	r3, #0
 80098ba:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80098be:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80098c2:	460b      	mov	r3, r1
 80098c4:	4313      	orrs	r3, r2
 80098c6:	d041      	beq.n	800994c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80098c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80098ce:	2b05      	cmp	r3, #5
 80098d0:	d824      	bhi.n	800991c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80098d2:	a201      	add	r2, pc, #4	@ (adr r2, 80098d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80098d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098d8:	08009925 	.word	0x08009925
 80098dc:	080098f1 	.word	0x080098f1
 80098e0:	08009907 	.word	0x08009907
 80098e4:	08009925 	.word	0x08009925
 80098e8:	08009925 	.word	0x08009925
 80098ec:	08009925 	.word	0x08009925
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80098f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098f4:	3308      	adds	r3, #8
 80098f6:	2101      	movs	r1, #1
 80098f8:	4618      	mov	r0, r3
 80098fa:	f000 fcb3 	bl	800a264 <RCCEx_PLL2_Config>
 80098fe:	4603      	mov	r3, r0
 8009900:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009904:	e00f      	b.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800990a:	3328      	adds	r3, #40	@ 0x28
 800990c:	2101      	movs	r1, #1
 800990e:	4618      	mov	r0, r3
 8009910:	f000 fd5a 	bl	800a3c8 <RCCEx_PLL3_Config>
 8009914:	4603      	mov	r3, r0
 8009916:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800991a:	e004      	b.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800991c:	2301      	movs	r3, #1
 800991e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009922:	e000      	b.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8009924:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009926:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800992a:	2b00      	cmp	r3, #0
 800992c:	d10a      	bne.n	8009944 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800992e:	4b96      	ldr	r3, [pc, #600]	@ (8009b88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009930:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009932:	f023 0107 	bic.w	r1, r3, #7
 8009936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800993a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800993c:	4a92      	ldr	r2, [pc, #584]	@ (8009b88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800993e:	430b      	orrs	r3, r1
 8009940:	6553      	str	r3, [r2, #84]	@ 0x54
 8009942:	e003      	b.n	800994c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009944:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009948:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800994c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009954:	f002 0304 	and.w	r3, r2, #4
 8009958:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800995c:	2300      	movs	r3, #0
 800995e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009962:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009966:	460b      	mov	r3, r1
 8009968:	4313      	orrs	r3, r2
 800996a:	d044      	beq.n	80099f6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800996c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009970:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009974:	2b05      	cmp	r3, #5
 8009976:	d825      	bhi.n	80099c4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009978:	a201      	add	r2, pc, #4	@ (adr r2, 8009980 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800997a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800997e:	bf00      	nop
 8009980:	080099cd 	.word	0x080099cd
 8009984:	08009999 	.word	0x08009999
 8009988:	080099af 	.word	0x080099af
 800998c:	080099cd 	.word	0x080099cd
 8009990:	080099cd 	.word	0x080099cd
 8009994:	080099cd 	.word	0x080099cd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009998:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800999c:	3308      	adds	r3, #8
 800999e:	2101      	movs	r1, #1
 80099a0:	4618      	mov	r0, r3
 80099a2:	f000 fc5f 	bl	800a264 <RCCEx_PLL2_Config>
 80099a6:	4603      	mov	r3, r0
 80099a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80099ac:	e00f      	b.n	80099ce <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80099ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099b2:	3328      	adds	r3, #40	@ 0x28
 80099b4:	2101      	movs	r1, #1
 80099b6:	4618      	mov	r0, r3
 80099b8:	f000 fd06 	bl	800a3c8 <RCCEx_PLL3_Config>
 80099bc:	4603      	mov	r3, r0
 80099be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80099c2:	e004      	b.n	80099ce <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80099c4:	2301      	movs	r3, #1
 80099c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80099ca:	e000      	b.n	80099ce <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80099cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d10b      	bne.n	80099ee <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80099d6:	4b6c      	ldr	r3, [pc, #432]	@ (8009b88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80099d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099da:	f023 0107 	bic.w	r1, r3, #7
 80099de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80099e6:	4a68      	ldr	r2, [pc, #416]	@ (8009b88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80099e8:	430b      	orrs	r3, r1
 80099ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80099ec:	e003      	b.n	80099f6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80099f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80099f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099fe:	f002 0320 	and.w	r3, r2, #32
 8009a02:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009a06:	2300      	movs	r3, #0
 8009a08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009a0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009a10:	460b      	mov	r3, r1
 8009a12:	4313      	orrs	r3, r2
 8009a14:	d055      	beq.n	8009ac2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009a22:	d033      	beq.n	8009a8c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8009a24:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009a28:	d82c      	bhi.n	8009a84 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a2e:	d02f      	beq.n	8009a90 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8009a30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a34:	d826      	bhi.n	8009a84 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009a36:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009a3a:	d02b      	beq.n	8009a94 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009a3c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009a40:	d820      	bhi.n	8009a84 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009a42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a46:	d012      	beq.n	8009a6e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009a48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a4c:	d81a      	bhi.n	8009a84 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d022      	beq.n	8009a98 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8009a52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a56:	d115      	bne.n	8009a84 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a5c:	3308      	adds	r3, #8
 8009a5e:	2100      	movs	r1, #0
 8009a60:	4618      	mov	r0, r3
 8009a62:	f000 fbff 	bl	800a264 <RCCEx_PLL2_Config>
 8009a66:	4603      	mov	r3, r0
 8009a68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009a6c:	e015      	b.n	8009a9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a72:	3328      	adds	r3, #40	@ 0x28
 8009a74:	2102      	movs	r1, #2
 8009a76:	4618      	mov	r0, r3
 8009a78:	f000 fca6 	bl	800a3c8 <RCCEx_PLL3_Config>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009a82:	e00a      	b.n	8009a9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a84:	2301      	movs	r3, #1
 8009a86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009a8a:	e006      	b.n	8009a9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009a8c:	bf00      	nop
 8009a8e:	e004      	b.n	8009a9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009a90:	bf00      	nop
 8009a92:	e002      	b.n	8009a9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009a94:	bf00      	nop
 8009a96:	e000      	b.n	8009a9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009a98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d10b      	bne.n	8009aba <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009aa2:	4b39      	ldr	r3, [pc, #228]	@ (8009b88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009aa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009aa6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ab2:	4a35      	ldr	r2, [pc, #212]	@ (8009b88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009ab4:	430b      	orrs	r3, r1
 8009ab6:	6553      	str	r3, [r2, #84]	@ 0x54
 8009ab8:	e003      	b.n	8009ac2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009aba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009abe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aca:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8009ace:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009ad8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009adc:	460b      	mov	r3, r1
 8009ade:	4313      	orrs	r3, r2
 8009ae0:	d058      	beq.n	8009b94 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ae6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009aea:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009aee:	d033      	beq.n	8009b58 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009af0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009af4:	d82c      	bhi.n	8009b50 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009af6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009afa:	d02f      	beq.n	8009b5c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009afc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b00:	d826      	bhi.n	8009b50 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009b02:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009b06:	d02b      	beq.n	8009b60 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8009b08:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009b0c:	d820      	bhi.n	8009b50 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009b0e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009b12:	d012      	beq.n	8009b3a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009b14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009b18:	d81a      	bhi.n	8009b50 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d022      	beq.n	8009b64 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8009b1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b22:	d115      	bne.n	8009b50 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b28:	3308      	adds	r3, #8
 8009b2a:	2100      	movs	r1, #0
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f000 fb99 	bl	800a264 <RCCEx_PLL2_Config>
 8009b32:	4603      	mov	r3, r0
 8009b34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009b38:	e015      	b.n	8009b66 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b3e:	3328      	adds	r3, #40	@ 0x28
 8009b40:	2102      	movs	r1, #2
 8009b42:	4618      	mov	r0, r3
 8009b44:	f000 fc40 	bl	800a3c8 <RCCEx_PLL3_Config>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009b4e:	e00a      	b.n	8009b66 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b50:	2301      	movs	r3, #1
 8009b52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009b56:	e006      	b.n	8009b66 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009b58:	bf00      	nop
 8009b5a:	e004      	b.n	8009b66 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009b5c:	bf00      	nop
 8009b5e:	e002      	b.n	8009b66 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009b60:	bf00      	nop
 8009b62:	e000      	b.n	8009b66 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009b64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d10e      	bne.n	8009b8c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009b6e:	4b06      	ldr	r3, [pc, #24]	@ (8009b88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009b70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b72:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8009b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009b7e:	4a02      	ldr	r2, [pc, #8]	@ (8009b88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009b80:	430b      	orrs	r3, r1
 8009b82:	6593      	str	r3, [r2, #88]	@ 0x58
 8009b84:	e006      	b.n	8009b94 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009b86:	bf00      	nop
 8009b88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b90:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b9c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009ba0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009baa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009bae:	460b      	mov	r3, r1
 8009bb0:	4313      	orrs	r3, r2
 8009bb2:	d055      	beq.n	8009c60 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bb8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009bbc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009bc0:	d033      	beq.n	8009c2a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8009bc2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009bc6:	d82c      	bhi.n	8009c22 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009bc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009bcc:	d02f      	beq.n	8009c2e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8009bce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009bd2:	d826      	bhi.n	8009c22 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009bd4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009bd8:	d02b      	beq.n	8009c32 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8009bda:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009bde:	d820      	bhi.n	8009c22 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009be0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009be4:	d012      	beq.n	8009c0c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8009be6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009bea:	d81a      	bhi.n	8009c22 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d022      	beq.n	8009c36 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8009bf0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009bf4:	d115      	bne.n	8009c22 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bfa:	3308      	adds	r3, #8
 8009bfc:	2100      	movs	r1, #0
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f000 fb30 	bl	800a264 <RCCEx_PLL2_Config>
 8009c04:	4603      	mov	r3, r0
 8009c06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009c0a:	e015      	b.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c10:	3328      	adds	r3, #40	@ 0x28
 8009c12:	2102      	movs	r1, #2
 8009c14:	4618      	mov	r0, r3
 8009c16:	f000 fbd7 	bl	800a3c8 <RCCEx_PLL3_Config>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009c20:	e00a      	b.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c22:	2301      	movs	r3, #1
 8009c24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009c28:	e006      	b.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009c2a:	bf00      	nop
 8009c2c:	e004      	b.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009c2e:	bf00      	nop
 8009c30:	e002      	b.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009c32:	bf00      	nop
 8009c34:	e000      	b.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009c36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d10b      	bne.n	8009c58 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009c40:	4ba1      	ldr	r3, [pc, #644]	@ (8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c44:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c4c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009c50:	4a9d      	ldr	r2, [pc, #628]	@ (8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c52:	430b      	orrs	r3, r1
 8009c54:	6593      	str	r3, [r2, #88]	@ 0x58
 8009c56:	e003      	b.n	8009c60 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c5c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c68:	f002 0308 	and.w	r3, r2, #8
 8009c6c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009c70:	2300      	movs	r3, #0
 8009c72:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009c76:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009c7a:	460b      	mov	r3, r1
 8009c7c:	4313      	orrs	r3, r2
 8009c7e:	d01e      	beq.n	8009cbe <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009c80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c8c:	d10c      	bne.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c92:	3328      	adds	r3, #40	@ 0x28
 8009c94:	2102      	movs	r1, #2
 8009c96:	4618      	mov	r0, r3
 8009c98:	f000 fb96 	bl	800a3c8 <RCCEx_PLL3_Config>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d002      	beq.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009ca8:	4b87      	ldr	r3, [pc, #540]	@ (8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009caa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009cac:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009cb8:	4a83      	ldr	r2, [pc, #524]	@ (8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009cba:	430b      	orrs	r3, r1
 8009cbc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc6:	f002 0310 	and.w	r3, r2, #16
 8009cca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009cce:	2300      	movs	r3, #0
 8009cd0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009cd4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009cd8:	460b      	mov	r3, r1
 8009cda:	4313      	orrs	r3, r2
 8009cdc:	d01e      	beq.n	8009d1c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ce2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009ce6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009cea:	d10c      	bne.n	8009d06 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cf0:	3328      	adds	r3, #40	@ 0x28
 8009cf2:	2102      	movs	r1, #2
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f000 fb67 	bl	800a3c8 <RCCEx_PLL3_Config>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d002      	beq.n	8009d06 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8009d00:	2301      	movs	r3, #1
 8009d02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009d06:	4b70      	ldr	r3, [pc, #448]	@ (8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d0a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d12:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009d16:	4a6c      	ldr	r2, [pc, #432]	@ (8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d18:	430b      	orrs	r3, r1
 8009d1a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d24:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009d28:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009d32:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009d36:	460b      	mov	r3, r1
 8009d38:	4313      	orrs	r3, r2
 8009d3a:	d03e      	beq.n	8009dba <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d40:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009d44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d48:	d022      	beq.n	8009d90 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8009d4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d4e:	d81b      	bhi.n	8009d88 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d003      	beq.n	8009d5c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009d54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d58:	d00b      	beq.n	8009d72 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8009d5a:	e015      	b.n	8009d88 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d60:	3308      	adds	r3, #8
 8009d62:	2100      	movs	r1, #0
 8009d64:	4618      	mov	r0, r3
 8009d66:	f000 fa7d 	bl	800a264 <RCCEx_PLL2_Config>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009d70:	e00f      	b.n	8009d92 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d76:	3328      	adds	r3, #40	@ 0x28
 8009d78:	2102      	movs	r1, #2
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f000 fb24 	bl	800a3c8 <RCCEx_PLL3_Config>
 8009d80:	4603      	mov	r3, r0
 8009d82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009d86:	e004      	b.n	8009d92 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d88:	2301      	movs	r3, #1
 8009d8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009d8e:	e000      	b.n	8009d92 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8009d90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d10b      	bne.n	8009db2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009d9a:	4b4b      	ldr	r3, [pc, #300]	@ (8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d9e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009da6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009daa:	4a47      	ldr	r2, [pc, #284]	@ (8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009dac:	430b      	orrs	r3, r1
 8009dae:	6593      	str	r3, [r2, #88]	@ 0x58
 8009db0:	e003      	b.n	8009dba <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009db2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009db6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009dc6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009dc8:	2300      	movs	r3, #0
 8009dca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009dcc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009dd0:	460b      	mov	r3, r1
 8009dd2:	4313      	orrs	r3, r2
 8009dd4:	d03b      	beq.n	8009e4e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009dde:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009de2:	d01f      	beq.n	8009e24 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009de4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009de8:	d818      	bhi.n	8009e1c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8009dea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009dee:	d003      	beq.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8009df0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009df4:	d007      	beq.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8009df6:	e011      	b.n	8009e1c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009df8:	4b33      	ldr	r3, [pc, #204]	@ (8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dfc:	4a32      	ldr	r2, [pc, #200]	@ (8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009dfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009e04:	e00f      	b.n	8009e26 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e0a:	3328      	adds	r3, #40	@ 0x28
 8009e0c:	2101      	movs	r1, #1
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f000 fada 	bl	800a3c8 <RCCEx_PLL3_Config>
 8009e14:	4603      	mov	r3, r0
 8009e16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8009e1a:	e004      	b.n	8009e26 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009e22:	e000      	b.n	8009e26 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009e24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d10b      	bne.n	8009e46 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009e2e:	4b26      	ldr	r3, [pc, #152]	@ (8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e32:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e3e:	4a22      	ldr	r2, [pc, #136]	@ (8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e40:	430b      	orrs	r3, r1
 8009e42:	6553      	str	r3, [r2, #84]	@ 0x54
 8009e44:	e003      	b.n	8009e4e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e56:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009e5a:	673b      	str	r3, [r7, #112]	@ 0x70
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	677b      	str	r3, [r7, #116]	@ 0x74
 8009e60:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009e64:	460b      	mov	r3, r1
 8009e66:	4313      	orrs	r3, r2
 8009e68:	d034      	beq.n	8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d003      	beq.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8009e74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e78:	d007      	beq.n	8009e8a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8009e7a:	e011      	b.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e7c:	4b12      	ldr	r3, [pc, #72]	@ (8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e80:	4a11      	ldr	r2, [pc, #68]	@ (8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009e88:	e00e      	b.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e8e:	3308      	adds	r3, #8
 8009e90:	2102      	movs	r1, #2
 8009e92:	4618      	mov	r0, r3
 8009e94:	f000 f9e6 	bl	800a264 <RCCEx_PLL2_Config>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009e9e:	e003      	b.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009ea6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ea8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d10d      	bne.n	8009ecc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009eb0:	4b05      	ldr	r3, [pc, #20]	@ (8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009eb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009eb4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ebc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ebe:	4a02      	ldr	r2, [pc, #8]	@ (8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ec0:	430b      	orrs	r3, r1
 8009ec2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009ec4:	e006      	b.n	8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8009ec6:	bf00      	nop
 8009ec8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ecc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ed0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009ed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009edc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009ee0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009ee6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8009eea:	460b      	mov	r3, r1
 8009eec:	4313      	orrs	r3, r2
 8009eee:	d00c      	beq.n	8009f0a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ef4:	3328      	adds	r3, #40	@ 0x28
 8009ef6:	2102      	movs	r1, #2
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f000 fa65 	bl	800a3c8 <RCCEx_PLL3_Config>
 8009efe:	4603      	mov	r3, r0
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d002      	beq.n	8009f0a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8009f04:	2301      	movs	r3, #1
 8009f06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f12:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009f16:	663b      	str	r3, [r7, #96]	@ 0x60
 8009f18:	2300      	movs	r3, #0
 8009f1a:	667b      	str	r3, [r7, #100]	@ 0x64
 8009f1c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009f20:	460b      	mov	r3, r1
 8009f22:	4313      	orrs	r3, r2
 8009f24:	d038      	beq.n	8009f98 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009f32:	d018      	beq.n	8009f66 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009f34:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009f38:	d811      	bhi.n	8009f5e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009f3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f3e:	d014      	beq.n	8009f6a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009f40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f44:	d80b      	bhi.n	8009f5e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d011      	beq.n	8009f6e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8009f4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f4e:	d106      	bne.n	8009f5e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f50:	4bc3      	ldr	r3, [pc, #780]	@ (800a260 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f54:	4ac2      	ldr	r2, [pc, #776]	@ (800a260 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009f5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009f5c:	e008      	b.n	8009f70 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f5e:	2301      	movs	r3, #1
 8009f60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009f64:	e004      	b.n	8009f70 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009f66:	bf00      	nop
 8009f68:	e002      	b.n	8009f70 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009f6a:	bf00      	nop
 8009f6c:	e000      	b.n	8009f70 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009f6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d10b      	bne.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009f78:	4bb9      	ldr	r3, [pc, #740]	@ (800a260 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f7c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f88:	4ab5      	ldr	r2, [pc, #724]	@ (800a260 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f8a:	430b      	orrs	r3, r1
 8009f8c:	6553      	str	r3, [r2, #84]	@ 0x54
 8009f8e:	e003      	b.n	8009f98 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009fa4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009faa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009fae:	460b      	mov	r3, r1
 8009fb0:	4313      	orrs	r3, r2
 8009fb2:	d009      	beq.n	8009fc8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009fb4:	4baa      	ldr	r3, [pc, #680]	@ (800a260 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009fb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009fb8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009fc2:	4aa7      	ldr	r2, [pc, #668]	@ (800a260 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009fc4:	430b      	orrs	r3, r1
 8009fc6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8009fd4:	653b      	str	r3, [r7, #80]	@ 0x50
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	657b      	str	r3, [r7, #84]	@ 0x54
 8009fda:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8009fde:	460b      	mov	r3, r1
 8009fe0:	4313      	orrs	r3, r2
 8009fe2:	d00a      	beq.n	8009ffa <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009fe4:	4b9e      	ldr	r3, [pc, #632]	@ (800a260 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009fe6:	691b      	ldr	r3, [r3, #16]
 8009fe8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8009fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ff0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009ff4:	4a9a      	ldr	r2, [pc, #616]	@ (800a260 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ff6:	430b      	orrs	r3, r1
 8009ff8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a002:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800a006:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a008:	2300      	movs	r3, #0
 800a00a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a00c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800a010:	460b      	mov	r3, r1
 800a012:	4313      	orrs	r3, r2
 800a014:	d009      	beq.n	800a02a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a016:	4b92      	ldr	r3, [pc, #584]	@ (800a260 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a018:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a01a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800a01e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a022:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a024:	4a8e      	ldr	r2, [pc, #568]	@ (800a260 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a026:	430b      	orrs	r3, r1
 800a028:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a02a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a032:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800a036:	643b      	str	r3, [r7, #64]	@ 0x40
 800a038:	2300      	movs	r3, #0
 800a03a:	647b      	str	r3, [r7, #68]	@ 0x44
 800a03c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800a040:	460b      	mov	r3, r1
 800a042:	4313      	orrs	r3, r2
 800a044:	d00e      	beq.n	800a064 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a046:	4b86      	ldr	r3, [pc, #536]	@ (800a260 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a048:	691b      	ldr	r3, [r3, #16]
 800a04a:	4a85      	ldr	r2, [pc, #532]	@ (800a260 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a04c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a050:	6113      	str	r3, [r2, #16]
 800a052:	4b83      	ldr	r3, [pc, #524]	@ (800a260 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a054:	6919      	ldr	r1, [r3, #16]
 800a056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a05a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a05e:	4a80      	ldr	r2, [pc, #512]	@ (800a260 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a060:	430b      	orrs	r3, r1
 800a062:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a064:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a06c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800a070:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a072:	2300      	movs	r3, #0
 800a074:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a076:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a07a:	460b      	mov	r3, r1
 800a07c:	4313      	orrs	r3, r2
 800a07e:	d009      	beq.n	800a094 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a080:	4b77      	ldr	r3, [pc, #476]	@ (800a260 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a082:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a084:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a088:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a08c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a08e:	4a74      	ldr	r2, [pc, #464]	@ (800a260 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a090:	430b      	orrs	r3, r1
 800a092:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a094:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a09c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a0a0:	633b      	str	r3, [r7, #48]	@ 0x30
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0a6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a0aa:	460b      	mov	r3, r1
 800a0ac:	4313      	orrs	r3, r2
 800a0ae:	d00a      	beq.n	800a0c6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a0b0:	4b6b      	ldr	r3, [pc, #428]	@ (800a260 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a0b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0b4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800a0b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a0c0:	4a67      	ldr	r2, [pc, #412]	@ (800a260 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a0c2:	430b      	orrs	r3, r1
 800a0c4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a0c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ce:	2100      	movs	r1, #0
 800a0d0:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a0d2:	f003 0301 	and.w	r3, r3, #1
 800a0d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a0d8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a0dc:	460b      	mov	r3, r1
 800a0de:	4313      	orrs	r3, r2
 800a0e0:	d011      	beq.n	800a106 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a0e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0e6:	3308      	adds	r3, #8
 800a0e8:	2100      	movs	r1, #0
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	f000 f8ba 	bl	800a264 <RCCEx_PLL2_Config>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a0f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d003      	beq.n	800a106 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a102:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a106:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a10a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a10e:	2100      	movs	r1, #0
 800a110:	6239      	str	r1, [r7, #32]
 800a112:	f003 0302 	and.w	r3, r3, #2
 800a116:	627b      	str	r3, [r7, #36]	@ 0x24
 800a118:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a11c:	460b      	mov	r3, r1
 800a11e:	4313      	orrs	r3, r2
 800a120:	d011      	beq.n	800a146 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a122:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a126:	3308      	adds	r3, #8
 800a128:	2101      	movs	r1, #1
 800a12a:	4618      	mov	r0, r3
 800a12c:	f000 f89a 	bl	800a264 <RCCEx_PLL2_Config>
 800a130:	4603      	mov	r3, r0
 800a132:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a136:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d003      	beq.n	800a146 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a13e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a142:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a14e:	2100      	movs	r1, #0
 800a150:	61b9      	str	r1, [r7, #24]
 800a152:	f003 0304 	and.w	r3, r3, #4
 800a156:	61fb      	str	r3, [r7, #28]
 800a158:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a15c:	460b      	mov	r3, r1
 800a15e:	4313      	orrs	r3, r2
 800a160:	d011      	beq.n	800a186 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a162:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a166:	3308      	adds	r3, #8
 800a168:	2102      	movs	r1, #2
 800a16a:	4618      	mov	r0, r3
 800a16c:	f000 f87a 	bl	800a264 <RCCEx_PLL2_Config>
 800a170:	4603      	mov	r3, r0
 800a172:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a176:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d003      	beq.n	800a186 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a17e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a182:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a186:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a18e:	2100      	movs	r1, #0
 800a190:	6139      	str	r1, [r7, #16]
 800a192:	f003 0308 	and.w	r3, r3, #8
 800a196:	617b      	str	r3, [r7, #20]
 800a198:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a19c:	460b      	mov	r3, r1
 800a19e:	4313      	orrs	r3, r2
 800a1a0:	d011      	beq.n	800a1c6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a1a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1a6:	3328      	adds	r3, #40	@ 0x28
 800a1a8:	2100      	movs	r1, #0
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f000 f90c 	bl	800a3c8 <RCCEx_PLL3_Config>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800a1b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d003      	beq.n	800a1c6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a1c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ce:	2100      	movs	r1, #0
 800a1d0:	60b9      	str	r1, [r7, #8]
 800a1d2:	f003 0310 	and.w	r3, r3, #16
 800a1d6:	60fb      	str	r3, [r7, #12]
 800a1d8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a1dc:	460b      	mov	r3, r1
 800a1de:	4313      	orrs	r3, r2
 800a1e0:	d011      	beq.n	800a206 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a1e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1e6:	3328      	adds	r3, #40	@ 0x28
 800a1e8:	2101      	movs	r1, #1
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f000 f8ec 	bl	800a3c8 <RCCEx_PLL3_Config>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a1f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d003      	beq.n	800a206 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a202:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a206:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a20e:	2100      	movs	r1, #0
 800a210:	6039      	str	r1, [r7, #0]
 800a212:	f003 0320 	and.w	r3, r3, #32
 800a216:	607b      	str	r3, [r7, #4]
 800a218:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a21c:	460b      	mov	r3, r1
 800a21e:	4313      	orrs	r3, r2
 800a220:	d011      	beq.n	800a246 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a222:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a226:	3328      	adds	r3, #40	@ 0x28
 800a228:	2102      	movs	r1, #2
 800a22a:	4618      	mov	r0, r3
 800a22c:	f000 f8cc 	bl	800a3c8 <RCCEx_PLL3_Config>
 800a230:	4603      	mov	r3, r0
 800a232:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a236:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d003      	beq.n	800a246 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a23e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a242:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800a246:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d101      	bne.n	800a252 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800a24e:	2300      	movs	r3, #0
 800a250:	e000      	b.n	800a254 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800a252:	2301      	movs	r3, #1
}
 800a254:	4618      	mov	r0, r3
 800a256:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800a25a:	46bd      	mov	sp, r7
 800a25c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a260:	58024400 	.word	0x58024400

0800a264 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b084      	sub	sp, #16
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
 800a26c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a26e:	2300      	movs	r3, #0
 800a270:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a272:	4b53      	ldr	r3, [pc, #332]	@ (800a3c0 <RCCEx_PLL2_Config+0x15c>)
 800a274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a276:	f003 0303 	and.w	r3, r3, #3
 800a27a:	2b03      	cmp	r3, #3
 800a27c:	d101      	bne.n	800a282 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a27e:	2301      	movs	r3, #1
 800a280:	e099      	b.n	800a3b6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a282:	4b4f      	ldr	r3, [pc, #316]	@ (800a3c0 <RCCEx_PLL2_Config+0x15c>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	4a4e      	ldr	r2, [pc, #312]	@ (800a3c0 <RCCEx_PLL2_Config+0x15c>)
 800a288:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a28c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a28e:	f7fd fa5b 	bl	8007748 <HAL_GetTick>
 800a292:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a294:	e008      	b.n	800a2a8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a296:	f7fd fa57 	bl	8007748 <HAL_GetTick>
 800a29a:	4602      	mov	r2, r0
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	1ad3      	subs	r3, r2, r3
 800a2a0:	2b02      	cmp	r3, #2
 800a2a2:	d901      	bls.n	800a2a8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a2a4:	2303      	movs	r3, #3
 800a2a6:	e086      	b.n	800a3b6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a2a8:	4b45      	ldr	r3, [pc, #276]	@ (800a3c0 <RCCEx_PLL2_Config+0x15c>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d1f0      	bne.n	800a296 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a2b4:	4b42      	ldr	r3, [pc, #264]	@ (800a3c0 <RCCEx_PLL2_Config+0x15c>)
 800a2b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2b8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	031b      	lsls	r3, r3, #12
 800a2c2:	493f      	ldr	r1, [pc, #252]	@ (800a3c0 <RCCEx_PLL2_Config+0x15c>)
 800a2c4:	4313      	orrs	r3, r2
 800a2c6:	628b      	str	r3, [r1, #40]	@ 0x28
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	685b      	ldr	r3, [r3, #4]
 800a2cc:	3b01      	subs	r3, #1
 800a2ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	689b      	ldr	r3, [r3, #8]
 800a2d6:	3b01      	subs	r3, #1
 800a2d8:	025b      	lsls	r3, r3, #9
 800a2da:	b29b      	uxth	r3, r3
 800a2dc:	431a      	orrs	r2, r3
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	68db      	ldr	r3, [r3, #12]
 800a2e2:	3b01      	subs	r3, #1
 800a2e4:	041b      	lsls	r3, r3, #16
 800a2e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a2ea:	431a      	orrs	r2, r3
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	691b      	ldr	r3, [r3, #16]
 800a2f0:	3b01      	subs	r3, #1
 800a2f2:	061b      	lsls	r3, r3, #24
 800a2f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a2f8:	4931      	ldr	r1, [pc, #196]	@ (800a3c0 <RCCEx_PLL2_Config+0x15c>)
 800a2fa:	4313      	orrs	r3, r2
 800a2fc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a2fe:	4b30      	ldr	r3, [pc, #192]	@ (800a3c0 <RCCEx_PLL2_Config+0x15c>)
 800a300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a302:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	695b      	ldr	r3, [r3, #20]
 800a30a:	492d      	ldr	r1, [pc, #180]	@ (800a3c0 <RCCEx_PLL2_Config+0x15c>)
 800a30c:	4313      	orrs	r3, r2
 800a30e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a310:	4b2b      	ldr	r3, [pc, #172]	@ (800a3c0 <RCCEx_PLL2_Config+0x15c>)
 800a312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a314:	f023 0220 	bic.w	r2, r3, #32
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	699b      	ldr	r3, [r3, #24]
 800a31c:	4928      	ldr	r1, [pc, #160]	@ (800a3c0 <RCCEx_PLL2_Config+0x15c>)
 800a31e:	4313      	orrs	r3, r2
 800a320:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a322:	4b27      	ldr	r3, [pc, #156]	@ (800a3c0 <RCCEx_PLL2_Config+0x15c>)
 800a324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a326:	4a26      	ldr	r2, [pc, #152]	@ (800a3c0 <RCCEx_PLL2_Config+0x15c>)
 800a328:	f023 0310 	bic.w	r3, r3, #16
 800a32c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a32e:	4b24      	ldr	r3, [pc, #144]	@ (800a3c0 <RCCEx_PLL2_Config+0x15c>)
 800a330:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a332:	4b24      	ldr	r3, [pc, #144]	@ (800a3c4 <RCCEx_PLL2_Config+0x160>)
 800a334:	4013      	ands	r3, r2
 800a336:	687a      	ldr	r2, [r7, #4]
 800a338:	69d2      	ldr	r2, [r2, #28]
 800a33a:	00d2      	lsls	r2, r2, #3
 800a33c:	4920      	ldr	r1, [pc, #128]	@ (800a3c0 <RCCEx_PLL2_Config+0x15c>)
 800a33e:	4313      	orrs	r3, r2
 800a340:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a342:	4b1f      	ldr	r3, [pc, #124]	@ (800a3c0 <RCCEx_PLL2_Config+0x15c>)
 800a344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a346:	4a1e      	ldr	r2, [pc, #120]	@ (800a3c0 <RCCEx_PLL2_Config+0x15c>)
 800a348:	f043 0310 	orr.w	r3, r3, #16
 800a34c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d106      	bne.n	800a362 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a354:	4b1a      	ldr	r3, [pc, #104]	@ (800a3c0 <RCCEx_PLL2_Config+0x15c>)
 800a356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a358:	4a19      	ldr	r2, [pc, #100]	@ (800a3c0 <RCCEx_PLL2_Config+0x15c>)
 800a35a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a35e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a360:	e00f      	b.n	800a382 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	2b01      	cmp	r3, #1
 800a366:	d106      	bne.n	800a376 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a368:	4b15      	ldr	r3, [pc, #84]	@ (800a3c0 <RCCEx_PLL2_Config+0x15c>)
 800a36a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a36c:	4a14      	ldr	r2, [pc, #80]	@ (800a3c0 <RCCEx_PLL2_Config+0x15c>)
 800a36e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a372:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a374:	e005      	b.n	800a382 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a376:	4b12      	ldr	r3, [pc, #72]	@ (800a3c0 <RCCEx_PLL2_Config+0x15c>)
 800a378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a37a:	4a11      	ldr	r2, [pc, #68]	@ (800a3c0 <RCCEx_PLL2_Config+0x15c>)
 800a37c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a380:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a382:	4b0f      	ldr	r3, [pc, #60]	@ (800a3c0 <RCCEx_PLL2_Config+0x15c>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	4a0e      	ldr	r2, [pc, #56]	@ (800a3c0 <RCCEx_PLL2_Config+0x15c>)
 800a388:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a38c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a38e:	f7fd f9db 	bl	8007748 <HAL_GetTick>
 800a392:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a394:	e008      	b.n	800a3a8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a396:	f7fd f9d7 	bl	8007748 <HAL_GetTick>
 800a39a:	4602      	mov	r2, r0
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	1ad3      	subs	r3, r2, r3
 800a3a0:	2b02      	cmp	r3, #2
 800a3a2:	d901      	bls.n	800a3a8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a3a4:	2303      	movs	r3, #3
 800a3a6:	e006      	b.n	800a3b6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a3a8:	4b05      	ldr	r3, [pc, #20]	@ (800a3c0 <RCCEx_PLL2_Config+0x15c>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d0f0      	beq.n	800a396 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a3b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	3710      	adds	r7, #16
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}
 800a3be:	bf00      	nop
 800a3c0:	58024400 	.word	0x58024400
 800a3c4:	ffff0007 	.word	0xffff0007

0800a3c8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b084      	sub	sp, #16
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
 800a3d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a3d6:	4b53      	ldr	r3, [pc, #332]	@ (800a524 <RCCEx_PLL3_Config+0x15c>)
 800a3d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3da:	f003 0303 	and.w	r3, r3, #3
 800a3de:	2b03      	cmp	r3, #3
 800a3e0:	d101      	bne.n	800a3e6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	e099      	b.n	800a51a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a3e6:	4b4f      	ldr	r3, [pc, #316]	@ (800a524 <RCCEx_PLL3_Config+0x15c>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	4a4e      	ldr	r2, [pc, #312]	@ (800a524 <RCCEx_PLL3_Config+0x15c>)
 800a3ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a3f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a3f2:	f7fd f9a9 	bl	8007748 <HAL_GetTick>
 800a3f6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a3f8:	e008      	b.n	800a40c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a3fa:	f7fd f9a5 	bl	8007748 <HAL_GetTick>
 800a3fe:	4602      	mov	r2, r0
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	1ad3      	subs	r3, r2, r3
 800a404:	2b02      	cmp	r3, #2
 800a406:	d901      	bls.n	800a40c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a408:	2303      	movs	r3, #3
 800a40a:	e086      	b.n	800a51a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a40c:	4b45      	ldr	r3, [pc, #276]	@ (800a524 <RCCEx_PLL3_Config+0x15c>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a414:	2b00      	cmp	r3, #0
 800a416:	d1f0      	bne.n	800a3fa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a418:	4b42      	ldr	r3, [pc, #264]	@ (800a524 <RCCEx_PLL3_Config+0x15c>)
 800a41a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a41c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	051b      	lsls	r3, r3, #20
 800a426:	493f      	ldr	r1, [pc, #252]	@ (800a524 <RCCEx_PLL3_Config+0x15c>)
 800a428:	4313      	orrs	r3, r2
 800a42a:	628b      	str	r3, [r1, #40]	@ 0x28
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	685b      	ldr	r3, [r3, #4]
 800a430:	3b01      	subs	r3, #1
 800a432:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	689b      	ldr	r3, [r3, #8]
 800a43a:	3b01      	subs	r3, #1
 800a43c:	025b      	lsls	r3, r3, #9
 800a43e:	b29b      	uxth	r3, r3
 800a440:	431a      	orrs	r2, r3
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	68db      	ldr	r3, [r3, #12]
 800a446:	3b01      	subs	r3, #1
 800a448:	041b      	lsls	r3, r3, #16
 800a44a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a44e:	431a      	orrs	r2, r3
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	691b      	ldr	r3, [r3, #16]
 800a454:	3b01      	subs	r3, #1
 800a456:	061b      	lsls	r3, r3, #24
 800a458:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a45c:	4931      	ldr	r1, [pc, #196]	@ (800a524 <RCCEx_PLL3_Config+0x15c>)
 800a45e:	4313      	orrs	r3, r2
 800a460:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a462:	4b30      	ldr	r3, [pc, #192]	@ (800a524 <RCCEx_PLL3_Config+0x15c>)
 800a464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a466:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	695b      	ldr	r3, [r3, #20]
 800a46e:	492d      	ldr	r1, [pc, #180]	@ (800a524 <RCCEx_PLL3_Config+0x15c>)
 800a470:	4313      	orrs	r3, r2
 800a472:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a474:	4b2b      	ldr	r3, [pc, #172]	@ (800a524 <RCCEx_PLL3_Config+0x15c>)
 800a476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a478:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	699b      	ldr	r3, [r3, #24]
 800a480:	4928      	ldr	r1, [pc, #160]	@ (800a524 <RCCEx_PLL3_Config+0x15c>)
 800a482:	4313      	orrs	r3, r2
 800a484:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a486:	4b27      	ldr	r3, [pc, #156]	@ (800a524 <RCCEx_PLL3_Config+0x15c>)
 800a488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a48a:	4a26      	ldr	r2, [pc, #152]	@ (800a524 <RCCEx_PLL3_Config+0x15c>)
 800a48c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a490:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a492:	4b24      	ldr	r3, [pc, #144]	@ (800a524 <RCCEx_PLL3_Config+0x15c>)
 800a494:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a496:	4b24      	ldr	r3, [pc, #144]	@ (800a528 <RCCEx_PLL3_Config+0x160>)
 800a498:	4013      	ands	r3, r2
 800a49a:	687a      	ldr	r2, [r7, #4]
 800a49c:	69d2      	ldr	r2, [r2, #28]
 800a49e:	00d2      	lsls	r2, r2, #3
 800a4a0:	4920      	ldr	r1, [pc, #128]	@ (800a524 <RCCEx_PLL3_Config+0x15c>)
 800a4a2:	4313      	orrs	r3, r2
 800a4a4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a4a6:	4b1f      	ldr	r3, [pc, #124]	@ (800a524 <RCCEx_PLL3_Config+0x15c>)
 800a4a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4aa:	4a1e      	ldr	r2, [pc, #120]	@ (800a524 <RCCEx_PLL3_Config+0x15c>)
 800a4ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a4b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d106      	bne.n	800a4c6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a4b8:	4b1a      	ldr	r3, [pc, #104]	@ (800a524 <RCCEx_PLL3_Config+0x15c>)
 800a4ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4bc:	4a19      	ldr	r2, [pc, #100]	@ (800a524 <RCCEx_PLL3_Config+0x15c>)
 800a4be:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a4c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a4c4:	e00f      	b.n	800a4e6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	2b01      	cmp	r3, #1
 800a4ca:	d106      	bne.n	800a4da <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a4cc:	4b15      	ldr	r3, [pc, #84]	@ (800a524 <RCCEx_PLL3_Config+0x15c>)
 800a4ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4d0:	4a14      	ldr	r2, [pc, #80]	@ (800a524 <RCCEx_PLL3_Config+0x15c>)
 800a4d2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a4d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a4d8:	e005      	b.n	800a4e6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a4da:	4b12      	ldr	r3, [pc, #72]	@ (800a524 <RCCEx_PLL3_Config+0x15c>)
 800a4dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4de:	4a11      	ldr	r2, [pc, #68]	@ (800a524 <RCCEx_PLL3_Config+0x15c>)
 800a4e0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a4e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a4e6:	4b0f      	ldr	r3, [pc, #60]	@ (800a524 <RCCEx_PLL3_Config+0x15c>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	4a0e      	ldr	r2, [pc, #56]	@ (800a524 <RCCEx_PLL3_Config+0x15c>)
 800a4ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a4f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a4f2:	f7fd f929 	bl	8007748 <HAL_GetTick>
 800a4f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a4f8:	e008      	b.n	800a50c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a4fa:	f7fd f925 	bl	8007748 <HAL_GetTick>
 800a4fe:	4602      	mov	r2, r0
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	1ad3      	subs	r3, r2, r3
 800a504:	2b02      	cmp	r3, #2
 800a506:	d901      	bls.n	800a50c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a508:	2303      	movs	r3, #3
 800a50a:	e006      	b.n	800a51a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a50c:	4b05      	ldr	r3, [pc, #20]	@ (800a524 <RCCEx_PLL3_Config+0x15c>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a514:	2b00      	cmp	r3, #0
 800a516:	d0f0      	beq.n	800a4fa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a518:	7bfb      	ldrb	r3, [r7, #15]
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	3710      	adds	r7, #16
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}
 800a522:	bf00      	nop
 800a524:	58024400 	.word	0x58024400
 800a528:	ffff0007 	.word	0xffff0007

0800a52c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b084      	sub	sp, #16
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d101      	bne.n	800a53e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a53a:	2301      	movs	r3, #1
 800a53c:	e10f      	b.n	800a75e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2200      	movs	r2, #0
 800a542:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	4a87      	ldr	r2, [pc, #540]	@ (800a768 <HAL_SPI_Init+0x23c>)
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d00f      	beq.n	800a56e <HAL_SPI_Init+0x42>
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	4a86      	ldr	r2, [pc, #536]	@ (800a76c <HAL_SPI_Init+0x240>)
 800a554:	4293      	cmp	r3, r2
 800a556:	d00a      	beq.n	800a56e <HAL_SPI_Init+0x42>
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	4a84      	ldr	r2, [pc, #528]	@ (800a770 <HAL_SPI_Init+0x244>)
 800a55e:	4293      	cmp	r3, r2
 800a560:	d005      	beq.n	800a56e <HAL_SPI_Init+0x42>
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	68db      	ldr	r3, [r3, #12]
 800a566:	2b0f      	cmp	r3, #15
 800a568:	d901      	bls.n	800a56e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800a56a:	2301      	movs	r3, #1
 800a56c:	e0f7      	b.n	800a75e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f000 fd08 	bl	800af84 <SPI_GetPacketSize>
 800a574:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	4a7b      	ldr	r2, [pc, #492]	@ (800a768 <HAL_SPI_Init+0x23c>)
 800a57c:	4293      	cmp	r3, r2
 800a57e:	d00c      	beq.n	800a59a <HAL_SPI_Init+0x6e>
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	4a79      	ldr	r2, [pc, #484]	@ (800a76c <HAL_SPI_Init+0x240>)
 800a586:	4293      	cmp	r3, r2
 800a588:	d007      	beq.n	800a59a <HAL_SPI_Init+0x6e>
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	4a78      	ldr	r2, [pc, #480]	@ (800a770 <HAL_SPI_Init+0x244>)
 800a590:	4293      	cmp	r3, r2
 800a592:	d002      	beq.n	800a59a <HAL_SPI_Init+0x6e>
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	2b08      	cmp	r3, #8
 800a598:	d811      	bhi.n	800a5be <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a59e:	4a72      	ldr	r2, [pc, #456]	@ (800a768 <HAL_SPI_Init+0x23c>)
 800a5a0:	4293      	cmp	r3, r2
 800a5a2:	d009      	beq.n	800a5b8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	4a70      	ldr	r2, [pc, #448]	@ (800a76c <HAL_SPI_Init+0x240>)
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	d004      	beq.n	800a5b8 <HAL_SPI_Init+0x8c>
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	4a6f      	ldr	r2, [pc, #444]	@ (800a770 <HAL_SPI_Init+0x244>)
 800a5b4:	4293      	cmp	r3, r2
 800a5b6:	d104      	bne.n	800a5c2 <HAL_SPI_Init+0x96>
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	2b10      	cmp	r3, #16
 800a5bc:	d901      	bls.n	800a5c2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800a5be:	2301      	movs	r3, #1
 800a5c0:	e0cd      	b.n	800a75e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a5c8:	b2db      	uxtb	r3, r3
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d106      	bne.n	800a5dc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f7fc fdb2 	bl	8007140 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2202      	movs	r2, #2
 800a5e0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	681a      	ldr	r2, [r3, #0]
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	f022 0201 	bic.w	r2, r2, #1
 800a5f2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	689b      	ldr	r3, [r3, #8]
 800a5fa:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800a5fe:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	699b      	ldr	r3, [r3, #24]
 800a604:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a608:	d119      	bne.n	800a63e <HAL_SPI_Init+0x112>
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	685b      	ldr	r3, [r3, #4]
 800a60e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a612:	d103      	bne.n	800a61c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d008      	beq.n	800a62e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a620:	2b00      	cmp	r3, #0
 800a622:	d10c      	bne.n	800a63e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a628:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a62c:	d107      	bne.n	800a63e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	681a      	ldr	r2, [r3, #0]
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a63c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	685b      	ldr	r3, [r3, #4]
 800a642:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a646:	2b00      	cmp	r3, #0
 800a648:	d00f      	beq.n	800a66a <HAL_SPI_Init+0x13e>
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	68db      	ldr	r3, [r3, #12]
 800a64e:	2b06      	cmp	r3, #6
 800a650:	d90b      	bls.n	800a66a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	430a      	orrs	r2, r1
 800a666:	601a      	str	r2, [r3, #0]
 800a668:	e007      	b.n	800a67a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	681a      	ldr	r2, [r3, #0]
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a678:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	69da      	ldr	r2, [r3, #28]
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a682:	431a      	orrs	r2, r3
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	431a      	orrs	r2, r3
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a68c:	ea42 0103 	orr.w	r1, r2, r3
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	68da      	ldr	r2, [r3, #12]
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	430a      	orrs	r2, r1
 800a69a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6a4:	431a      	orrs	r2, r3
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6aa:	431a      	orrs	r2, r3
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	699b      	ldr	r3, [r3, #24]
 800a6b0:	431a      	orrs	r2, r3
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	691b      	ldr	r3, [r3, #16]
 800a6b6:	431a      	orrs	r2, r3
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	695b      	ldr	r3, [r3, #20]
 800a6bc:	431a      	orrs	r2, r3
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6a1b      	ldr	r3, [r3, #32]
 800a6c2:	431a      	orrs	r2, r3
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	685b      	ldr	r3, [r3, #4]
 800a6c8:	431a      	orrs	r2, r3
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a6ce:	431a      	orrs	r2, r3
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	689b      	ldr	r3, [r3, #8]
 800a6d4:	431a      	orrs	r2, r3
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a6da:	ea42 0103 	orr.w	r1, r2, r3
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	430a      	orrs	r2, r1
 800a6e8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	685b      	ldr	r3, [r3, #4]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d113      	bne.n	800a71a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	689b      	ldr	r3, [r3, #8]
 800a6f8:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a704:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	689b      	ldr	r3, [r3, #8]
 800a70c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a718:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f022 0201 	bic.w	r2, r2, #1
 800a728:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	685b      	ldr	r3, [r3, #4]
 800a72e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a732:	2b00      	cmp	r3, #0
 800a734:	d00a      	beq.n	800a74c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	68db      	ldr	r3, [r3, #12]
 800a73c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	430a      	orrs	r2, r1
 800a74a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2200      	movs	r2, #0
 800a750:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2201      	movs	r2, #1
 800a758:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800a75c:	2300      	movs	r3, #0
}
 800a75e:	4618      	mov	r0, r3
 800a760:	3710      	adds	r7, #16
 800a762:	46bd      	mov	sp, r7
 800a764:	bd80      	pop	{r7, pc}
 800a766:	bf00      	nop
 800a768:	40013000 	.word	0x40013000
 800a76c:	40003800 	.word	0x40003800
 800a770:	40003c00 	.word	0x40003c00

0800a774 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b08e      	sub	sp, #56	@ 0x38
 800a778:	af02      	add	r7, sp, #8
 800a77a:	60f8      	str	r0, [r7, #12]
 800a77c:	60b9      	str	r1, [r7, #8]
 800a77e:	607a      	str	r2, [r7, #4]
 800a780:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	3320      	adds	r3, #32
 800a788:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	3330      	adds	r3, #48	@ 0x30
 800a790:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a796:	095b      	lsrs	r3, r3, #5
 800a798:	b29b      	uxth	r3, r3
 800a79a:	3301      	adds	r3, #1
 800a79c:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a79e:	f7fc ffd3 	bl	8007748 <HAL_GetTick>
 800a7a2:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800a7a4:	887b      	ldrh	r3, [r7, #2]
 800a7a6:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 800a7a8:	887b      	ldrh	r3, [r7, #2]
 800a7aa:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a7b2:	b2db      	uxtb	r3, r3
 800a7b4:	2b01      	cmp	r3, #1
 800a7b6:	d001      	beq.n	800a7bc <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 800a7b8:	2302      	movs	r3, #2
 800a7ba:	e310      	b.n	800adde <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d005      	beq.n	800a7ce <HAL_SPI_TransmitReceive+0x5a>
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d002      	beq.n	800a7ce <HAL_SPI_TransmitReceive+0x5a>
 800a7c8:	887b      	ldrh	r3, [r7, #2]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d101      	bne.n	800a7d2 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	e305      	b.n	800adde <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a7d8:	2b01      	cmp	r3, #1
 800a7da:	d101      	bne.n	800a7e0 <HAL_SPI_TransmitReceive+0x6c>
 800a7dc:	2302      	movs	r3, #2
 800a7de:	e2fe      	b.n	800adde <HAL_SPI_TransmitReceive+0x66a>
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	2205      	movs	r2, #5
 800a7ec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	687a      	ldr	r2, [r7, #4]
 800a7fc:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	887a      	ldrh	r2, [r7, #2]
 800a802:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	887a      	ldrh	r2, [r7, #2]
 800a80a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	68ba      	ldr	r2, [r7, #8]
 800a812:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	887a      	ldrh	r2, [r7, #2]
 800a818:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	887a      	ldrh	r2, [r7, #2]
 800a820:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	2200      	movs	r2, #0
 800a828:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	2200      	movs	r2, #0
 800a82e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	68da      	ldr	r2, [r3, #12]
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800a83e:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	4a70      	ldr	r2, [pc, #448]	@ (800aa08 <HAL_SPI_TransmitReceive+0x294>)
 800a846:	4293      	cmp	r3, r2
 800a848:	d009      	beq.n	800a85e <HAL_SPI_TransmitReceive+0xea>
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	4a6f      	ldr	r2, [pc, #444]	@ (800aa0c <HAL_SPI_TransmitReceive+0x298>)
 800a850:	4293      	cmp	r3, r2
 800a852:	d004      	beq.n	800a85e <HAL_SPI_TransmitReceive+0xea>
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	4a6d      	ldr	r2, [pc, #436]	@ (800aa10 <HAL_SPI_TransmitReceive+0x29c>)
 800a85a:	4293      	cmp	r3, r2
 800a85c:	d102      	bne.n	800a864 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800a85e:	2310      	movs	r3, #16
 800a860:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a862:	e001      	b.n	800a868 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800a864:	2308      	movs	r3, #8
 800a866:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	685a      	ldr	r2, [r3, #4]
 800a86e:	4b69      	ldr	r3, [pc, #420]	@ (800aa14 <HAL_SPI_TransmitReceive+0x2a0>)
 800a870:	4013      	ands	r3, r2
 800a872:	8879      	ldrh	r1, [r7, #2]
 800a874:	68fa      	ldr	r2, [r7, #12]
 800a876:	6812      	ldr	r2, [r2, #0]
 800a878:	430b      	orrs	r3, r1
 800a87a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	681a      	ldr	r2, [r3, #0]
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f042 0201 	orr.w	r2, r2, #1
 800a88a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	685b      	ldr	r3, [r3, #4]
 800a890:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a894:	d107      	bne.n	800a8a6 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	681a      	ldr	r2, [r3, #0]
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a8a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	68db      	ldr	r3, [r3, #12]
 800a8aa:	2b0f      	cmp	r3, #15
 800a8ac:	f240 80a2 	bls.w	800a9f4 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800a8b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8b2:	089b      	lsrs	r3, r3, #2
 800a8b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a8b6:	e094      	b.n	800a9e2 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	695b      	ldr	r3, [r3, #20]
 800a8be:	f003 0302 	and.w	r3, r3, #2
 800a8c2:	2b02      	cmp	r3, #2
 800a8c4:	d120      	bne.n	800a908 <HAL_SPI_TransmitReceive+0x194>
 800a8c6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d01d      	beq.n	800a908 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800a8cc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800a8ce:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800a8d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8d2:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800a8d4:	429a      	cmp	r2, r3
 800a8d6:	d217      	bcs.n	800a908 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	6812      	ldr	r2, [r2, #0]
 800a8e2:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a8e8:	1d1a      	adds	r2, r3, #4
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a8f4:	b29b      	uxth	r3, r3
 800a8f6:	3b01      	subs	r3, #1
 800a8f8:	b29a      	uxth	r2, r3
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a906:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	695b      	ldr	r3, [r3, #20]
 800a90e:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800a910:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a912:	2b00      	cmp	r3, #0
 800a914:	d065      	beq.n	800a9e2 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	695b      	ldr	r3, [r3, #20]
 800a91c:	f003 0301 	and.w	r3, r3, #1
 800a920:	2b01      	cmp	r3, #1
 800a922:	d118      	bne.n	800a956 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	681a      	ldr	r2, [r3, #0]
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a92c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a92e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a934:	1d1a      	adds	r2, r3, #4
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a940:	b29b      	uxth	r3, r3
 800a942:	3b01      	subs	r3, #1
 800a944:	b29a      	uxth	r2, r3
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a952:	853b      	strh	r3, [r7, #40]	@ 0x28
 800a954:	e045      	b.n	800a9e2 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800a956:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800a958:	8bfb      	ldrh	r3, [r7, #30]
 800a95a:	429a      	cmp	r2, r3
 800a95c:	d21d      	bcs.n	800a99a <HAL_SPI_TransmitReceive+0x226>
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a964:	2b00      	cmp	r3, #0
 800a966:	d018      	beq.n	800a99a <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	681a      	ldr	r2, [r3, #0]
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a970:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a972:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a978:	1d1a      	adds	r2, r3, #4
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a984:	b29b      	uxth	r3, r3
 800a986:	3b01      	subs	r3, #1
 800a988:	b29a      	uxth	r2, r3
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a996:	853b      	strh	r3, [r7, #40]	@ 0x28
 800a998:	e023      	b.n	800a9e2 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a99a:	f7fc fed5 	bl	8007748 <HAL_GetTick>
 800a99e:	4602      	mov	r2, r0
 800a9a0:	69bb      	ldr	r3, [r7, #24]
 800a9a2:	1ad3      	subs	r3, r2, r3
 800a9a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a9a6:	429a      	cmp	r2, r3
 800a9a8:	d803      	bhi.n	800a9b2 <HAL_SPI_TransmitReceive+0x23e>
 800a9aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9b0:	d102      	bne.n	800a9b8 <HAL_SPI_TransmitReceive+0x244>
 800a9b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d114      	bne.n	800a9e2 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800a9b8:	68f8      	ldr	r0, [r7, #12]
 800a9ba:	f000 fa15 	bl	800ade8 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a9c4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	2201      	movs	r2, #1
 800a9d2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	2200      	movs	r2, #0
 800a9da:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800a9de:	2303      	movs	r3, #3
 800a9e0:	e1fd      	b.n	800adde <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a9e2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	f47f af67 	bne.w	800a8b8 <HAL_SPI_TransmitReceive+0x144>
 800a9ea:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	f47f af63 	bne.w	800a8b8 <HAL_SPI_TransmitReceive+0x144>
 800a9f2:	e1ce      	b.n	800ad92 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	68db      	ldr	r3, [r3, #12]
 800a9f8:	2b07      	cmp	r3, #7
 800a9fa:	f240 81c2 	bls.w	800ad82 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800a9fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa00:	085b      	lsrs	r3, r3, #1
 800aa02:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800aa04:	e0c9      	b.n	800ab9a <HAL_SPI_TransmitReceive+0x426>
 800aa06:	bf00      	nop
 800aa08:	40013000 	.word	0x40013000
 800aa0c:	40003800 	.word	0x40003800
 800aa10:	40003c00 	.word	0x40003c00
 800aa14:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	695b      	ldr	r3, [r3, #20]
 800aa1e:	f003 0302 	and.w	r3, r3, #2
 800aa22:	2b02      	cmp	r3, #2
 800aa24:	d11f      	bne.n	800aa66 <HAL_SPI_TransmitReceive+0x2f2>
 800aa26:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d01c      	beq.n	800aa66 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800aa2c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800aa2e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800aa30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa32:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800aa34:	429a      	cmp	r2, r3
 800aa36:	d216      	bcs.n	800aa66 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aa3c:	881a      	ldrh	r2, [r3, #0]
 800aa3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa40:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aa46:	1c9a      	adds	r2, r3, #2
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800aa52:	b29b      	uxth	r3, r3
 800aa54:	3b01      	subs	r3, #1
 800aa56:	b29a      	uxth	r2, r3
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800aa64:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	695b      	ldr	r3, [r3, #20]
 800aa6c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800aa6e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	f000 8092 	beq.w	800ab9a <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	695b      	ldr	r3, [r3, #20]
 800aa7c:	f003 0301 	and.w	r3, r3, #1
 800aa80:	2b01      	cmp	r3, #1
 800aa82:	d118      	bne.n	800aab6 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa88:	6a3a      	ldr	r2, [r7, #32]
 800aa8a:	8812      	ldrh	r2, [r2, #0]
 800aa8c:	b292      	uxth	r2, r2
 800aa8e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa94:	1c9a      	adds	r2, r3, #2
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800aaa0:	b29b      	uxth	r3, r3
 800aaa2:	3b01      	subs	r3, #1
 800aaa4:	b29a      	uxth	r2, r3
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800aab2:	853b      	strh	r3, [r7, #40]	@ 0x28
 800aab4:	e071      	b.n	800ab9a <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800aab6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800aab8:	8bfb      	ldrh	r3, [r7, #30]
 800aaba:	429a      	cmp	r2, r3
 800aabc:	d228      	bcs.n	800ab10 <HAL_SPI_TransmitReceive+0x39c>
 800aabe:	697b      	ldr	r3, [r7, #20]
 800aac0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d023      	beq.n	800ab10 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aacc:	6a3a      	ldr	r2, [r7, #32]
 800aace:	8812      	ldrh	r2, [r2, #0]
 800aad0:	b292      	uxth	r2, r2
 800aad2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aad8:	1c9a      	adds	r2, r3, #2
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aae2:	6a3a      	ldr	r2, [r7, #32]
 800aae4:	8812      	ldrh	r2, [r2, #0]
 800aae6:	b292      	uxth	r2, r2
 800aae8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aaee:	1c9a      	adds	r2, r3, #2
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800aafa:	b29b      	uxth	r3, r3
 800aafc:	3b02      	subs	r3, #2
 800aafe:	b29a      	uxth	r2, r3
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ab0c:	853b      	strh	r3, [r7, #40]	@ 0x28
 800ab0e:	e044      	b.n	800ab9a <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800ab10:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ab12:	2b01      	cmp	r3, #1
 800ab14:	d11d      	bne.n	800ab52 <HAL_SPI_TransmitReceive+0x3de>
 800ab16:	697b      	ldr	r3, [r7, #20]
 800ab18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d018      	beq.n	800ab52 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab24:	6a3a      	ldr	r2, [r7, #32]
 800ab26:	8812      	ldrh	r2, [r2, #0]
 800ab28:	b292      	uxth	r2, r2
 800ab2a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab30:	1c9a      	adds	r2, r3, #2
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ab3c:	b29b      	uxth	r3, r3
 800ab3e:	3b01      	subs	r3, #1
 800ab40:	b29a      	uxth	r2, r3
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ab4e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800ab50:	e023      	b.n	800ab9a <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ab52:	f7fc fdf9 	bl	8007748 <HAL_GetTick>
 800ab56:	4602      	mov	r2, r0
 800ab58:	69bb      	ldr	r3, [r7, #24]
 800ab5a:	1ad3      	subs	r3, r2, r3
 800ab5c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ab5e:	429a      	cmp	r2, r3
 800ab60:	d803      	bhi.n	800ab6a <HAL_SPI_TransmitReceive+0x3f6>
 800ab62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab68:	d102      	bne.n	800ab70 <HAL_SPI_TransmitReceive+0x3fc>
 800ab6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d114      	bne.n	800ab9a <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800ab70:	68f8      	ldr	r0, [r7, #12]
 800ab72:	f000 f939 	bl	800ade8 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab7c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	2201      	movs	r2, #1
 800ab8a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	2200      	movs	r2, #0
 800ab92:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800ab96:	2303      	movs	r3, #3
 800ab98:	e121      	b.n	800adde <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ab9a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	f47f af3b 	bne.w	800aa18 <HAL_SPI_TransmitReceive+0x2a4>
 800aba2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	f47f af37 	bne.w	800aa18 <HAL_SPI_TransmitReceive+0x2a4>
 800abaa:	e0f2      	b.n	800ad92 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	695b      	ldr	r3, [r3, #20]
 800abb2:	f003 0302 	and.w	r3, r3, #2
 800abb6:	2b02      	cmp	r3, #2
 800abb8:	d121      	bne.n	800abfe <HAL_SPI_TransmitReceive+0x48a>
 800abba:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d01e      	beq.n	800abfe <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800abc0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800abc2:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800abc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abc6:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800abc8:	429a      	cmp	r2, r3
 800abca:	d218      	bcs.n	800abfe <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	3320      	adds	r3, #32
 800abd6:	7812      	ldrb	r2, [r2, #0]
 800abd8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800abde:	1c5a      	adds	r2, r3, #1
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800abea:	b29b      	uxth	r3, r3
 800abec:	3b01      	subs	r3, #1
 800abee:	b29a      	uxth	r2, r3
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800abfc:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	695b      	ldr	r3, [r3, #20]
 800ac04:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800ac06:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	f000 80ba 	beq.w	800ad82 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	695b      	ldr	r3, [r3, #20]
 800ac14:	f003 0301 	and.w	r3, r3, #1
 800ac18:	2b01      	cmp	r3, #1
 800ac1a:	d11b      	bne.n	800ac54 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac28:	7812      	ldrb	r2, [r2, #0]
 800ac2a:	b2d2      	uxtb	r2, r2
 800ac2c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac32:	1c5a      	adds	r2, r3, #1
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ac3e:	b29b      	uxth	r3, r3
 800ac40:	3b01      	subs	r3, #1
 800ac42:	b29a      	uxth	r2, r3
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ac50:	853b      	strh	r3, [r7, #40]	@ 0x28
 800ac52:	e096      	b.n	800ad82 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800ac54:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800ac56:	8bfb      	ldrh	r3, [r7, #30]
 800ac58:	429a      	cmp	r2, r3
 800ac5a:	d24a      	bcs.n	800acf2 <HAL_SPI_TransmitReceive+0x57e>
 800ac5c:	697b      	ldr	r3, [r7, #20]
 800ac5e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d045      	beq.n	800acf2 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac72:	7812      	ldrb	r2, [r2, #0]
 800ac74:	b2d2      	uxtb	r2, r2
 800ac76:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac7c:	1c5a      	adds	r2, r3, #1
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac8e:	7812      	ldrb	r2, [r2, #0]
 800ac90:	b2d2      	uxtb	r2, r2
 800ac92:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac98:	1c5a      	adds	r2, r3, #1
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800acaa:	7812      	ldrb	r2, [r2, #0]
 800acac:	b2d2      	uxtb	r2, r2
 800acae:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800acb4:	1c5a      	adds	r2, r3, #1
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800acc6:	7812      	ldrb	r2, [r2, #0]
 800acc8:	b2d2      	uxtb	r2, r2
 800acca:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800acd0:	1c5a      	adds	r2, r3, #1
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800acdc:	b29b      	uxth	r3, r3
 800acde:	3b04      	subs	r3, #4
 800ace0:	b29a      	uxth	r2, r3
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800acee:	853b      	strh	r3, [r7, #40]	@ 0x28
 800acf0:	e047      	b.n	800ad82 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800acf2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800acf4:	2b03      	cmp	r3, #3
 800acf6:	d820      	bhi.n	800ad3a <HAL_SPI_TransmitReceive+0x5c6>
 800acf8:	697b      	ldr	r3, [r7, #20]
 800acfa:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d01b      	beq.n	800ad3a <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ad0e:	7812      	ldrb	r2, [r2, #0]
 800ad10:	b2d2      	uxtb	r2, r2
 800ad12:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ad18:	1c5a      	adds	r2, r3, #1
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ad24:	b29b      	uxth	r3, r3
 800ad26:	3b01      	subs	r3, #1
 800ad28:	b29a      	uxth	r2, r3
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ad36:	853b      	strh	r3, [r7, #40]	@ 0x28
 800ad38:	e023      	b.n	800ad82 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ad3a:	f7fc fd05 	bl	8007748 <HAL_GetTick>
 800ad3e:	4602      	mov	r2, r0
 800ad40:	69bb      	ldr	r3, [r7, #24]
 800ad42:	1ad3      	subs	r3, r2, r3
 800ad44:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ad46:	429a      	cmp	r2, r3
 800ad48:	d803      	bhi.n	800ad52 <HAL_SPI_TransmitReceive+0x5de>
 800ad4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad50:	d102      	bne.n	800ad58 <HAL_SPI_TransmitReceive+0x5e4>
 800ad52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d114      	bne.n	800ad82 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800ad58:	68f8      	ldr	r0, [r7, #12]
 800ad5a:	f000 f845 	bl	800ade8 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ad64:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	2201      	movs	r2, #1
 800ad72:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	2200      	movs	r2, #0
 800ad7a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800ad7e:	2303      	movs	r3, #3
 800ad80:	e02d      	b.n	800adde <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ad82:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	f47f af11 	bne.w	800abac <HAL_SPI_TransmitReceive+0x438>
 800ad8a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	f47f af0d 	bne.w	800abac <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800ad92:	69bb      	ldr	r3, [r7, #24]
 800ad94:	9300      	str	r3, [sp, #0]
 800ad96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad98:	2200      	movs	r2, #0
 800ad9a:	2108      	movs	r1, #8
 800ad9c:	68f8      	ldr	r0, [r7, #12]
 800ad9e:	f000 f8c3 	bl	800af28 <SPI_WaitOnFlagUntilTimeout>
 800ada2:	4603      	mov	r3, r0
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d007      	beq.n	800adb8 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800adae:	f043 0220 	orr.w	r2, r3, #32
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800adb8:	68f8      	ldr	r0, [r7, #12]
 800adba:	f000 f815 	bl	800ade8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	2201      	movs	r2, #1
 800adc2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	2200      	movs	r2, #0
 800adca:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800add4:	2b00      	cmp	r3, #0
 800add6:	d001      	beq.n	800addc <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800add8:	2301      	movs	r3, #1
 800adda:	e000      	b.n	800adde <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800addc:	2300      	movs	r3, #0
  }
}
 800adde:	4618      	mov	r0, r3
 800ade0:	3730      	adds	r7, #48	@ 0x30
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}
 800ade6:	bf00      	nop

0800ade8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800ade8:	b480      	push	{r7}
 800adea:	b085      	sub	sp, #20
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	695b      	ldr	r3, [r3, #20]
 800adf6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	699a      	ldr	r2, [r3, #24]
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	f042 0208 	orr.w	r2, r2, #8
 800ae06:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	699a      	ldr	r2, [r3, #24]
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	f042 0210 	orr.w	r2, r2, #16
 800ae16:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	681a      	ldr	r2, [r3, #0]
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	f022 0201 	bic.w	r2, r2, #1
 800ae26:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	6919      	ldr	r1, [r3, #16]
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681a      	ldr	r2, [r3, #0]
 800ae32:	4b3c      	ldr	r3, [pc, #240]	@ (800af24 <SPI_CloseTransfer+0x13c>)
 800ae34:	400b      	ands	r3, r1
 800ae36:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	689a      	ldr	r2, [r3, #8]
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800ae46:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ae4e:	b2db      	uxtb	r3, r3
 800ae50:	2b04      	cmp	r3, #4
 800ae52:	d014      	beq.n	800ae7e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	f003 0320 	and.w	r3, r3, #32
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d00f      	beq.n	800ae7e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ae64:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	699a      	ldr	r2, [r3, #24]
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	f042 0220 	orr.w	r2, r2, #32
 800ae7c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ae84:	b2db      	uxtb	r3, r3
 800ae86:	2b03      	cmp	r3, #3
 800ae88:	d014      	beq.n	800aeb4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d00f      	beq.n	800aeb4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ae9a:	f043 0204 	orr.w	r2, r3, #4
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	699a      	ldr	r2, [r3, #24]
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800aeb2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d00f      	beq.n	800aede <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aec4:	f043 0201 	orr.w	r2, r3, #1
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	699a      	ldr	r2, [r3, #24]
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aedc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d00f      	beq.n	800af08 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aeee:	f043 0208 	orr.w	r2, r3, #8
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	699a      	ldr	r2, [r3, #24]
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800af06:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2200      	movs	r2, #0
 800af0c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2200      	movs	r2, #0
 800af14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800af18:	bf00      	nop
 800af1a:	3714      	adds	r7, #20
 800af1c:	46bd      	mov	sp, r7
 800af1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af22:	4770      	bx	lr
 800af24:	fffffc90 	.word	0xfffffc90

0800af28 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b084      	sub	sp, #16
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	60f8      	str	r0, [r7, #12]
 800af30:	60b9      	str	r1, [r7, #8]
 800af32:	603b      	str	r3, [r7, #0]
 800af34:	4613      	mov	r3, r2
 800af36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800af38:	e010      	b.n	800af5c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800af3a:	f7fc fc05 	bl	8007748 <HAL_GetTick>
 800af3e:	4602      	mov	r2, r0
 800af40:	69bb      	ldr	r3, [r7, #24]
 800af42:	1ad3      	subs	r3, r2, r3
 800af44:	683a      	ldr	r2, [r7, #0]
 800af46:	429a      	cmp	r2, r3
 800af48:	d803      	bhi.n	800af52 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af50:	d102      	bne.n	800af58 <SPI_WaitOnFlagUntilTimeout+0x30>
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d101      	bne.n	800af5c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800af58:	2303      	movs	r3, #3
 800af5a:	e00f      	b.n	800af7c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	695a      	ldr	r2, [r3, #20]
 800af62:	68bb      	ldr	r3, [r7, #8]
 800af64:	4013      	ands	r3, r2
 800af66:	68ba      	ldr	r2, [r7, #8]
 800af68:	429a      	cmp	r2, r3
 800af6a:	bf0c      	ite	eq
 800af6c:	2301      	moveq	r3, #1
 800af6e:	2300      	movne	r3, #0
 800af70:	b2db      	uxtb	r3, r3
 800af72:	461a      	mov	r2, r3
 800af74:	79fb      	ldrb	r3, [r7, #7]
 800af76:	429a      	cmp	r2, r3
 800af78:	d0df      	beq.n	800af3a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800af7a:	2300      	movs	r3, #0
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	3710      	adds	r7, #16
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}

0800af84 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800af84:	b480      	push	{r7}
 800af86:	b085      	sub	sp, #20
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af90:	095b      	lsrs	r3, r3, #5
 800af92:	3301      	adds	r3, #1
 800af94:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	68db      	ldr	r3, [r3, #12]
 800af9a:	3301      	adds	r3, #1
 800af9c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	3307      	adds	r3, #7
 800afa2:	08db      	lsrs	r3, r3, #3
 800afa4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	68fa      	ldr	r2, [r7, #12]
 800afaa:	fb02 f303 	mul.w	r3, r2, r3
}
 800afae:	4618      	mov	r0, r3
 800afb0:	3714      	adds	r7, #20
 800afb2:	46bd      	mov	sp, r7
 800afb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb8:	4770      	bx	lr

0800afba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800afba:	b580      	push	{r7, lr}
 800afbc:	b082      	sub	sp, #8
 800afbe:	af00      	add	r7, sp, #0
 800afc0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d101      	bne.n	800afcc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800afc8:	2301      	movs	r3, #1
 800afca:	e049      	b.n	800b060 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800afd2:	b2db      	uxtb	r3, r3
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d106      	bne.n	800afe6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2200      	movs	r2, #0
 800afdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	f7fc fabf 	bl	8007564 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	2202      	movs	r2, #2
 800afea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681a      	ldr	r2, [r3, #0]
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	3304      	adds	r3, #4
 800aff6:	4619      	mov	r1, r3
 800aff8:	4610      	mov	r0, r2
 800affa:	f000 f91d 	bl	800b238 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2201      	movs	r2, #1
 800b002:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2201      	movs	r2, #1
 800b00a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2201      	movs	r2, #1
 800b012:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	2201      	movs	r2, #1
 800b01a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	2201      	movs	r2, #1
 800b022:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2201      	movs	r2, #1
 800b02a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2201      	movs	r2, #1
 800b032:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	2201      	movs	r2, #1
 800b03a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2201      	movs	r2, #1
 800b042:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2201      	movs	r2, #1
 800b04a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2201      	movs	r2, #1
 800b052:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2201      	movs	r2, #1
 800b05a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b05e:	2300      	movs	r3, #0
}
 800b060:	4618      	mov	r0, r3
 800b062:	3708      	adds	r7, #8
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}

0800b068 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b068:	b480      	push	{r7}
 800b06a:	b085      	sub	sp, #20
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b076:	b2db      	uxtb	r3, r3
 800b078:	2b01      	cmp	r3, #1
 800b07a:	d001      	beq.n	800b080 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b07c:	2301      	movs	r3, #1
 800b07e:	e04c      	b.n	800b11a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2202      	movs	r2, #2
 800b084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	4a26      	ldr	r2, [pc, #152]	@ (800b128 <HAL_TIM_Base_Start+0xc0>)
 800b08e:	4293      	cmp	r3, r2
 800b090:	d022      	beq.n	800b0d8 <HAL_TIM_Base_Start+0x70>
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b09a:	d01d      	beq.n	800b0d8 <HAL_TIM_Base_Start+0x70>
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	4a22      	ldr	r2, [pc, #136]	@ (800b12c <HAL_TIM_Base_Start+0xc4>)
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	d018      	beq.n	800b0d8 <HAL_TIM_Base_Start+0x70>
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	4a21      	ldr	r2, [pc, #132]	@ (800b130 <HAL_TIM_Base_Start+0xc8>)
 800b0ac:	4293      	cmp	r3, r2
 800b0ae:	d013      	beq.n	800b0d8 <HAL_TIM_Base_Start+0x70>
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	4a1f      	ldr	r2, [pc, #124]	@ (800b134 <HAL_TIM_Base_Start+0xcc>)
 800b0b6:	4293      	cmp	r3, r2
 800b0b8:	d00e      	beq.n	800b0d8 <HAL_TIM_Base_Start+0x70>
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	4a1e      	ldr	r2, [pc, #120]	@ (800b138 <HAL_TIM_Base_Start+0xd0>)
 800b0c0:	4293      	cmp	r3, r2
 800b0c2:	d009      	beq.n	800b0d8 <HAL_TIM_Base_Start+0x70>
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	4a1c      	ldr	r2, [pc, #112]	@ (800b13c <HAL_TIM_Base_Start+0xd4>)
 800b0ca:	4293      	cmp	r3, r2
 800b0cc:	d004      	beq.n	800b0d8 <HAL_TIM_Base_Start+0x70>
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	4a1b      	ldr	r2, [pc, #108]	@ (800b140 <HAL_TIM_Base_Start+0xd8>)
 800b0d4:	4293      	cmp	r3, r2
 800b0d6:	d115      	bne.n	800b104 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	689a      	ldr	r2, [r3, #8]
 800b0de:	4b19      	ldr	r3, [pc, #100]	@ (800b144 <HAL_TIM_Base_Start+0xdc>)
 800b0e0:	4013      	ands	r3, r2
 800b0e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	2b06      	cmp	r3, #6
 800b0e8:	d015      	beq.n	800b116 <HAL_TIM_Base_Start+0xae>
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b0f0:	d011      	beq.n	800b116 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	681a      	ldr	r2, [r3, #0]
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	f042 0201 	orr.w	r2, r2, #1
 800b100:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b102:	e008      	b.n	800b116 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	681a      	ldr	r2, [r3, #0]
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	f042 0201 	orr.w	r2, r2, #1
 800b112:	601a      	str	r2, [r3, #0]
 800b114:	e000      	b.n	800b118 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b116:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b118:	2300      	movs	r3, #0
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	3714      	adds	r7, #20
 800b11e:	46bd      	mov	sp, r7
 800b120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b124:	4770      	bx	lr
 800b126:	bf00      	nop
 800b128:	40010000 	.word	0x40010000
 800b12c:	40000400 	.word	0x40000400
 800b130:	40000800 	.word	0x40000800
 800b134:	40000c00 	.word	0x40000c00
 800b138:	40010400 	.word	0x40010400
 800b13c:	40001800 	.word	0x40001800
 800b140:	40014000 	.word	0x40014000
 800b144:	00010007 	.word	0x00010007

0800b148 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b148:	b480      	push	{r7}
 800b14a:	b085      	sub	sp, #20
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b156:	b2db      	uxtb	r3, r3
 800b158:	2b01      	cmp	r3, #1
 800b15a:	d001      	beq.n	800b160 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b15c:	2301      	movs	r3, #1
 800b15e:	e054      	b.n	800b20a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2202      	movs	r2, #2
 800b164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	68da      	ldr	r2, [r3, #12]
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	f042 0201 	orr.w	r2, r2, #1
 800b176:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	4a26      	ldr	r2, [pc, #152]	@ (800b218 <HAL_TIM_Base_Start_IT+0xd0>)
 800b17e:	4293      	cmp	r3, r2
 800b180:	d022      	beq.n	800b1c8 <HAL_TIM_Base_Start_IT+0x80>
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b18a:	d01d      	beq.n	800b1c8 <HAL_TIM_Base_Start_IT+0x80>
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	4a22      	ldr	r2, [pc, #136]	@ (800b21c <HAL_TIM_Base_Start_IT+0xd4>)
 800b192:	4293      	cmp	r3, r2
 800b194:	d018      	beq.n	800b1c8 <HAL_TIM_Base_Start_IT+0x80>
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	4a21      	ldr	r2, [pc, #132]	@ (800b220 <HAL_TIM_Base_Start_IT+0xd8>)
 800b19c:	4293      	cmp	r3, r2
 800b19e:	d013      	beq.n	800b1c8 <HAL_TIM_Base_Start_IT+0x80>
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	4a1f      	ldr	r2, [pc, #124]	@ (800b224 <HAL_TIM_Base_Start_IT+0xdc>)
 800b1a6:	4293      	cmp	r3, r2
 800b1a8:	d00e      	beq.n	800b1c8 <HAL_TIM_Base_Start_IT+0x80>
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	4a1e      	ldr	r2, [pc, #120]	@ (800b228 <HAL_TIM_Base_Start_IT+0xe0>)
 800b1b0:	4293      	cmp	r3, r2
 800b1b2:	d009      	beq.n	800b1c8 <HAL_TIM_Base_Start_IT+0x80>
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	4a1c      	ldr	r2, [pc, #112]	@ (800b22c <HAL_TIM_Base_Start_IT+0xe4>)
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	d004      	beq.n	800b1c8 <HAL_TIM_Base_Start_IT+0x80>
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	4a1b      	ldr	r2, [pc, #108]	@ (800b230 <HAL_TIM_Base_Start_IT+0xe8>)
 800b1c4:	4293      	cmp	r3, r2
 800b1c6:	d115      	bne.n	800b1f4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	689a      	ldr	r2, [r3, #8]
 800b1ce:	4b19      	ldr	r3, [pc, #100]	@ (800b234 <HAL_TIM_Base_Start_IT+0xec>)
 800b1d0:	4013      	ands	r3, r2
 800b1d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	2b06      	cmp	r3, #6
 800b1d8:	d015      	beq.n	800b206 <HAL_TIM_Base_Start_IT+0xbe>
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b1e0:	d011      	beq.n	800b206 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	681a      	ldr	r2, [r3, #0]
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	f042 0201 	orr.w	r2, r2, #1
 800b1f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b1f2:	e008      	b.n	800b206 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	681a      	ldr	r2, [r3, #0]
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	f042 0201 	orr.w	r2, r2, #1
 800b202:	601a      	str	r2, [r3, #0]
 800b204:	e000      	b.n	800b208 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b206:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b208:	2300      	movs	r3, #0
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	3714      	adds	r7, #20
 800b20e:	46bd      	mov	sp, r7
 800b210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b214:	4770      	bx	lr
 800b216:	bf00      	nop
 800b218:	40010000 	.word	0x40010000
 800b21c:	40000400 	.word	0x40000400
 800b220:	40000800 	.word	0x40000800
 800b224:	40000c00 	.word	0x40000c00
 800b228:	40010400 	.word	0x40010400
 800b22c:	40001800 	.word	0x40001800
 800b230:	40014000 	.word	0x40014000
 800b234:	00010007 	.word	0x00010007

0800b238 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b238:	b480      	push	{r7}
 800b23a:	b085      	sub	sp, #20
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
 800b240:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	4a43      	ldr	r2, [pc, #268]	@ (800b358 <TIM_Base_SetConfig+0x120>)
 800b24c:	4293      	cmp	r3, r2
 800b24e:	d013      	beq.n	800b278 <TIM_Base_SetConfig+0x40>
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b256:	d00f      	beq.n	800b278 <TIM_Base_SetConfig+0x40>
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	4a40      	ldr	r2, [pc, #256]	@ (800b35c <TIM_Base_SetConfig+0x124>)
 800b25c:	4293      	cmp	r3, r2
 800b25e:	d00b      	beq.n	800b278 <TIM_Base_SetConfig+0x40>
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	4a3f      	ldr	r2, [pc, #252]	@ (800b360 <TIM_Base_SetConfig+0x128>)
 800b264:	4293      	cmp	r3, r2
 800b266:	d007      	beq.n	800b278 <TIM_Base_SetConfig+0x40>
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	4a3e      	ldr	r2, [pc, #248]	@ (800b364 <TIM_Base_SetConfig+0x12c>)
 800b26c:	4293      	cmp	r3, r2
 800b26e:	d003      	beq.n	800b278 <TIM_Base_SetConfig+0x40>
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	4a3d      	ldr	r2, [pc, #244]	@ (800b368 <TIM_Base_SetConfig+0x130>)
 800b274:	4293      	cmp	r3, r2
 800b276:	d108      	bne.n	800b28a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b27e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	685b      	ldr	r3, [r3, #4]
 800b284:	68fa      	ldr	r2, [r7, #12]
 800b286:	4313      	orrs	r3, r2
 800b288:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	4a32      	ldr	r2, [pc, #200]	@ (800b358 <TIM_Base_SetConfig+0x120>)
 800b28e:	4293      	cmp	r3, r2
 800b290:	d01f      	beq.n	800b2d2 <TIM_Base_SetConfig+0x9a>
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b298:	d01b      	beq.n	800b2d2 <TIM_Base_SetConfig+0x9a>
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	4a2f      	ldr	r2, [pc, #188]	@ (800b35c <TIM_Base_SetConfig+0x124>)
 800b29e:	4293      	cmp	r3, r2
 800b2a0:	d017      	beq.n	800b2d2 <TIM_Base_SetConfig+0x9a>
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	4a2e      	ldr	r2, [pc, #184]	@ (800b360 <TIM_Base_SetConfig+0x128>)
 800b2a6:	4293      	cmp	r3, r2
 800b2a8:	d013      	beq.n	800b2d2 <TIM_Base_SetConfig+0x9a>
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	4a2d      	ldr	r2, [pc, #180]	@ (800b364 <TIM_Base_SetConfig+0x12c>)
 800b2ae:	4293      	cmp	r3, r2
 800b2b0:	d00f      	beq.n	800b2d2 <TIM_Base_SetConfig+0x9a>
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	4a2c      	ldr	r2, [pc, #176]	@ (800b368 <TIM_Base_SetConfig+0x130>)
 800b2b6:	4293      	cmp	r3, r2
 800b2b8:	d00b      	beq.n	800b2d2 <TIM_Base_SetConfig+0x9a>
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	4a2b      	ldr	r2, [pc, #172]	@ (800b36c <TIM_Base_SetConfig+0x134>)
 800b2be:	4293      	cmp	r3, r2
 800b2c0:	d007      	beq.n	800b2d2 <TIM_Base_SetConfig+0x9a>
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	4a2a      	ldr	r2, [pc, #168]	@ (800b370 <TIM_Base_SetConfig+0x138>)
 800b2c6:	4293      	cmp	r3, r2
 800b2c8:	d003      	beq.n	800b2d2 <TIM_Base_SetConfig+0x9a>
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	4a29      	ldr	r2, [pc, #164]	@ (800b374 <TIM_Base_SetConfig+0x13c>)
 800b2ce:	4293      	cmp	r3, r2
 800b2d0:	d108      	bne.n	800b2e4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b2d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	68db      	ldr	r3, [r3, #12]
 800b2de:	68fa      	ldr	r2, [r7, #12]
 800b2e0:	4313      	orrs	r3, r2
 800b2e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	695b      	ldr	r3, [r3, #20]
 800b2ee:	4313      	orrs	r3, r2
 800b2f0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	689a      	ldr	r2, [r3, #8]
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	681a      	ldr	r2, [r3, #0]
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	4a14      	ldr	r2, [pc, #80]	@ (800b358 <TIM_Base_SetConfig+0x120>)
 800b306:	4293      	cmp	r3, r2
 800b308:	d00f      	beq.n	800b32a <TIM_Base_SetConfig+0xf2>
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	4a16      	ldr	r2, [pc, #88]	@ (800b368 <TIM_Base_SetConfig+0x130>)
 800b30e:	4293      	cmp	r3, r2
 800b310:	d00b      	beq.n	800b32a <TIM_Base_SetConfig+0xf2>
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	4a15      	ldr	r2, [pc, #84]	@ (800b36c <TIM_Base_SetConfig+0x134>)
 800b316:	4293      	cmp	r3, r2
 800b318:	d007      	beq.n	800b32a <TIM_Base_SetConfig+0xf2>
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	4a14      	ldr	r2, [pc, #80]	@ (800b370 <TIM_Base_SetConfig+0x138>)
 800b31e:	4293      	cmp	r3, r2
 800b320:	d003      	beq.n	800b32a <TIM_Base_SetConfig+0xf2>
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	4a13      	ldr	r2, [pc, #76]	@ (800b374 <TIM_Base_SetConfig+0x13c>)
 800b326:	4293      	cmp	r3, r2
 800b328:	d103      	bne.n	800b332 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	691a      	ldr	r2, [r3, #16]
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	f043 0204 	orr.w	r2, r3, #4
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	2201      	movs	r2, #1
 800b342:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	68fa      	ldr	r2, [r7, #12]
 800b348:	601a      	str	r2, [r3, #0]
}
 800b34a:	bf00      	nop
 800b34c:	3714      	adds	r7, #20
 800b34e:	46bd      	mov	sp, r7
 800b350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b354:	4770      	bx	lr
 800b356:	bf00      	nop
 800b358:	40010000 	.word	0x40010000
 800b35c:	40000400 	.word	0x40000400
 800b360:	40000800 	.word	0x40000800
 800b364:	40000c00 	.word	0x40000c00
 800b368:	40010400 	.word	0x40010400
 800b36c:	40014000 	.word	0x40014000
 800b370:	40014400 	.word	0x40014400
 800b374:	40014800 	.word	0x40014800

0800b378 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b378:	b480      	push	{r7}
 800b37a:	b085      	sub	sp, #20
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
 800b380:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b388:	2b01      	cmp	r3, #1
 800b38a:	d101      	bne.n	800b390 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b38c:	2302      	movs	r3, #2
 800b38e:	e06d      	b.n	800b46c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2201      	movs	r2, #1
 800b394:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2202      	movs	r2, #2
 800b39c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	685b      	ldr	r3, [r3, #4]
 800b3a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	689b      	ldr	r3, [r3, #8]
 800b3ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	4a30      	ldr	r2, [pc, #192]	@ (800b478 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b3b6:	4293      	cmp	r3, r2
 800b3b8:	d004      	beq.n	800b3c4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	4a2f      	ldr	r2, [pc, #188]	@ (800b47c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b3c0:	4293      	cmp	r3, r2
 800b3c2:	d108      	bne.n	800b3d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b3ca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	685b      	ldr	r3, [r3, #4]
 800b3d0:	68fa      	ldr	r2, [r7, #12]
 800b3d2:	4313      	orrs	r3, r2
 800b3d4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b3dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	68fa      	ldr	r2, [r7, #12]
 800b3e4:	4313      	orrs	r3, r2
 800b3e6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	68fa      	ldr	r2, [r7, #12]
 800b3ee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	4a20      	ldr	r2, [pc, #128]	@ (800b478 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b3f6:	4293      	cmp	r3, r2
 800b3f8:	d022      	beq.n	800b440 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b402:	d01d      	beq.n	800b440 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	4a1d      	ldr	r2, [pc, #116]	@ (800b480 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b40a:	4293      	cmp	r3, r2
 800b40c:	d018      	beq.n	800b440 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	4a1c      	ldr	r2, [pc, #112]	@ (800b484 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b414:	4293      	cmp	r3, r2
 800b416:	d013      	beq.n	800b440 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	4a1a      	ldr	r2, [pc, #104]	@ (800b488 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b41e:	4293      	cmp	r3, r2
 800b420:	d00e      	beq.n	800b440 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	4a15      	ldr	r2, [pc, #84]	@ (800b47c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b428:	4293      	cmp	r3, r2
 800b42a:	d009      	beq.n	800b440 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	4a16      	ldr	r2, [pc, #88]	@ (800b48c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b432:	4293      	cmp	r3, r2
 800b434:	d004      	beq.n	800b440 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	4a15      	ldr	r2, [pc, #84]	@ (800b490 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b43c:	4293      	cmp	r3, r2
 800b43e:	d10c      	bne.n	800b45a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b440:	68bb      	ldr	r3, [r7, #8]
 800b442:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b446:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	689b      	ldr	r3, [r3, #8]
 800b44c:	68ba      	ldr	r2, [r7, #8]
 800b44e:	4313      	orrs	r3, r2
 800b450:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	68ba      	ldr	r2, [r7, #8]
 800b458:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	2201      	movs	r2, #1
 800b45e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	2200      	movs	r2, #0
 800b466:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b46a:	2300      	movs	r3, #0
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	3714      	adds	r7, #20
 800b470:	46bd      	mov	sp, r7
 800b472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b476:	4770      	bx	lr
 800b478:	40010000 	.word	0x40010000
 800b47c:	40010400 	.word	0x40010400
 800b480:	40000400 	.word	0x40000400
 800b484:	40000800 	.word	0x40000800
 800b488:	40000c00 	.word	0x40000c00
 800b48c:	40001800 	.word	0x40001800
 800b490:	40014000 	.word	0x40014000

0800b494 <malloc>:
 800b494:	4b02      	ldr	r3, [pc, #8]	@ (800b4a0 <malloc+0xc>)
 800b496:	4601      	mov	r1, r0
 800b498:	6818      	ldr	r0, [r3, #0]
 800b49a:	f000 b82d 	b.w	800b4f8 <_malloc_r>
 800b49e:	bf00      	nop
 800b4a0:	240003bc 	.word	0x240003bc

0800b4a4 <free>:
 800b4a4:	4b02      	ldr	r3, [pc, #8]	@ (800b4b0 <free+0xc>)
 800b4a6:	4601      	mov	r1, r0
 800b4a8:	6818      	ldr	r0, [r3, #0]
 800b4aa:	f000 b903 	b.w	800b6b4 <_free_r>
 800b4ae:	bf00      	nop
 800b4b0:	240003bc 	.word	0x240003bc

0800b4b4 <sbrk_aligned>:
 800b4b4:	b570      	push	{r4, r5, r6, lr}
 800b4b6:	4e0f      	ldr	r6, [pc, #60]	@ (800b4f4 <sbrk_aligned+0x40>)
 800b4b8:	460c      	mov	r4, r1
 800b4ba:	6831      	ldr	r1, [r6, #0]
 800b4bc:	4605      	mov	r5, r0
 800b4be:	b911      	cbnz	r1, 800b4c6 <sbrk_aligned+0x12>
 800b4c0:	f000 f8ae 	bl	800b620 <_sbrk_r>
 800b4c4:	6030      	str	r0, [r6, #0]
 800b4c6:	4621      	mov	r1, r4
 800b4c8:	4628      	mov	r0, r5
 800b4ca:	f000 f8a9 	bl	800b620 <_sbrk_r>
 800b4ce:	1c43      	adds	r3, r0, #1
 800b4d0:	d103      	bne.n	800b4da <sbrk_aligned+0x26>
 800b4d2:	f04f 34ff 	mov.w	r4, #4294967295
 800b4d6:	4620      	mov	r0, r4
 800b4d8:	bd70      	pop	{r4, r5, r6, pc}
 800b4da:	1cc4      	adds	r4, r0, #3
 800b4dc:	f024 0403 	bic.w	r4, r4, #3
 800b4e0:	42a0      	cmp	r0, r4
 800b4e2:	d0f8      	beq.n	800b4d6 <sbrk_aligned+0x22>
 800b4e4:	1a21      	subs	r1, r4, r0
 800b4e6:	4628      	mov	r0, r5
 800b4e8:	f000 f89a 	bl	800b620 <_sbrk_r>
 800b4ec:	3001      	adds	r0, #1
 800b4ee:	d1f2      	bne.n	800b4d6 <sbrk_aligned+0x22>
 800b4f0:	e7ef      	b.n	800b4d2 <sbrk_aligned+0x1e>
 800b4f2:	bf00      	nop
 800b4f4:	240007a4 	.word	0x240007a4

0800b4f8 <_malloc_r>:
 800b4f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4fc:	1ccd      	adds	r5, r1, #3
 800b4fe:	f025 0503 	bic.w	r5, r5, #3
 800b502:	3508      	adds	r5, #8
 800b504:	2d0c      	cmp	r5, #12
 800b506:	bf38      	it	cc
 800b508:	250c      	movcc	r5, #12
 800b50a:	2d00      	cmp	r5, #0
 800b50c:	4606      	mov	r6, r0
 800b50e:	db01      	blt.n	800b514 <_malloc_r+0x1c>
 800b510:	42a9      	cmp	r1, r5
 800b512:	d904      	bls.n	800b51e <_malloc_r+0x26>
 800b514:	230c      	movs	r3, #12
 800b516:	6033      	str	r3, [r6, #0]
 800b518:	2000      	movs	r0, #0
 800b51a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b51e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b5f4 <_malloc_r+0xfc>
 800b522:	f000 f869 	bl	800b5f8 <__malloc_lock>
 800b526:	f8d8 3000 	ldr.w	r3, [r8]
 800b52a:	461c      	mov	r4, r3
 800b52c:	bb44      	cbnz	r4, 800b580 <_malloc_r+0x88>
 800b52e:	4629      	mov	r1, r5
 800b530:	4630      	mov	r0, r6
 800b532:	f7ff ffbf 	bl	800b4b4 <sbrk_aligned>
 800b536:	1c43      	adds	r3, r0, #1
 800b538:	4604      	mov	r4, r0
 800b53a:	d158      	bne.n	800b5ee <_malloc_r+0xf6>
 800b53c:	f8d8 4000 	ldr.w	r4, [r8]
 800b540:	4627      	mov	r7, r4
 800b542:	2f00      	cmp	r7, #0
 800b544:	d143      	bne.n	800b5ce <_malloc_r+0xd6>
 800b546:	2c00      	cmp	r4, #0
 800b548:	d04b      	beq.n	800b5e2 <_malloc_r+0xea>
 800b54a:	6823      	ldr	r3, [r4, #0]
 800b54c:	4639      	mov	r1, r7
 800b54e:	4630      	mov	r0, r6
 800b550:	eb04 0903 	add.w	r9, r4, r3
 800b554:	f000 f864 	bl	800b620 <_sbrk_r>
 800b558:	4581      	cmp	r9, r0
 800b55a:	d142      	bne.n	800b5e2 <_malloc_r+0xea>
 800b55c:	6821      	ldr	r1, [r4, #0]
 800b55e:	1a6d      	subs	r5, r5, r1
 800b560:	4629      	mov	r1, r5
 800b562:	4630      	mov	r0, r6
 800b564:	f7ff ffa6 	bl	800b4b4 <sbrk_aligned>
 800b568:	3001      	adds	r0, #1
 800b56a:	d03a      	beq.n	800b5e2 <_malloc_r+0xea>
 800b56c:	6823      	ldr	r3, [r4, #0]
 800b56e:	442b      	add	r3, r5
 800b570:	6023      	str	r3, [r4, #0]
 800b572:	f8d8 3000 	ldr.w	r3, [r8]
 800b576:	685a      	ldr	r2, [r3, #4]
 800b578:	bb62      	cbnz	r2, 800b5d4 <_malloc_r+0xdc>
 800b57a:	f8c8 7000 	str.w	r7, [r8]
 800b57e:	e00f      	b.n	800b5a0 <_malloc_r+0xa8>
 800b580:	6822      	ldr	r2, [r4, #0]
 800b582:	1b52      	subs	r2, r2, r5
 800b584:	d420      	bmi.n	800b5c8 <_malloc_r+0xd0>
 800b586:	2a0b      	cmp	r2, #11
 800b588:	d917      	bls.n	800b5ba <_malloc_r+0xc2>
 800b58a:	1961      	adds	r1, r4, r5
 800b58c:	42a3      	cmp	r3, r4
 800b58e:	6025      	str	r5, [r4, #0]
 800b590:	bf18      	it	ne
 800b592:	6059      	strne	r1, [r3, #4]
 800b594:	6863      	ldr	r3, [r4, #4]
 800b596:	bf08      	it	eq
 800b598:	f8c8 1000 	streq.w	r1, [r8]
 800b59c:	5162      	str	r2, [r4, r5]
 800b59e:	604b      	str	r3, [r1, #4]
 800b5a0:	4630      	mov	r0, r6
 800b5a2:	f000 f82f 	bl	800b604 <__malloc_unlock>
 800b5a6:	f104 000b 	add.w	r0, r4, #11
 800b5aa:	1d23      	adds	r3, r4, #4
 800b5ac:	f020 0007 	bic.w	r0, r0, #7
 800b5b0:	1ac2      	subs	r2, r0, r3
 800b5b2:	bf1c      	itt	ne
 800b5b4:	1a1b      	subne	r3, r3, r0
 800b5b6:	50a3      	strne	r3, [r4, r2]
 800b5b8:	e7af      	b.n	800b51a <_malloc_r+0x22>
 800b5ba:	6862      	ldr	r2, [r4, #4]
 800b5bc:	42a3      	cmp	r3, r4
 800b5be:	bf0c      	ite	eq
 800b5c0:	f8c8 2000 	streq.w	r2, [r8]
 800b5c4:	605a      	strne	r2, [r3, #4]
 800b5c6:	e7eb      	b.n	800b5a0 <_malloc_r+0xa8>
 800b5c8:	4623      	mov	r3, r4
 800b5ca:	6864      	ldr	r4, [r4, #4]
 800b5cc:	e7ae      	b.n	800b52c <_malloc_r+0x34>
 800b5ce:	463c      	mov	r4, r7
 800b5d0:	687f      	ldr	r7, [r7, #4]
 800b5d2:	e7b6      	b.n	800b542 <_malloc_r+0x4a>
 800b5d4:	461a      	mov	r2, r3
 800b5d6:	685b      	ldr	r3, [r3, #4]
 800b5d8:	42a3      	cmp	r3, r4
 800b5da:	d1fb      	bne.n	800b5d4 <_malloc_r+0xdc>
 800b5dc:	2300      	movs	r3, #0
 800b5de:	6053      	str	r3, [r2, #4]
 800b5e0:	e7de      	b.n	800b5a0 <_malloc_r+0xa8>
 800b5e2:	230c      	movs	r3, #12
 800b5e4:	6033      	str	r3, [r6, #0]
 800b5e6:	4630      	mov	r0, r6
 800b5e8:	f000 f80c 	bl	800b604 <__malloc_unlock>
 800b5ec:	e794      	b.n	800b518 <_malloc_r+0x20>
 800b5ee:	6005      	str	r5, [r0, #0]
 800b5f0:	e7d6      	b.n	800b5a0 <_malloc_r+0xa8>
 800b5f2:	bf00      	nop
 800b5f4:	240007a8 	.word	0x240007a8

0800b5f8 <__malloc_lock>:
 800b5f8:	4801      	ldr	r0, [pc, #4]	@ (800b600 <__malloc_lock+0x8>)
 800b5fa:	f000 b84b 	b.w	800b694 <__retarget_lock_acquire_recursive>
 800b5fe:	bf00      	nop
 800b600:	240008e8 	.word	0x240008e8

0800b604 <__malloc_unlock>:
 800b604:	4801      	ldr	r0, [pc, #4]	@ (800b60c <__malloc_unlock+0x8>)
 800b606:	f000 b846 	b.w	800b696 <__retarget_lock_release_recursive>
 800b60a:	bf00      	nop
 800b60c:	240008e8 	.word	0x240008e8

0800b610 <memset>:
 800b610:	4402      	add	r2, r0
 800b612:	4603      	mov	r3, r0
 800b614:	4293      	cmp	r3, r2
 800b616:	d100      	bne.n	800b61a <memset+0xa>
 800b618:	4770      	bx	lr
 800b61a:	f803 1b01 	strb.w	r1, [r3], #1
 800b61e:	e7f9      	b.n	800b614 <memset+0x4>

0800b620 <_sbrk_r>:
 800b620:	b538      	push	{r3, r4, r5, lr}
 800b622:	4d06      	ldr	r5, [pc, #24]	@ (800b63c <_sbrk_r+0x1c>)
 800b624:	2300      	movs	r3, #0
 800b626:	4604      	mov	r4, r0
 800b628:	4608      	mov	r0, r1
 800b62a:	602b      	str	r3, [r5, #0]
 800b62c:	f7fb fe50 	bl	80072d0 <_sbrk>
 800b630:	1c43      	adds	r3, r0, #1
 800b632:	d102      	bne.n	800b63a <_sbrk_r+0x1a>
 800b634:	682b      	ldr	r3, [r5, #0]
 800b636:	b103      	cbz	r3, 800b63a <_sbrk_r+0x1a>
 800b638:	6023      	str	r3, [r4, #0]
 800b63a:	bd38      	pop	{r3, r4, r5, pc}
 800b63c:	240008e4 	.word	0x240008e4

0800b640 <__errno>:
 800b640:	4b01      	ldr	r3, [pc, #4]	@ (800b648 <__errno+0x8>)
 800b642:	6818      	ldr	r0, [r3, #0]
 800b644:	4770      	bx	lr
 800b646:	bf00      	nop
 800b648:	240003bc 	.word	0x240003bc

0800b64c <__libc_init_array>:
 800b64c:	b570      	push	{r4, r5, r6, lr}
 800b64e:	4d0d      	ldr	r5, [pc, #52]	@ (800b684 <__libc_init_array+0x38>)
 800b650:	4c0d      	ldr	r4, [pc, #52]	@ (800b688 <__libc_init_array+0x3c>)
 800b652:	1b64      	subs	r4, r4, r5
 800b654:	10a4      	asrs	r4, r4, #2
 800b656:	2600      	movs	r6, #0
 800b658:	42a6      	cmp	r6, r4
 800b65a:	d109      	bne.n	800b670 <__libc_init_array+0x24>
 800b65c:	4d0b      	ldr	r5, [pc, #44]	@ (800b68c <__libc_init_array+0x40>)
 800b65e:	4c0c      	ldr	r4, [pc, #48]	@ (800b690 <__libc_init_array+0x44>)
 800b660:	f000 f872 	bl	800b748 <_init>
 800b664:	1b64      	subs	r4, r4, r5
 800b666:	10a4      	asrs	r4, r4, #2
 800b668:	2600      	movs	r6, #0
 800b66a:	42a6      	cmp	r6, r4
 800b66c:	d105      	bne.n	800b67a <__libc_init_array+0x2e>
 800b66e:	bd70      	pop	{r4, r5, r6, pc}
 800b670:	f855 3b04 	ldr.w	r3, [r5], #4
 800b674:	4798      	blx	r3
 800b676:	3601      	adds	r6, #1
 800b678:	e7ee      	b.n	800b658 <__libc_init_array+0xc>
 800b67a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b67e:	4798      	blx	r3
 800b680:	3601      	adds	r6, #1
 800b682:	e7f2      	b.n	800b66a <__libc_init_array+0x1e>
 800b684:	0800bde0 	.word	0x0800bde0
 800b688:	0800bde0 	.word	0x0800bde0
 800b68c:	0800bde0 	.word	0x0800bde0
 800b690:	0800bde4 	.word	0x0800bde4

0800b694 <__retarget_lock_acquire_recursive>:
 800b694:	4770      	bx	lr

0800b696 <__retarget_lock_release_recursive>:
 800b696:	4770      	bx	lr

0800b698 <memcpy>:
 800b698:	440a      	add	r2, r1
 800b69a:	4291      	cmp	r1, r2
 800b69c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b6a0:	d100      	bne.n	800b6a4 <memcpy+0xc>
 800b6a2:	4770      	bx	lr
 800b6a4:	b510      	push	{r4, lr}
 800b6a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b6ae:	4291      	cmp	r1, r2
 800b6b0:	d1f9      	bne.n	800b6a6 <memcpy+0xe>
 800b6b2:	bd10      	pop	{r4, pc}

0800b6b4 <_free_r>:
 800b6b4:	b538      	push	{r3, r4, r5, lr}
 800b6b6:	4605      	mov	r5, r0
 800b6b8:	2900      	cmp	r1, #0
 800b6ba:	d041      	beq.n	800b740 <_free_r+0x8c>
 800b6bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6c0:	1f0c      	subs	r4, r1, #4
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	bfb8      	it	lt
 800b6c6:	18e4      	addlt	r4, r4, r3
 800b6c8:	f7ff ff96 	bl	800b5f8 <__malloc_lock>
 800b6cc:	4a1d      	ldr	r2, [pc, #116]	@ (800b744 <_free_r+0x90>)
 800b6ce:	6813      	ldr	r3, [r2, #0]
 800b6d0:	b933      	cbnz	r3, 800b6e0 <_free_r+0x2c>
 800b6d2:	6063      	str	r3, [r4, #4]
 800b6d4:	6014      	str	r4, [r2, #0]
 800b6d6:	4628      	mov	r0, r5
 800b6d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b6dc:	f7ff bf92 	b.w	800b604 <__malloc_unlock>
 800b6e0:	42a3      	cmp	r3, r4
 800b6e2:	d908      	bls.n	800b6f6 <_free_r+0x42>
 800b6e4:	6820      	ldr	r0, [r4, #0]
 800b6e6:	1821      	adds	r1, r4, r0
 800b6e8:	428b      	cmp	r3, r1
 800b6ea:	bf01      	itttt	eq
 800b6ec:	6819      	ldreq	r1, [r3, #0]
 800b6ee:	685b      	ldreq	r3, [r3, #4]
 800b6f0:	1809      	addeq	r1, r1, r0
 800b6f2:	6021      	streq	r1, [r4, #0]
 800b6f4:	e7ed      	b.n	800b6d2 <_free_r+0x1e>
 800b6f6:	461a      	mov	r2, r3
 800b6f8:	685b      	ldr	r3, [r3, #4]
 800b6fa:	b10b      	cbz	r3, 800b700 <_free_r+0x4c>
 800b6fc:	42a3      	cmp	r3, r4
 800b6fe:	d9fa      	bls.n	800b6f6 <_free_r+0x42>
 800b700:	6811      	ldr	r1, [r2, #0]
 800b702:	1850      	adds	r0, r2, r1
 800b704:	42a0      	cmp	r0, r4
 800b706:	d10b      	bne.n	800b720 <_free_r+0x6c>
 800b708:	6820      	ldr	r0, [r4, #0]
 800b70a:	4401      	add	r1, r0
 800b70c:	1850      	adds	r0, r2, r1
 800b70e:	4283      	cmp	r3, r0
 800b710:	6011      	str	r1, [r2, #0]
 800b712:	d1e0      	bne.n	800b6d6 <_free_r+0x22>
 800b714:	6818      	ldr	r0, [r3, #0]
 800b716:	685b      	ldr	r3, [r3, #4]
 800b718:	6053      	str	r3, [r2, #4]
 800b71a:	4408      	add	r0, r1
 800b71c:	6010      	str	r0, [r2, #0]
 800b71e:	e7da      	b.n	800b6d6 <_free_r+0x22>
 800b720:	d902      	bls.n	800b728 <_free_r+0x74>
 800b722:	230c      	movs	r3, #12
 800b724:	602b      	str	r3, [r5, #0]
 800b726:	e7d6      	b.n	800b6d6 <_free_r+0x22>
 800b728:	6820      	ldr	r0, [r4, #0]
 800b72a:	1821      	adds	r1, r4, r0
 800b72c:	428b      	cmp	r3, r1
 800b72e:	bf04      	itt	eq
 800b730:	6819      	ldreq	r1, [r3, #0]
 800b732:	685b      	ldreq	r3, [r3, #4]
 800b734:	6063      	str	r3, [r4, #4]
 800b736:	bf04      	itt	eq
 800b738:	1809      	addeq	r1, r1, r0
 800b73a:	6021      	streq	r1, [r4, #0]
 800b73c:	6054      	str	r4, [r2, #4]
 800b73e:	e7ca      	b.n	800b6d6 <_free_r+0x22>
 800b740:	bd38      	pop	{r3, r4, r5, pc}
 800b742:	bf00      	nop
 800b744:	240007a8 	.word	0x240007a8

0800b748 <_init>:
 800b748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b74a:	bf00      	nop
 800b74c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b74e:	bc08      	pop	{r3}
 800b750:	469e      	mov	lr, r3
 800b752:	4770      	bx	lr

0800b754 <_fini>:
 800b754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b756:	bf00      	nop
 800b758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b75a:	bc08      	pop	{r3}
 800b75c:	469e      	mov	lr, r3
 800b75e:	4770      	bx	lr
